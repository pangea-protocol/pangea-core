{
  "language": "Solidity",
  "sources": {
    "contracts/misc/Multicall.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0;\n\ncontract Multicall {\n    struct Call {\n        address target;\n        uint256 gasLimit;\n        bytes callData;\n    }\n    struct Result {\n        bool success;\n        uint256 gasUsed;\n        bytes returnData;\n    }\n\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp) {\n        timestamp = block.timestamp;\n    }\n\n    function getEthBalance(address addr) external view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n\n    function multicall(Call[] memory calls) external returns (uint256 blockNumber, Result[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new Result[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (address target, bytes memory callData) = (calls[i].target, calls[i].callData);\n            uint256 gasLeftBefore = gasleft();\n            (bool success, bytes memory ret) = target.call(callData);\n            uint256 gasUsed = gasLeftBefore - gasleft();\n            returnData[i] = Result(success, gasUsed, ret);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}