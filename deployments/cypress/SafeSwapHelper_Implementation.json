{
  "address": "0xBa106B86574Dd76BadddB81299FD3D45fF86faD4",
  "abi": [
    {
      "inputs": [],
      "name": "TickOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountIn",
          "type": "uint256"
        }
      ],
      "name": "calculateExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "overInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maximumAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountIn",
          "type": "uint256"
        }
      ],
      "name": "calculateExactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "overInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maximumAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountOut",
          "type": "uint256"
        }
      ],
      "name": "calculateExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountOut",
          "type": "uint256"
        }
      ],
      "name": "calculateExactOutputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wETH",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x77577e91a7fb3ed1b2778c5eca34067183821377a98b71987ce723778f77f656",
  "receipt": {
    "to": null,
    "from": "0x2A2F23ff33671361010D357529BDF0adca9416Fc",
    "contractAddress": "0xBa106B86574Dd76BadddB81299FD3D45fF86faD4",
    "transactionIndex": 1,
    "gasUsed": "3318916",
    "logsBloom": "0x
    "blockHash": "0xb4f6726226362d6a76411781a5b181e99cd5924cb288ca0b9e2b02b330ebe021",
    "transactionHash": "0x77577e91a7fb3ed1b2778c5eca34067183821377a98b71987ce723778f77f656",
    "logs": [],
    "blockNumber": 111617944,
    "cumulativeGasUsed": "4599170",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "c1064afc934590b178375e1b163afdd3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"TickOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountIn\",\"type\":\"uint256\"}],\"name\":\"calculateExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"overInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maximumAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountIn\",\"type\":\"uint256\"}],\"name\":\"calculateExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"overInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maximumAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"}],\"name\":\"calculateExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"}],\"name\":\"calculateExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateExactInput(address[],address,uint256)\":{\"returns\":{\"amountOut\":\"the maximum output\",\"maximumAmountIn\":\"Maximum input that the path can handle\",\"overInput\":\"Check if more input has been given to receive the corresponding amountOut\",\"price\":\"    price after swapping\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateExactInput(address[],address,uint256)\":{\"notice\":\"Calculate the maximum output that can be received when swapped according to the given path.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/safeSwap/SafeSwapHelper.sol\":\"SafeSwapHelper\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice do not use this. it can be easily corrupted\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0xd50187378c243a9523c29c977d6680e377bbc48f801bdc3c5b1eff8db5eee074\",\"license\":\"GPL-3.0\"},\"contracts/libraries/DyDxMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n/// @notice Math library that facilitates ranged liquidity calculations.\\nlibrary DyDxMath {\\n    function getDy(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dy) {\\n        unchecked {\\n            if (roundUp) {\\n                dy = FullMath.mulDivRoundingUp(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            } else {\\n                dy = FullMath.mulDiv(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            }\\n        }\\n    }\\n\\n    function getDx(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dx) {\\n        unchecked {\\n            if (roundUp) {\\n                dx = UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper),\\n                    priceLower\\n                );\\n            } else {\\n                dx = FullMath.mulDiv(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper) / priceLower;\\n            }\\n        }\\n    }\\n\\n    function getLiquidityForAmounts(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 dy,\\n        uint256 dx\\n    ) internal pure returns (uint256 liquidity) {\\n        unchecked {\\n            if (priceUpper <= currentPrice) {\\n                liquidity = FullMath.mulDiv(dy, FixedPoint.Q96, priceUpper - priceLower);\\n            } else if (currentPrice <= priceLower) {\\n                liquidity = FullMath.mulDiv(dx, FullMath.mulDiv(priceLower, priceUpper, FixedPoint.Q96), priceUpper - priceLower);\\n            } else {\\n                uint256 liquidity0 = FullMath.mulDiv(\\n                    dx,\\n                    FullMath.mulDiv(priceUpper, currentPrice, FixedPoint.Q96),\\n                    priceUpper - currentPrice\\n                );\\n                uint256 liquidity1 = FullMath.mulDiv(dy, FixedPoint.Q96, currentPrice - priceLower);\\n                liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n            }\\n        }\\n    }\\n\\n    function getAmountsForLiquidity(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 liquidityAmount,\\n        bool roundUp\\n    ) internal pure returns (uint128 token0amount, uint128 token1amount) {\\n        if (priceUpper <= currentPrice) {\\n            // Only supply `token1` (`token1` is Y).\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else if (currentPrice <= priceLower) {\\n            // Only supply `token0` (`token0` is X).\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else {\\n            // Supply both tokens.\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, currentPrice, priceUpper, roundUp));\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, currentPrice, roundUp));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd7e93680c237fbda55c989b3bbf3dcd14c4df5d40a0a9a997325d8a539f80cc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary FixedPoint {\\n    uint8 internal constant Q128RES = 128;\\n    uint8 internal constant Q96RES = 96;\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x591a424ebe1e10342bf873b49a85989bcbca4b575846ed3d3f3a194f122fdbbd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\\n/// @dev Handles \\\"phantom overflow\\\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b.\\n            // Compute the product mod 2**256 and mod 2**256 - 1,\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product.\\n            uint256 prod1; // Most significant 256 bits of the product.\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n            // Make sure the result is less than 2**256 -\\n            // also prevents denominator == 0.\\n            require(denominator > prod1);\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n            // Make division exact by subtracting the remainder from [prod1 prod0] -\\n            // compute remainder using mulmod.\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number.\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n            // Factor powers of two out of denominator -\\n            // compute largest power of two divisor of denominator\\n            // (always >= 1).\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two.\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n            // Divide [prod1 prod0] by the factors of two.\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos -\\n            // if twos is zero, then it becomes one.\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256 -\\n            // now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // for four bits. That is, denominator * inv = 1 mod 2**4.\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**8.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**16.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**32.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**64.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**128.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**256.\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        unchecked {\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8211b004be6ff6be30b81fe484544d00c7bb467a4fd2a0d6c60114353e2300cf\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary SafeCast {\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        require((z = uint128(y)) == y);\\n    }\\n\\n    function toInt128(uint256 y) internal pure returns (int128 z) {\\n        require(y <= 2**127 - 1);\\n        return int128(int256(y));\\n    }\\n}\\n\",\"keccak256\":\"0x26f130f9e37749f36d7c61bb818227d0ef4e089695be0009e9b626e63c7753c3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library for computing sqrt price for ticks of size 1.0001, i.e., sqrt(1.0001^tick) as fixed point Q64.96 numbers - supports\\n/// prices between 2**-128 and 2**128 - 1.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/TickMath.sol.\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MIN_TICK).\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MAX_TICK).\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    error TickOutOfBounds();\\n    error PriceOutOfBounds();\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96.\\n    /// @dev Throws if |tick| > max tick.\\n    /// @param tick The input tick for the above formula.\\n    /// @return sqrtPriceX96 Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick.\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        if (absTick > uint256(uint24(MAX_TICK))) revert TickOutOfBounds();\\n        unchecked {\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n            // This divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // We then downcast because we know the result always fits within 160 bits due to our tick input constraint.\\n            // We round up in the division so getTickAtSqrtRatio of the output price is always consistent.\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    function validatePrice(uint160 price) internal pure {\\n        if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio.\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96.\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio.\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // Second inequality must be < because the price can never reach the price at the max tick.\\n        if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n        unchecked {\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number.\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d20064b2a93ccddca358064e4843ebbe8c76fb75c85ce9c95d4050ee10d4ce5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that contains methods that perform common math functions but do not do any overflow or underflow checks.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/UnsafeMath.sol.\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y).\\n    /// @dev Division by 0 has unspecified behavior, and must be checked externally.\\n    /// @param x The dividend.\\n    /// @param y The divisor.\\n    /// @return z The quotient, ceil(x / y).\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea315497f3b3f0dcf40535dd8a130e3615ffaaa18a735eb6ec48f990fac148a0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/misc/safeSwap/SafeSwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"./SafeSwapHelperLib.sol\\\";\\n\\ncontract SafeSwapHelper is Initializable {\\n\\n    address public wETH;\\n\\n    function initialize(address _wETH) external initializer {\\n        wETH = _wETH;\\n    }\\n\\n    /// @notice Calculate the maximum output that can be received when swapped according to the given path.\\n    /// @return amountOut the maximum output\\n    /// @return price     price after swapping\\n    /// @return overInput Check if more input has been given to receive the corresponding amountOut\\n    /// @return maximumAmountIn Maximum input that the path can handle\\n    function calculateExactInput(\\n        address[] calldata path,\\n        address tokenIn,\\n        uint256 exactAmountIn\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amountOut,\\n            uint256 price,\\n            bool overInput,\\n            uint256 maximumAmountIn\\n        )\\n    {\\n        address originalTokenIn = tokenIn;\\n        tokenIn = tokenIn == address(0) ? wETH : tokenIn;\\n\\n        amountOut = exactAmountIn;\\n        bool _overInput;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            address pool = path[i];\\n\\n            (amountOut, price, _overInput) = SafeSwapHelperLib.exactInput(pool, tokenIn, amountOut);\\n\\n            if (_overInput) {\\n                overInput = true;\\n            }\\n\\n            tokenIn = IConcentratedLiquidityPool(pool).token0() == tokenIn\\n                ? IConcentratedLiquidityPool(pool).token1()\\n                : IConcentratedLiquidityPool(pool).token0();\\n        }\\n\\n        if (overInput) {\\n            (maximumAmountIn, ) = calculateExactOutput(path, originalTokenIn, amountOut);\\n            if (exactAmountIn <= maximumAmountIn) {\\n                // @dev\\n                overInput = false;\\n            }\\n        }\\n    }\\n\\n    function calculateExactInputSingle(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountIn\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amountOut,\\n            uint256 price,\\n            bool overInput,\\n            uint256 maximumAmountIn\\n        )\\n    {\\n        (amountOut, price, overInput) = SafeSwapHelperLib.exactInput(pool, tokenIn == address(0) ? wETH : tokenIn, exactAmountIn);\\n\\n        if (overInput) {\\n            (maximumAmountIn, ) = calculateExactOutputSingle(pool, tokenIn, amountOut);\\n        }\\n    }\\n\\n    function calculateExactOutput(\\n        address[] calldata path,\\n        address tokenIn,\\n        uint256 exactAmountOut\\n    ) public view returns (uint256 amountIn, uint256 price) {\\n        address tokenOut = findTokenOut(path, tokenIn);\\n\\n        uint256 amountOut = exactAmountOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            address pool = path[i - 1];\\n\\n            tokenOut = IConcentratedLiquidityPool(pool).token0() == tokenOut\\n                ? IConcentratedLiquidityPool(pool).token1()\\n                : IConcentratedLiquidityPool(pool).token0();\\n\\n            (amountOut, price) = SafeSwapHelperLib.exactOutput(pool, tokenOut, amountOut);\\n        }\\n        amountIn = amountOut;\\n    }\\n\\n    function calculateExactOutputSingle(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountOut\\n    ) public view returns (uint256 amountIn, uint256 price) {\\n        return SafeSwapHelperLib.exactOutput(pool, tokenIn == address(0) ? wETH : tokenIn, exactAmountOut);\\n    }\\n\\n    function findTokenOut(address[] calldata path, address tokenIn) internal view returns (address tokenOut) {\\n        tokenOut = tokenIn == address(0) ? wETH : tokenIn;\\n        IConcentratedLiquidityPool pool;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            pool = IConcentratedLiquidityPool(path[i]);\\n            tokenOut = pool.token0() == tokenOut ? pool.token1() : pool.token0();\\n        }\\n        return tokenOut;\\n    }\\n}\\n\",\"keccak256\":\"0xe0c58d964f1b808c083a0683f5d0a03d34514995c7885771f0392e69bc353cdb\",\"license\":\"GPL-3.0\"},\"contracts/misc/safeSwap/SafeSwapHelperLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IConcentratedLiquidityPool as CLPool} from \\\"../../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../../libraries/DyDxMath.sol\\\";\\nimport \\\"../../libraries/TickMath.sol\\\";\\nimport \\\"../../libraries/FullMath.sol\\\";\\n\\n\\nlibrary SafeSwapHelperLib {\\n    struct SwapCache {\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        uint256 output;\\n        int24 nextTickToCross;\\n    }\\n\\n    function exactInput(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountIn\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 amountOut,\\n            uint256 price,\\n            bool overInput\\n        )\\n    {\\n        bool zeroForOne = determineZeroForOne(pool, tokenIn);\\n        uint24 swapFee = CLPool(pool).swapFee();\\n        int24 iTickSpacing = int24(CLPool(pool).tickSpacing());\\n\\n        // initialize cache\\n        SwapCache memory cache;\\n        {\\n            (uint160 currentPrice, int24 nearestTick) = CLPool(pool).getPriceAndNearestTicks();\\n            cache = SwapCache({\\n                currentPrice: currentPrice,\\n                currentLiquidity: uint256(CLPool(pool).liquidity()),\\n                input: exactAmountIn,\\n                output: 0,\\n                nextTickToCross: zeroForOne ? nearestTick : CLPool(pool).ticks(nearestTick).nextTick\\n            });\\n        }\\n        if (zeroLiquidity(cache)) return (0, cache.currentPrice, exactAmountIn > 0);\\n\\n        while (cache.input != 0) {\\n            uint256 nextTickPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n            uint256 output = 0;\\n            bool cross = false;\\n\\n            if (zeroForOne) {\\n                // Trading token 0 (x) for token 1 (y).\\n                // Price is decreasing.\\n                // Maximum input amount within current tick range: \\u0394x = \\u0394(1/\\u221a\\ud835\\udc43) \\u00b7 L.\\n                uint256 maxDx = DyDxMath.getDx(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n\\n                if (cache.input <= maxDx) {\\n                    // We can swap within the current range.\\n                    uint256 liquidityPadded = cache.currentLiquidity << FixedPoint.Q96RES;\\n                    // Calculate new price after swap: \\u221a\\ud835\\udc43[new] =  L \\u00b7 \\u221a\\ud835\\udc43 / (L + \\u0394x \\u00b7 \\u221a\\ud835\\udc43)\\n                    // This is derived from \\u0394(1/\\u221a\\ud835\\udc43) = \\u0394x/L\\n                    // where \\u0394(1/\\u221a\\ud835\\udc43) is 1/\\u221a\\ud835\\udc43[old] - 1/\\u221a\\ud835\\udc43[new] and we solve for \\u221a\\ud835\\udc43[new].\\n                    // In case of an overflow we can use: \\u221a\\ud835\\udc43[new] = L / (L / \\u221a\\ud835\\udc43 + \\u0394x).\\n                    // This is derived by dividing the original fraction by \\u221a\\ud835\\udc43 on both sides.\\n                    uint256 newPrice = uint256(\\n                        FullMath.mulDivRoundingUp(liquidityPadded, cache.currentPrice, liquidityPadded + cache.currentPrice * cache.input)\\n                    );\\n\\n                    if (!(nextTickPrice <= newPrice && newPrice < cache.currentPrice)) {\\n                        // Overflow. We use a modified version of the formula.\\n                        newPrice = uint160(UnsafeMath.divRoundingUp(liquidityPadded, liquidityPadded / cache.currentPrice + cache.input));\\n                    }\\n                    // Based on the price difference calculate the output of th swap: \\u0394y = \\u0394\\u221aP \\u00b7 L.\\n                    output = DyDxMath.getDy(cache.currentLiquidity, newPrice, cache.currentPrice, false);\\n                    if (output == DyDxMath.getDy(cache.currentLiquidity, TickMath.MIN_SQRT_RATIO, cache.currentPrice, false)) {\\n                        overInput = true;\\n                    }\\n                    cache.currentPrice = newPrice;\\n                    cache.input = 0;\\n                } else {\\n                    // Execute swap step and cross the tick.\\n                    output = DyDxMath.getDy(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n                    cache.currentPrice = nextTickPrice;\\n                    cross = true;\\n                    cache.input -= maxDx;\\n                }\\n            } else {\\n                // Price is increasing.\\n                // Maximum swap amount within the current tick range: \\u0394y = \\u0394\\u221aP \\u00b7 L.\\n                uint256 maxDy = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n\\n                if (cache.input <= maxDy) {\\n                    // We can swap within the current range.\\n                    // Calculate new price after swap: \\u0394P = \\u0394y/L.\\n                    uint256 newPrice = cache.currentPrice + FullMath.mulDiv(cache.input, FixedPoint.Q96, cache.currentLiquidity);\\n                    // Calculate output of swap\\n                    // - \\u0394x = \\u0394(1/\\u221aP) \\u00b7 L.\\n                    output = DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, newPrice, false);\\n                    if (output == DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, TickMath.MAX_SQRT_RATIO - 1, false)) {\\n                        overInput = true;\\n                    }\\n                    cache.currentPrice = newPrice;\\n                    cache.input = 0;\\n                } else {\\n                    // Swap & cross the tick.\\n                    output = DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n                    cache.currentPrice = nextTickPrice;\\n                    cross = true;\\n                    cache.input -= maxDy;\\n                }\\n            }\\n\\n            amountOut += amountWithOutFee(output, swapFee);\\n\\n            if (cross) {\\n                (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n\\n                if (cache.currentLiquidity == 0) {\\n                    if (cache.nextTickToCross == TickMath.MAX_TICK || cache.nextTickToCross == TickMath.MIN_TICK) {\\n                        // In the case of the last tick, there is no next tick.\\n                        // price must be crossed because of rangeFeeGrowth\\n                        if (zeroForOne) {\\n                            cache.currentPrice = Math.max(cache.currentPrice - 1, TickMath.MIN_SQRT_RATIO);\\n                        } else {\\n                            cache.currentPrice = Math.min(cache.currentPrice + 1, TickMath.MAX_SQRT_RATIO - 1);\\n                        }\\n                        break;\\n                    }\\n                    cache.currentPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n                    (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n                }\\n            }\\n        }\\n        if (cache.input > 0) {\\n            overInput = true;\\n        }\\n        price = cache.currentPrice;\\n    }\\n\\n    function exactOutput(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountOut\\n    ) internal view returns (uint256 amountIn, uint256 price) {\\n        bool zeroForOne = determineZeroForOne(pool, tokenIn);\\n        uint24 swapFee = CLPool(pool).swapFee();\\n        int24 iTickSpacing = int24(CLPool(pool).tickSpacing());\\n\\n        // initialize cache\\n        SwapCache memory cache;\\n        {\\n            (uint160 currentPrice, int24 nearestTick) = CLPool(pool).getPriceAndNearestTicks();\\n            cache = SwapCache({\\n                currentPrice: currentPrice,\\n                currentLiquidity: uint256(CLPool(pool).liquidity()),\\n                input: 0,\\n                output: exactAmountOut,\\n                nextTickToCross: zeroForOne ? nearestTick : CLPool(pool).ticks(nearestTick).nextTick\\n            });\\n        }\\n        if (zeroLiquidity(cache)) return (0, cache.currentPrice);\\n\\n        while (cache.output != 0) {\\n            uint256 nextTickPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n            uint256 input = 0;\\n            bool cross = false;\\n\\n            if (zeroForOne) {\\n                uint256 maxDy = amountWithOutFee(DyDxMath.getDy(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false), swapFee);\\n\\n                if (cache.output <= maxDy) {\\n                    uint256 newPrice = cache.currentPrice -\\n                        FullMath.mulDivRoundingUp(amountWithFee(cache.output, swapFee), FixedPoint.Q96, cache.currentLiquidity);\\n                    input = DyDxMath.getDx(cache.currentLiquidity, newPrice, cache.currentPrice, true);\\n\\n                    cache.currentPrice = newPrice;\\n                    cache.output = 0;\\n                } else {\\n                    input = DyDxMath.getDx(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n\\n                    cache.currentPrice = nextTickPrice;\\n                    cache.output -= maxDy;\\n                    cross = true;\\n                }\\n            } else {\\n                uint256 maxDx = amountWithOutFee(DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false), swapFee);\\n\\n                if (cache.output <= maxDx) {\\n                    uint256 liquidityPadded = cache.currentLiquidity << FixedPoint.Q96RES;\\n                    uint256 newPrice = uint256(\\n                        FullMath.mulDivRoundingUp(\\n                            liquidityPadded,\\n                            cache.currentPrice,\\n                            liquidityPadded - cache.currentPrice * amountWithFee(cache.output, swapFee)\\n                        )\\n                    );\\n\\n                    if (!(cache.currentPrice <= newPrice && newPrice < nextTickPrice)) {\\n                        // Overflow. We use a modified version of the formula.\\n                        newPrice = uint160(\\n                            UnsafeMath.divRoundingUp(\\n                                liquidityPadded,\\n                                liquidityPadded / cache.currentPrice - amountWithFee(cache.output, swapFee)\\n                            )\\n                        );\\n                    }\\n\\n                    input = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, newPrice, true);\\n\\n                    cache.currentPrice = newPrice;\\n                    cache.output = 0;\\n                } else {\\n                    input = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n\\n                    cache.currentPrice = nextTickPrice;\\n                    cache.output -= maxDx;\\n                    cross = true;\\n                }\\n            }\\n            amountIn += input;\\n\\n            if (cross) {\\n                (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n\\n                if (cache.currentLiquidity == 0) {\\n                    if (cache.nextTickToCross == TickMath.MAX_TICK || cache.nextTickToCross == TickMath.MIN_TICK) {\\n                        // In the case of the last tick, there is no next tick.\\n                        // price must be crossed because of rangeFeeGrowth\\n                        if (zeroForOne) {\\n                            cache.currentPrice = Math.max(cache.currentPrice - 1, TickMath.MIN_SQRT_RATIO);\\n                        } else {\\n                            cache.currentPrice = Math.min(cache.currentPrice + 1, TickMath.MAX_SQRT_RATIO - 1);\\n                        }\\n                        break;\\n                    }\\n                    cache.currentPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n                    (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n                }\\n            }\\n        }\\n        price = cache.currentPrice;\\n        require(cache.output == 0, \\\"INSUFFICIENT OUTPUT\\\");\\n    }\\n\\n    function crossTick(\\n        address pool,\\n        SwapCache memory cache,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) private view returns (uint256 currentLiquidity, int24 nextTickToCross) {\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n            unchecked {\\n                if ((cache.nextTickToCross / tickSpacing) % 2 == 0) {\\n                    currentLiquidity = cache.currentLiquidity - CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                } else {\\n                    currentLiquidity = cache.currentLiquidity + CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                }\\n            }\\n            nextTickToCross = CLPool(pool).ticks(cache.nextTickToCross).previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n            unchecked {\\n                if ((cache.nextTickToCross / tickSpacing) % 2 == 0) {\\n                    currentLiquidity = cache.currentLiquidity + CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                } else {\\n                    currentLiquidity = cache.currentLiquidity - CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                }\\n            }\\n            nextTickToCross = CLPool(pool).ticks(cache.nextTickToCross).nextTick;\\n        }\\n    }\\n\\n    function zeroLiquidity(SwapCache memory cache) internal pure returns (bool) {\\n        if (cache.currentLiquidity > 0) {\\n            return false;\\n        }\\n        return cache.nextTickToCross == TickMath.MIN_TICK || cache.nextTickToCross == TickMath.MAX_TICK;\\n    }\\n\\n    function amountWithFee(uint256 amount, uint256 swapFee) private pure returns (uint256) {\\n        return FullMath.mulDivRoundingUp(amount, 1e6, 1e6 - swapFee);\\n    }\\n\\n    function amountWithOutFee(uint256 amount, uint256 swapFee) private pure returns (uint256) {\\n        return amount - FullMath.mulDivRoundingUp(amount, swapFee, 1e6);\\n    }\\n\\n    function determineZeroForOne(address pool, address tokenIn) private view returns (bool) {\\n        return CLPool(pool).token0() == tokenIn;\\n    }\\n}\\n\",\"keccak256\":\"0xc090acf6a90d103a4e5e5ea0c3b4242004ef5eb2a711f6a77e2f65ee50d99b92\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612a74806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063beba5d3f11610050578063beba5d3f146100f0578063c4d66de814610103578063f24286211461011857600080fd5b80635213f13b146100775780636ecc5794146100b557806375a844a0146100dd575b600080fd5b61008a610085366004612579565b610163565b6040805194855260208501939093529015159183019190915260608201526080015b60405180910390f35b6100c86100c3366004612605565b6103fa565b604080519283526020830191909152016100ac565b6100c86100eb366004612579565b610456565b61008a6100fe366004612605565b61068a565b610116610111366004612646565b610700565b005b60005461013e9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b60008080808573ffffffffffffffffffffffffffffffffffffffff81161561018b57866101ab565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff165b96508594506000805b898110156103cb5760008b8b838181106101d0576101d0612663565b90506020020160208101906101e59190612646565b90506101f2818b8a610867565b91995097509250821561020457600195505b8973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561026157600080fd5b505afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102999190612692565b73ffffffffffffffffffffffffffffffffffffffff1614610337578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156102fa57600080fd5b505afa15801561030e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103329190612692565b6103b5565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561037d57600080fd5b505afa158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b59190612692565b99505080806103c3906126de565b9150506101b4565b5083156103ed576103de8a8a8489610456565b5092508287116103ed57600093505b5050945094509450949050565b6000806104498573ffffffffffffffffffffffffffffffffffffffff8616156104235785610443565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff165b85610fea565b915091505b935093915050565b600080600061046687878761172b565b905083865b801561067c5760008989610480600185612717565b81811061048f5761048f612663565b90506020020160208101906104a49190612646565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561050357600080fd5b505afa158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b9190612692565b73ffffffffffffffffffffffffffffffffffffffff16146105d9578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561059c57600080fd5b505afa1580156105b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d49190612692565b610657565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561061f57600080fd5b505afa158015610633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106579190612692565b9350610664818585610fea565b955092508190506106748161272e565b91505061046b565b509791965090945050505050565b60008080806106db8773ffffffffffffffffffffffffffffffffffffffff8816156106b557876106d5565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff165b87610867565b9195509350915081156106f7576106f38787866103fa565b5090505b93509350935093565b600054610100900460ff1661071b5760005460ff161561071f565b303b155b6107b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff161580156107ef57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff851602179055801561086357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6000806000806108778787611975565b905060008773ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c157600080fd5b505afa1580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f99190612763565b905060008873ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190612763565b90506109b26040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808b73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b1580156109fa57600080fd5b505afa158015610a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3291906127aa565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa357600080fd5b505afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb91906127ff565b6fffffffffffffffffffffffffffffffff1681526020018b81526020016000815260200187610bae576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8f169063f30dba939060240160c06040518083038186803b158015610b6d57600080fd5b505afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba5919061281a565b60200151610bb0565b825b60020b81525092505050610bc381611a2a565b15610bdd575160009650945050508415159150610fe19050565b604081015115610fcb576000610bf68260800151611aab565b73ffffffffffffffffffffffffffffffffffffffff1690506000808615610d54576000610c2e85602001518587600001516000611e3e565b905080856040015111610d185760208501518551604087015160609290921b91600091610c7191849190610c6290826128d2565b610c6c908661290f565b611e98565b9050808611158015610c835750865181105b610ccc5760408701518751610cb3918491610c9e9083612956565b610ca8919061290f565b808204910615150190565b73ffffffffffffffffffffffffffffffffffffffff1690505b610ce187602001518289600001516000611ef3565b60208801518851919650610cfd916401000276a3906000611ef3565b851415610d095760019a505b86525060006040860152610d4e565b610d2d85602001518587600001516000611ef3565b848652604086018051919450600193508291610d4a908390612717565b9052505b50610e59565b6000610d6b85602001518660000151866000611ef3565b905080856040015111610e21576000610d9a86604001516c010000000000000000000000008860200151611f38565b8651610da6919061290f565b9050610dbd86602001518760000151836000611e3e565b60208701518751919550610e0791610dea600173fffd8963efd1fc6a506488495d951d5263988d26612991565b73ffffffffffffffffffffffffffffffffffffffff166000611e3e565b841415610e1357600199505b855260006040860152610e57565b610e3685602001518660000151866000611e3e565b848652604086018051919450600193508291610e53908390612717565b9052505b505b610e68828762ffffff16612009565b610e72908b61290f565b99508015610fc357610e868d85878a612023565b60020b608086015260208501819052610fc357610ec27ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186129c6565b60020b846080015160020b1480610eff5750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b15610f84578615610f2e578351610f2790610f1c90600190612717565b6401000276a361251a565b8452610f7c565b8351610f7990610f3f90600161290f565b610f5e600173fffd8963efd1fc6a506488495d951d5263988d26612991565b73ffffffffffffffffffffffffffffffffffffffff16612531565b84525b505050610fcb565b610f918460800151611aab565b73ffffffffffffffffffffffffffffffffffffffff168452610fb58d85878a612023565b60020b608086015260208501525b505050610bdd565b604081015115610fda57600194505b5194505050505b93509350939050565b6000806000610ff98686611975565b905060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561104357600080fd5b505afa158015611057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107b9190612763565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c557600080fd5b505afa1580156110d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fd9190612763565b90506111346040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808a73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561117c57600080fd5b505afa158015611190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b491906127aa565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561122557600080fd5b505afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d91906127ff565b6fffffffffffffffffffffffffffffffff168152602001600081526020018a815260200187611330576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8e169063f30dba939060240160c06040518083038186803b1580156112ef57600080fd5b505afa158015611303573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611327919061281a565b60200151611332565b825b60020b8152509250505061134581611a2a565b1561135a575160009550935061044e92505050565b6060810151156116ae5760006113738260800151611aab565b73ffffffffffffffffffffffffffffffffffffffff16905060008086156114665760006113b96113ae86602001518688600001516000611ef3565b8862ffffff16612009565b90508085606001511161142a5760006113f66113de87606001518a62ffffff16612540565b6c010000000000000000000000008860200151611e98565b86516114029190612717565b905061141986602001518288600001516001611e3e565b908652600060608701529250611460565b61143f85602001518587600001516000611e3e565b8486526060860180519194508291611458908390612717565b905250600191505b50611590565b60006114806113ae86602001518760000151876000611e3e565b905080856060015111611558576000606060ff168660200151901b905060006114d18288600001516114bb8a606001518d62ffffff16612540565b8a516114c791906128d2565b610c6c9086612717565b9050808760000151111580156114e657508581105b611530576115178261150189606001518c62ffffff16612540565b895161150d9086612956565b610ca89190612717565b73ffffffffffffffffffffffffffffffffffffffff1690505b61154587602001518860000151836001611ef3565b90875260006060880152935061158e9050565b61156d85602001518660000151866000611ef3565b8486526060860180519194508291611586908390612717565b905250600191505b505b61159a828a61290f565b985080156116a6576115ae8c85878a612023565b60020b6080860152602085018190526116a6576115ea7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186129c6565b60020b846080015160020b14806116275750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b1561166757861561164b57835161164490610f1c90600190612717565b845261165f565b835161165c90610f3f90600161290f565b84525b5050506116ae565b6116748460800151611aab565b73ffffffffffffffffffffffffffffffffffffffff1684526116988c85878a612023565b60020b608086015260208501525b50505061135a565b805160608201519095501561171f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e54204f55545055540000000000000000000000000060448201526064016107a7565b50505050935093915050565b600073ffffffffffffffffffffffffffffffffffffffff82161561174f578161176f565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff165b90506000805b8481101561196b5785858281811061178f5761178f612663565b90506020020160208101906117a49190612646565b91508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561180357600080fd5b505afa158015611817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183b9190612692565b73ffffffffffffffffffffffffffffffffffffffff16146118d9578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561189c57600080fd5b505afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d49190612692565b611957565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561191f57600080fd5b505afa158015611933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119579190612692565b925080611963816126de565b915050611775565b50505b9392505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156119d457600080fd5b505afa1580156119e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0c9190612692565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b602081015160009015611a3f57506000919050565b608082015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276181480611aa55750611a987ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186129c6565b60020b826080015160020b145b92915050565b60008060008360020b12611ac2578260020b611acf565b8260020b611acf90612a05565b9050611afa7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186129c6565b62ffffff16811115611b38576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018216611b5957700100000000000000000000000000000000611b6b565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611b9f576ffff97272373d413259a46990580e213a0260801c5b6004821615611bbe576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611bdd576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611bfc576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611c1b576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611c3a576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611c59576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611c79576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611c99576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611cb9576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611cd9576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611cf9576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611d19576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611d39576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611d59576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611d7a576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611d9a576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611db9576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611dd6576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611e1557807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81611e1157611e11612927565b0490505b640100000000810615611e29576001611e2c565b60005b60ff16602082901c0192505050919050565b60008115611e6d57611e66611e5a606087901b86860386611e98565b85808204910615150190565b9050611e90565b83611e7f606087901b82860386611f38565b81611e8c57611e8c612927565b0490505b949350505050565b6000611ea5848484611f38565b90508180611eb557611eb5612927565b8385091561196e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110611ee957600080fd5b6001019392505050565b60008115611f1557611e66858585036c01000000000000000000000000611e98565b611f2f858585036c01000000000000000000000000611f38565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611f905760008411611f8557600080fd5b50829004905061196e565b808411611f9c57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60006120198383620f4240611e98565b61196e9084612717565b600080821561229f5760028460020b866080015160020b8161204757612047612927565b0560020b8161205857612058612927565b0760020b61212a5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b1580156120cf57600080fd5b505afa1580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612107919061281a565b604001516fffffffffffffffffffffffffffffffff1685602001510391506121f0565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561219957600080fd5b505afa1580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d1919061281a565b604001516fffffffffffffffffffffffffffffffff1685602001510191505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561225f57600080fd5b505afa158015612273573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612297919061281a565b519050612511565b60028460020b866080015160020b816122ba576122ba612927565b0560020b816122cb576122cb612927565b0760020b61239d5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561234257600080fd5b505afa158015612356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237a919061281a565b604001516fffffffffffffffffffffffffffffffff168560200151019150612463565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561240c57600080fd5b505afa158015612420573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612444919061281a565b604001516fffffffffffffffffffffffffffffffff1685602001510391505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b1580156124d257600080fd5b505afa1580156124e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250a919061281a565b6020015190505b94509492505050565b60008183101561252a578161196e565b5090919050565b600081831061252a578161196e565b600061196e83620f4240610c6c8582612717565b73ffffffffffffffffffffffffffffffffffffffff8116811461257657600080fd5b50565b6000806000806060858703121561258f57600080fd5b843567ffffffffffffffff808211156125a757600080fd5b818701915087601f8301126125bb57600080fd5b8135818111156125ca57600080fd5b8860208260051b85010111156125df57600080fd5b602092830196509450508501356125f581612554565b9396929550929360400135925050565b60008060006060848603121561261a57600080fd5b833561262581612554565b9250602084013561263581612554565b929592945050506040919091013590565b60006020828403121561265857600080fd5b813561196e81612554565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156126a457600080fd5b815161196e81612554565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612710576127106126af565b5060010190565b600082821015612729576127296126af565b500390565b60008161273d5761273d6126af565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561277557600080fd5b815162ffffff8116811461196e57600080fd5b805161279381612554565b919050565b8051600281900b811461279357600080fd5b600080604083850312156127bd57600080fd5b82516127c881612554565b91506127d660208401612798565b90509250929050565b80516fffffffffffffffffffffffffffffffff8116811461279357600080fd5b60006020828403121561281157600080fd5b61196e826127df565b600060c0828403121561282c57600080fd5b60405160c0810181811067ffffffffffffffff82111715612876577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405261288283612798565b815261289060208401612798565b60208201526128a1604084016127df565b604082015260608301516060820152608083015160808201526128c660a08401612788565b60a08201529392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561290a5761290a6126af565b500290565b60008219821115612922576129226126af565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261298c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600073ffffffffffffffffffffffffffffffffffffffff838116908316818110156129be576129be6126af565b039392505050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008114156129fc576129fc6126af565b60000392915050565b60007f8000000000000000000000000000000000000000000000000000000000000000821415612a3757612a376126af565b506000039056fea2646970667358221220dee46c60e1dc64742e12e0a961a9cc07a5b544044e89c200f3e8b5845a0928c764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063beba5d3f11610050578063beba5d3f146100f0578063c4d66de814610103578063f24286211461011857600080fd5b80635213f13b146100775780636ecc5794146100b557806375a844a0146100dd575b600080fd5b61008a610085366004612579565b610163565b6040805194855260208501939093529015159183019190915260608201526080015b60405180910390f35b6100c86100c3366004612605565b6103fa565b604080519283526020830191909152016100ac565b6100c86100eb366004612579565b610456565b61008a6100fe366004612605565b61068a565b610116610111366004612646565b610700565b005b60005461013e9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b60008080808573ffffffffffffffffffffffffffffffffffffffff81161561018b57866101ab565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff165b96508594506000805b898110156103cb5760008b8b838181106101d0576101d0612663565b90506020020160208101906101e59190612646565b90506101f2818b8a610867565b91995097509250821561020457600195505b8973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561026157600080fd5b505afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102999190612692565b73ffffffffffffffffffffffffffffffffffffffff1614610337578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156102fa57600080fd5b505afa15801561030e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103329190612692565b6103b5565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561037d57600080fd5b505afa158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b59190612692565b99505080806103c3906126de565b9150506101b4565b5083156103ed576103de8a8a8489610456565b5092508287116103ed57600093505b5050945094509450949050565b6000806104498573ffffffffffffffffffffffffffffffffffffffff8616156104235785610443565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff165b85610fea565b915091505b935093915050565b600080600061046687878761172b565b905083865b801561067c5760008989610480600185612717565b81811061048f5761048f612663565b90506020020160208101906104a49190612646565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561050357600080fd5b505afa158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b9190612692565b73ffffffffffffffffffffffffffffffffffffffff16146105d9578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561059c57600080fd5b505afa1580156105b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d49190612692565b610657565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561061f57600080fd5b505afa158015610633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106579190612692565b9350610664818585610fea565b955092508190506106748161272e565b91505061046b565b509791965090945050505050565b60008080806106db8773ffffffffffffffffffffffffffffffffffffffff8816156106b557876106d5565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff165b87610867565b9195509350915081156106f7576106f38787866103fa565b5090505b93509350935093565b600054610100900460ff1661071b5760005460ff161561071f565b303b155b6107b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff161580156107ef57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff851602179055801561086357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6000806000806108778787611975565b905060008773ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c157600080fd5b505afa1580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f99190612763565b905060008873ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190612763565b90506109b26040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808b73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b1580156109fa57600080fd5b505afa158015610a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3291906127aa565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa357600080fd5b505afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb91906127ff565b6fffffffffffffffffffffffffffffffff1681526020018b81526020016000815260200187610bae576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8f169063f30dba939060240160c06040518083038186803b158015610b6d57600080fd5b505afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba5919061281a565b60200151610bb0565b825b60020b81525092505050610bc381611a2a565b15610bdd575160009650945050508415159150610fe19050565b604081015115610fcb576000610bf68260800151611aab565b73ffffffffffffffffffffffffffffffffffffffff1690506000808615610d54576000610c2e85602001518587600001516000611e3e565b905080856040015111610d185760208501518551604087015160609290921b91600091610c7191849190610c6290826128d2565b610c6c908661290f565b611e98565b9050808611158015610c835750865181105b610ccc5760408701518751610cb3918491610c9e9083612956565b610ca8919061290f565b808204910615150190565b73ffffffffffffffffffffffffffffffffffffffff1690505b610ce187602001518289600001516000611ef3565b60208801518851919650610cfd916401000276a3906000611ef3565b851415610d095760019a505b86525060006040860152610d4e565b610d2d85602001518587600001516000611ef3565b848652604086018051919450600193508291610d4a908390612717565b9052505b50610e59565b6000610d6b85602001518660000151866000611ef3565b905080856040015111610e21576000610d9a86604001516c010000000000000000000000008860200151611f38565b8651610da6919061290f565b9050610dbd86602001518760000151836000611e3e565b60208701518751919550610e0791610dea600173fffd8963efd1fc6a506488495d951d5263988d26612991565b73ffffffffffffffffffffffffffffffffffffffff166000611e3e565b841415610e1357600199505b855260006040860152610e57565b610e3685602001518660000151866000611e3e565b848652604086018051919450600193508291610e53908390612717565b9052505b505b610e68828762ffffff16612009565b610e72908b61290f565b99508015610fc357610e868d85878a612023565b60020b608086015260208501819052610fc357610ec27ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186129c6565b60020b846080015160020b1480610eff5750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b15610f84578615610f2e578351610f2790610f1c90600190612717565b6401000276a361251a565b8452610f7c565b8351610f7990610f3f90600161290f565b610f5e600173fffd8963efd1fc6a506488495d951d5263988d26612991565b73ffffffffffffffffffffffffffffffffffffffff16612531565b84525b505050610fcb565b610f918460800151611aab565b73ffffffffffffffffffffffffffffffffffffffff168452610fb58d85878a612023565b60020b608086015260208501525b505050610bdd565b604081015115610fda57600194505b5194505050505b93509350939050565b6000806000610ff98686611975565b905060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561104357600080fd5b505afa158015611057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107b9190612763565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c557600080fd5b505afa1580156110d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fd9190612763565b90506111346040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808a73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561117c57600080fd5b505afa158015611190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b491906127aa565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561122557600080fd5b505afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d91906127ff565b6fffffffffffffffffffffffffffffffff168152602001600081526020018a815260200187611330576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8e169063f30dba939060240160c06040518083038186803b1580156112ef57600080fd5b505afa158015611303573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611327919061281a565b60200151611332565b825b60020b8152509250505061134581611a2a565b1561135a575160009550935061044e92505050565b6060810151156116ae5760006113738260800151611aab565b73ffffffffffffffffffffffffffffffffffffffff16905060008086156114665760006113b96113ae86602001518688600001516000611ef3565b8862ffffff16612009565b90508085606001511161142a5760006113f66113de87606001518a62ffffff16612540565b6c010000000000000000000000008860200151611e98565b86516114029190612717565b905061141986602001518288600001516001611e3e565b908652600060608701529250611460565b61143f85602001518587600001516000611e3e565b8486526060860180519194508291611458908390612717565b905250600191505b50611590565b60006114806113ae86602001518760000151876000611e3e565b905080856060015111611558576000606060ff168660200151901b905060006114d18288600001516114bb8a606001518d62ffffff16612540565b8a516114c791906128d2565b610c6c9086612717565b9050808760000151111580156114e657508581105b611530576115178261150189606001518c62ffffff16612540565b895161150d9086612956565b610ca89190612717565b73ffffffffffffffffffffffffffffffffffffffff1690505b61154587602001518860000151836001611ef3565b90875260006060880152935061158e9050565b61156d85602001518660000151866000611ef3565b8486526060860180519194508291611586908390612717565b905250600191505b505b61159a828a61290f565b985080156116a6576115ae8c85878a612023565b60020b6080860152602085018190526116a6576115ea7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186129c6565b60020b846080015160020b14806116275750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b1561166757861561164b57835161164490610f1c90600190612717565b845261165f565b835161165c90610f3f90600161290f565b84525b5050506116ae565b6116748460800151611aab565b73ffffffffffffffffffffffffffffffffffffffff1684526116988c85878a612023565b60020b608086015260208501525b50505061135a565b805160608201519095501561171f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e54204f55545055540000000000000000000000000060448201526064016107a7565b50505050935093915050565b600073ffffffffffffffffffffffffffffffffffffffff82161561174f578161176f565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff165b90506000805b8481101561196b5785858281811061178f5761178f612663565b90506020020160208101906117a49190612646565b91508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561180357600080fd5b505afa158015611817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183b9190612692565b73ffffffffffffffffffffffffffffffffffffffff16146118d9578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561189c57600080fd5b505afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d49190612692565b611957565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561191f57600080fd5b505afa158015611933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119579190612692565b925080611963816126de565b915050611775565b50505b9392505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156119d457600080fd5b505afa1580156119e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0c9190612692565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b602081015160009015611a3f57506000919050565b608082015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276181480611aa55750611a987ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186129c6565b60020b826080015160020b145b92915050565b60008060008360020b12611ac2578260020b611acf565b8260020b611acf90612a05565b9050611afa7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186129c6565b62ffffff16811115611b38576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018216611b5957700100000000000000000000000000000000611b6b565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611b9f576ffff97272373d413259a46990580e213a0260801c5b6004821615611bbe576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611bdd576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611bfc576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611c1b576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611c3a576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611c59576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611c79576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611c99576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611cb9576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611cd9576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611cf9576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611d19576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611d39576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611d59576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611d7a576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611d9a576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611db9576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611dd6576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611e1557807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81611e1157611e11612927565b0490505b640100000000810615611e29576001611e2c565b60005b60ff16602082901c0192505050919050565b60008115611e6d57611e66611e5a606087901b86860386611e98565b85808204910615150190565b9050611e90565b83611e7f606087901b82860386611f38565b81611e8c57611e8c612927565b0490505b949350505050565b6000611ea5848484611f38565b90508180611eb557611eb5612927565b8385091561196e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110611ee957600080fd5b6001019392505050565b60008115611f1557611e66858585036c01000000000000000000000000611e98565b611f2f858585036c01000000000000000000000000611f38565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611f905760008411611f8557600080fd5b50829004905061196e565b808411611f9c57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60006120198383620f4240611e98565b61196e9084612717565b600080821561229f5760028460020b866080015160020b8161204757612047612927565b0560020b8161205857612058612927565b0760020b61212a5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b1580156120cf57600080fd5b505afa1580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612107919061281a565b604001516fffffffffffffffffffffffffffffffff1685602001510391506121f0565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561219957600080fd5b505afa1580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d1919061281a565b604001516fffffffffffffffffffffffffffffffff1685602001510191505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561225f57600080fd5b505afa158015612273573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612297919061281a565b519050612511565b60028460020b866080015160020b816122ba576122ba612927565b0560020b816122cb576122cb612927565b0760020b61239d5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561234257600080fd5b505afa158015612356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237a919061281a565b604001516fffffffffffffffffffffffffffffffff168560200151019150612463565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561240c57600080fd5b505afa158015612420573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612444919061281a565b604001516fffffffffffffffffffffffffffffffff1685602001510391505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b1580156124d257600080fd5b505afa1580156124e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250a919061281a565b6020015190505b94509492505050565b60008183101561252a578161196e565b5090919050565b600081831061252a578161196e565b600061196e83620f4240610c6c8582612717565b73ffffffffffffffffffffffffffffffffffffffff8116811461257657600080fd5b50565b6000806000806060858703121561258f57600080fd5b843567ffffffffffffffff808211156125a757600080fd5b818701915087601f8301126125bb57600080fd5b8135818111156125ca57600080fd5b8860208260051b85010111156125df57600080fd5b602092830196509450508501356125f581612554565b9396929550929360400135925050565b60008060006060848603121561261a57600080fd5b833561262581612554565b9250602084013561263581612554565b929592945050506040919091013590565b60006020828403121561265857600080fd5b813561196e81612554565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156126a457600080fd5b815161196e81612554565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612710576127106126af565b5060010190565b600082821015612729576127296126af565b500390565b60008161273d5761273d6126af565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561277557600080fd5b815162ffffff8116811461196e57600080fd5b805161279381612554565b919050565b8051600281900b811461279357600080fd5b600080604083850312156127bd57600080fd5b82516127c881612554565b91506127d660208401612798565b90509250929050565b80516fffffffffffffffffffffffffffffffff8116811461279357600080fd5b60006020828403121561281157600080fd5b61196e826127df565b600060c0828403121561282c57600080fd5b60405160c0810181811067ffffffffffffffff82111715612876577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405261288283612798565b815261289060208401612798565b60208201526128a1604084016127df565b604082015260608301516060820152608083015160808201526128c660a08401612788565b60a08201529392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561290a5761290a6126af565b500290565b60008219821115612922576129226126af565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261298c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600073ffffffffffffffffffffffffffffffffffffffff838116908316818110156129be576129be6126af565b039392505050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008114156129fc576129fc6126af565b60000392915050565b60007f8000000000000000000000000000000000000000000000000000000000000000821415612a3757612a376126af565b506000039056fea2646970667358221220dee46c60e1dc64742e12e0a961a9cc07a5b544044e89c200f3e8b5845a0928c764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateExactInput(address[],address,uint256)": {
        "returns": {
          "amountOut": "the maximum output",
          "maximumAmountIn": "Maximum input that the path can handle",
          "overInput": "Check if more input has been given to receive the corresponding amountOut",
          "price": "    price after swapping"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateExactInput(address[],address,uint256)": {
        "notice": "Calculate the maximum output that can be received when swapped according to the given path."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/misc/safeSwap/SafeSwapHelper.sol:SafeSwapHelper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/misc/safeSwap/SafeSwapHelper.sol:SafeSwapHelper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 19669,
        "contract": "contracts/misc/safeSwap/SafeSwapHelper.sol:SafeSwapHelper",
        "label": "wETH",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}