{
  "address": "0x74Ff411329C2979176B005A3E3eb2C0602918da7",
  "abi": [
    {
      "inputs": [],
      "name": "NotAllowedToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "airdropList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "airdropPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropPoolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "airdropTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "depositKlay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "depositedAirdrop",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WKLAY",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "contract IMasterDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x81d6173c5b3d2fe861d2a8370304f4c0ac8e2f11fbe3e07969daa69bc77875b4",
  "receipt": {
    "to": null,
    "from": "0x2A2F23ff33671361010D357529BDF0adca9416Fc",
    "contractAddress": "0x74Ff411329C2979176B005A3E3eb2C0602918da7",
    "transactionIndex": 3,
    "gasUsed": "3550393",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5428023ad3797d3130844e32d38f618790d5672cafd174c47e68a81a5c02e0d8",
    "transactionHash": "0x81d6173c5b3d2fe861d2a8370304f4c0ac8e2f11fbe3e07969daa69bc77875b4",
    "logs": [],
    "blockNumber": 118663619,
    "cumulativeGasUsed": "3715908",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "d1ead588b6a95c1cfc045b4ed989707d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotAllowedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"airdropList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdropPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"airdropTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"depositKlay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"depositedAirdrop\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WKLAY\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"contract IMasterDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airdrop(address)\":{\"params\":{\"pool\":\"the address of pangea pool\"}},\"airdropList(address[])\":{\"params\":{\"pools\":\"list of the addresses of pangea pool\"}},\"depositKlay(address)\":{\"details\":\"transaction will revert if the asset in the pool is not WKLAY\",\"params\":{\"pool\":\"the address of pangea pool to deposit\"}},\"depositToken(address,address,uint128)\":{\"details\":\"Approval (token.approve(airdropDistributor, amount)) must be performed before transaction\",\"params\":{\"amount\":\"amount of token to deposit\",\"pool\":\"the address of pangea pool to deposit\",\"token\":\"token address to deposit. it must be one of the pools' tokens.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"airdrop(address)\":{\"notice\":\"airdrop the deposited assets of pool\"},\"airdropAll()\":{\"notice\":\"airdrop the deposited assets all on this epoch\"},\"airdropList(address[])\":{\"notice\":\"airdrop Batch Call\"},\"airdropPool(uint256)\":{\"notice\":\"the address of airdrop pool\"},\"airdropPoolLength()\":{\"notice\":\"Number of pools that have ever been deposited\"},\"airdropTokens(address)\":{\"notice\":\"list of tokens that can be airdropped to the given pool\"},\"depositKlay(address)\":{\"notice\":\"deposit klay to the pool. this klay will be distributed to the next epoch\"},\"depositToken(address,address,uint128)\":{\"notice\":\"deposit Token to the pool. this token will be distributed to the next epoch\"},\"depositedAirdrop(address)\":{\"notice\":\"airdrop information deposited in the pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/distribution/AirdropDistributorV2.sol\":\"AirdropDistributorV2\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/distribution/AirdropDistributorV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IMasterDeployer.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/LPAirdropCallee.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"../interfaces/IAirdropPool.sol\\\";\\nimport \\\"../interfaces/IAirdropDistributorV2.sol\\\";\\n\\n// @notice Airdrop Token distribution Contract for Liquidity Provider\\ncontract AirdropDistributorV2 is IAirdropDistributorV2, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    address internal wKLAY;\\n    IMasterDeployer public masterDeployer;\\n\\n    address[] public airdropPool;\\n    mapping(address => bool) private isAirdropPool;\\n\\n    mapping(address => mapping(address => uint128)) private depositAmount;\\n    mapping(address => uint256) private airdropStartTimePerPool;\\n\\n    uint256 public constant PERIOD = 1 weeks;\\n\\n    modifier NotPhased() {\\n        require(masterDeployer.airdropDistributor() == address(this), \\\"AirdropDistributor is phased\\\");\\n        _;\\n    }\\n\\n    function initialize(address _masterDeployer, address _WKLAY) external initializer {\\n        masterDeployer = IMasterDeployer(_masterDeployer);\\n        wKLAY = _WKLAY;\\n        __Ownable_init();\\n    }\\n\\n    function epochStartTime() public view returns (uint256) {\\n        return (block.timestamp / PERIOD) * PERIOD;\\n    }\\n\\n    function nextEpochStartTime() public view returns (uint256) {\\n        return epochStartTime() + PERIOD;\\n    }\\n\\n    /// @notice Number of pools that have ever been deposited\\n    function airdropPoolLength() external view returns (uint256) {\\n        return airdropPool.length;\\n    }\\n\\n    /// @notice list of tokens that can be airdropped to the given pool\\n    function airdropTokens(address pool) public view returns (address[] memory tokens) {\\n        address token0 = IConcentratedLiquidityPool(pool).token0();\\n        address token1 = IConcentratedLiquidityPool(pool).token1();\\n        if (_supportRewardToken(pool)) {\\n            tokens = new address[](3);\\n            tokens[0] = token0;\\n            tokens[1] = token1;\\n            tokens[2] = LPRewardCallee(pool).rewardToken();\\n        } else {\\n            tokens = new address[](2);\\n            tokens[0] = token0;\\n            tokens[1] = token1;\\n        }\\n    }\\n\\n    /// @notice airdrop information deposited in the pool\\n    function depositedAirdrop(address pool)\\n        external\\n        view\\n        returns (\\n            address[] memory tokens,\\n            uint256[] memory amounts,\\n            uint256 startTime\\n        )\\n    {\\n        tokens = airdropTokens(pool);\\n        amounts = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            amounts[i] = depositAmount[pool][tokens[i]];\\n        }\\n        startTime = airdropStartTimePerPool[pool];\\n    }\\n\\n    /// @notice deposit klay to the pool. this klay will be distributed to the next epoch\\n    /// @param pool the address of pangea pool to deposit\\n    /// @dev transaction will revert if the asset in the pool is not WKLAY\\n    function depositKlay(address pool) external payable NotPhased {\\n        address token = wKLAY;\\n        validateToDeposit(pool, token);\\n\\n        uint256 amount = msg.value;\\n        IWETH(token).deposit{value: amount}();\\n\\n        _deposit(pool, token, SafeCast.toUint128(amount));\\n    }\\n\\n    /// @notice deposit Token to the pool. this token will be distributed to the next epoch\\n    /// @param pool the address of pangea pool to deposit\\n    /// @param token token address to deposit. it must be one of the pools' tokens.\\n    /// @param amount amount of token to deposit\\n    /// @dev Approval (token.approve(airdropDistributor, amount)) must be performed before transaction\\n    function depositToken(\\n        address pool,\\n        address token,\\n        uint128 amount\\n    ) external NotPhased {\\n        validateToDeposit(pool, token);\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        _deposit(pool, token, amount);\\n    }\\n\\n    /// @notice airdrop the deposited assets of pool\\n    /// @param pool the address of pangea pool\\n    function airdrop(address pool) external NotPhased {\\n        if (airdropStartTimePerPool[pool] > epochStartTime()) revert NotYet();\\n\\n        _distribute(pool);\\n    }\\n\\n    /// @notice airdrop Batch Call\\n    /// @param pools list of the addresses of pangea pool\\n    function airdropList(address[] memory pools) external NotPhased {\\n        uint256 _epochStartTime = epochStartTime();\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address pool = pools[i];\\n\\n            if (airdropStartTimePerPool[pool] > _epochStartTime) continue;\\n            if ((IAirdropPool(pool).airdropStartTime() + IAirdropPool(pool).airdropPeriod()) > _epochStartTime) continue;\\n\\n            _distribute(pool);\\n        }\\n    }\\n\\n    /// @notice airdrop the deposited assets all on this epoch\\n    function airdropAll() external NotPhased {\\n        uint256 _epochStartTime = epochStartTime();\\n\\n        for (uint256 i = 0; i < airdropPool.length; i++) {\\n            address pool = airdropPool[i];\\n            if ((IAirdropPool(pool).airdropStartTime() + IAirdropPool(pool).airdropPeriod()) > _epochStartTime) {\\n                continue;\\n            }\\n\\n            if (airdropStartTimePerPool[pool] <= _epochStartTime) {\\n                _distribute(pool);\\n            }\\n        }\\n    }\\n\\n    function validateToDeposit(address pool, address token) internal {\\n        if (!(masterDeployer.pools(pool) && masterDeployer.whitelistedFactories(IConcentratedLiquidityPool(pool).factory())))\\n            revert NotExists();\\n        address[] memory tokens = airdropTokens(pool);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (token == tokens[i]) return;\\n        }\\n\\n        revert NotAllowedToken();\\n    }\\n\\n    function _deposit(\\n        address pool,\\n        address token,\\n        uint128 amount\\n    ) internal {\\n        if (airdropStartTimePerPool[pool] > 0 && airdropStartTimePerPool[pool] <= epochStartTime()) {\\n            // edge case\\n            // If the previously deposited assets have not been distributed, distribute them first and deposit.\\n            _distribute(pool);\\n        }\\n\\n        if (!isAirdropPool[pool]) {\\n            isAirdropPool[pool] = true;\\n            airdropPool.push(pool);\\n        }\\n\\n        depositAmount[pool][token] += amount;\\n        airdropStartTimePerPool[pool] = nextEpochStartTime();\\n\\n        emit Deposit(pool, token, amount, msg.sender);\\n    }\\n\\n    function _supportRewardToken(address pool) internal view returns (bool ok) {\\n        try LPRewardCallee(pool).rewardToken() returns (address) {\\n            ok = true;\\n        } catch {\\n            ok = false;\\n        }\\n        return ok;\\n    }\\n\\n    function _distribute(address pool) internal {\\n        if (_supportRewardToken(pool)) {\\n            _airdropWithRewardToken(pool);\\n        } else {\\n            _airdrop(pool);\\n        }\\n    }\\n\\n    function _airdrop(address pool) internal {\\n        address token0 = IConcentratedLiquidityPool(pool).token0();\\n        address token1 = IConcentratedLiquidityPool(pool).token1();\\n\\n        uint256 startTime = epochStartTime();\\n        uint256 period = PERIOD;\\n\\n        uint128 airdrop0 = _loadAirdropAmount(pool, token0, startTime, period);\\n        uint128 airdrop1 = _loadAirdropAmount(pool, token1, startTime, period);\\n\\n        airdropStartTimePerPool[pool] = 0;\\n\\n        LPAirdropCallee(pool).depositAirdrop(airdrop0, airdrop1, startTime, period);\\n    }\\n\\n    function _airdropWithRewardToken(address pool) internal {\\n        address token0 = IConcentratedLiquidityPool(pool).token0();\\n        address token1 = IConcentratedLiquidityPool(pool).token1();\\n        address rewardToken = LPRewardCallee(pool).rewardToken();\\n\\n        uint256 startTime = epochStartTime();\\n        uint256 period = PERIOD;\\n\\n        uint128 airdrop0 = _loadAirdropAmount(pool, token0, startTime, period);\\n        uint128 airdrop1 = _loadAirdropAmount(pool, token1, startTime, period);\\n        uint128 reward = _loadAirdropAmount(pool, rewardToken, startTime, period);\\n\\n        airdropStartTimePerPool[pool] = 0;\\n\\n        LPRewardCallee(pool).depositAirdropAndReward(airdrop0, airdrop1, reward, startTime, period);\\n    }\\n\\n    function _loadAirdropAmount(\\n        address pool,\\n        address token,\\n        uint256 startTime,\\n        uint256 period\\n    ) internal returns (uint128 amount) {\\n        amount = depositAmount[pool][token];\\n        if (amount == 0) return amount;\\n\\n        depositAmount[pool][token] = 0;\\n        IERC20(token).approve(pool, amount);\\n        emit Airdrop(pool, token, amount, startTime, period);\\n    }\\n}\\n\",\"keccak256\":\"0xdeec82b5ee5bbdd05dc28474a2e6d774bc628cc750e4adb3d169c31d6ba37b6b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAirdropDistributorV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IAirdropDistributorV2Event {\\n    event Deposit(address indexed pool, address token, uint256 amount, address depositor);\\n\\n    event Airdrop(address indexed pool, address token, uint128 amount, uint256 startTime, uint256 period);\\n}\\n\\ninterface IAirdropDistributorV2Error {\\n    error NotExists();\\n\\n    error NotAllowedToken();\\n\\n    error NotYet();\\n}\\n\\ninterface IAirdropDistributorV2 is IAirdropDistributorV2Event, IAirdropDistributorV2Error {\\n    /// @notice Number of pools that have ever been deposited\\n    function airdropPoolLength() external view returns (uint256);\\n\\n    /// @notice the address of airdrop pool\\n    function airdropPool(uint256 idx) external view returns (address);\\n\\n    /// @notice current deposited airdrop information in the pool.\\n    function depositedAirdrop(address pool)\\n        external\\n        view\\n        returns (\\n            address[] memory tokens,\\n            uint256[] memory amounts,\\n            uint256 startTime\\n        );\\n\\n    /// @notice deposit klay to the pool. klay will be distributed to the next epoch\\n    /// @param pool the address of pangea pool to deposit\\n    /// @dev transaction will revert if the asset in the pool is not WKLAY\\n    function depositKlay(address pool) external payable;\\n\\n    /// @notice deposit token to the pool. the token will be distributed to the next epoch\\n    /// @param pool the address of pangea pool to deposit\\n    /// @param token token address to deposit. it must be one of the pools' tokens.\\n    /// @param amount amount of token to deposit\\n    /// @dev Approval (token.approve(airdropDistributor, amount)) must be performed before transaction\\n    function depositToken(\\n        address pool,\\n        address token,\\n        uint128 amount\\n    ) external;\\n\\n    /// @notice airdrop the deposited assets of pool\\n    /// @param pool the address of pangea pool\\n    function airdrop(address pool) external;\\n\\n    /// @notice airdrop Batch Call\\n    /// @param pools list of the addresses of pangea pool\\n    function airdropList(address[] memory pools) external;\\n}\\n\",\"keccak256\":\"0x6218b71ea904cb28ee4fab1ce7239297c6728aa549e620fd40aa1498ac339bad\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAirdropPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IAirdropPool {\\n    function airdrop0PerSecond() external returns (uint256);\\n\\n    function airdrop1PerSecond() external returns (uint256);\\n\\n    function airdropStartTime() external returns (uint256);\\n\\n    function airdropPeriod() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x127717e4d8bd1b38c674e91f5a36d0b2d576e1f2d96eac28e92ddd40c74dade6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice do not use this. it can be easily corrupted\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0xd50187378c243a9523c29c977d6680e377bbc48f801bdc3c5b1eff8db5eee074\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool deployer interface.\\ninterface IMasterDeployer {\\n    // ============ EVENTS ================\\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\\n    event AddToWhitelistFactory(address indexed factory);\\n    event RemoveFromWhitelistFactory(address indexed factory);\\n    event ProtocolFeeToUpdated(address protocolFeeTo);\\n\\n    /// @notice create pool through factory\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n\\n    /// @notice Return the address receiving protocol fees from Pool\\n    function protocolFeeTo() external view returns (address);\\n\\n    /// @notice Return whether the pool was deployed via a deployer\\n    function pools(address pool) external view returns (bool);\\n\\n    /// @notice LP Airdrop Distributor address\\n    function airdropDistributor() external returns (address);\\n\\n    /// @notice Return the number of pools deployed from masterDeployer\\n    function totalPoolsCount() external view returns (uint256 total);\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool);\\n\\n    /// @notice Return the address of Factory deployed pool\\n    function getFactoryAddress(address pool) external view returns (address factory);\\n\\n    function whitelistedFactories(address factory) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x170cfac475208be75112407e91f8c3fa1293aa2fd03bea65f0be033cacef6633\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function depositTo(address to) external payable;\\n\\n    function withdrawTo(address payable to, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x3df7d2d850b39e7532c1370d414ba6f225a07fa3d176cafcdb70f330e15a1c1b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/LPAirdropCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n// @notice It's for ConcentratedLiquidityPool. supports only tokens of pool\\ninterface LPAirdropCallee {\\n    function depositAirdrop(\\n        uint128 airdrop0,\\n        uint128 airdrop1,\\n        uint256 startTime,\\n        uint256 period\\n    ) external;\\n}\\n\\n// @notice It's for MiningPool & YieldPool. supports tokens of pool and reward Token\\ninterface LPRewardCallee {\\n    function rewardToken() external view returns (address);\\n\\n    function depositAirdropAndReward(\\n        uint128 airdrop0,\\n        uint128 airdrop1,\\n        uint128 reward,\\n        uint256 startTime,\\n        uint256 period\\n    ) external;\\n}\\n\",\"keccak256\":\"0x41a37ae05eaf0c044db1f4a64f4a2ecd3e56ec1e9243e5d228e5a994cbc09544\",\"license\":\"GPL-3.0\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary SafeCast {\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        require((z = uint128(y)) == y);\\n    }\\n\\n    function toInt128(uint256 y) internal pure returns (int128 z) {\\n        require(y <= 2**127 - 1);\\n        return int128(int256(y));\\n    }\\n}\\n\",\"keccak256\":\"0x26f130f9e37749f36d7c61bb818227d0ef4e089695be0009e9b626e63c7753c3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612d77806100206000396000f3fe60806040526004361061010e5760003560e01c8063715018a6116100a5578063b4d1d79511610074578063f2fde38b11610059578063f2fde38b146102fb578063f50065631461031b578063f60ca6411461033b57600080fd5b8063b4d1d795146102b7578063cf58879a146102ce57600080fd5b8063715018a6146102215780638da5cb5b146102365780639be3476d14610282578063b15e44c21461029757600080fd5b806327938bb4116100e157806327938bb41461019d578063485cc955146101bd57806349cee5d5146101dd578063660c50751461020c57600080fd5b806301d5c7b91461011357806306ea459214610128578063136d835d1461015057806321860a051461017d575b600080fd5b610126610121366004612850565b610350565b005b34801561013457600080fd5b5061013d610517565b6040519081526020015b60405180910390f35b34801561015c57600080fd5b5061017061016b366004612850565b610534565b60405161014791906128be565b34801561018957600080fd5b50610126610198366004612850565b610899565b3480156101a957600080fd5b506101266101b8366004612900565b610a2c565b3480156101c957600080fd5b506101266101d83660046129e3565b610d04565b3480156101e957600080fd5b506101fd6101f8366004612850565b610e7e565b60405161014793929190612a1c565b34801561021857600080fd5b50610126610fe9565b34801561022d57600080fd5b506101266112c9565b34801561024257600080fd5b5060335473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610147565b34801561028e57600080fd5b5060675461013d565b3480156102a357600080fd5b5061025d6102b2366004612a7c565b611356565b3480156102c357600080fd5b5061013d62093a8081565b3480156102da57600080fd5b5060665461025d9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561030757600080fd5b50610126610316366004612850565b61138d565b34801561032757600080fd5b50610126610336366004612a95565b6114ba565b34801561034757600080fd5b5061013d611624565b606654604080517fd0a931730000000000000000000000000000000000000000000000000000000081529051309273ffffffffffffffffffffffffffffffffffffffff169163d0a931739160048083019260209291908290030181600087803b1580156103bc57600080fd5b505af11580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190612af5565b73ffffffffffffffffffffffffffffffffffffffff1614610476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f41697264726f704469737472696275746f72206973207068617365640000000060448201526064015b60405180910390fd5b60655473ffffffffffffffffffffffffffffffffffffffff16610499828261163e565b60003490508173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104e657600080fd5b505af11580156104fa573d6000803e3d6000fd5b5050505050610512838361050d84611927565b61194b565b505050565b600062093a80610525611624565b61052f9190612b41565b905090565b606060008273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561057e57600080fd5b505afa158015610592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b69190612af5565b905060008373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190612af5565b905061064384611ba8565b156107d557604080516003808252608082019092529060208201606080368337019050509250818360008151811061067d5761067d612b59565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080836001815181106106cb576106cb612b59565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561074b57600080fd5b505afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107839190612af5565b8360028151811061079657610796612b59565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610892565b6040805160028082526060820183529091602083019080368337019050509250818360008151811061080957610809612b59565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808360018151811061085757610857612b59565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b5050919050565b606654604080517fd0a931730000000000000000000000000000000000000000000000000000000081529051309273ffffffffffffffffffffffffffffffffffffffff169163d0a931739160048083019260209291908290030181600087803b15801561090557600080fd5b505af1158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190612af5565b73ffffffffffffffffffffffffffffffffffffffff16146109ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f41697264726f704469737472696275746f722069732070686173656400000000604482015260640161046d565b6109c2611624565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606a60205260409020541115610a20576040517f0d3f777600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a2981611c53565b50565b606654604080517fd0a931730000000000000000000000000000000000000000000000000000000081529051309273ffffffffffffffffffffffffffffffffffffffff169163d0a931739160048083019260209291908290030181600087803b158015610a9857600080fd5b505af1158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190612af5565b73ffffffffffffffffffffffffffffffffffffffff1614610b4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f41697264726f704469737472696275746f722069732070686173656400000000604482015260640161046d565b6000610b57611624565b905060005b8251811015610512576000838281518110610b7957610b79612b59565b6020026020010151905082606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610bd05750610cf2565b828173ffffffffffffffffffffffffffffffffffffffff1663956afe456040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c519190612b88565b8273ffffffffffffffffffffffffffffffffffffffff166340306fb66040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c9957600080fd5b505af1158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190612b88565b610cdb9190612b41565b1115610ce75750610cf2565b610cf081611c53565b505b80610cfc81612ba1565b915050610b5c565b600054610100900460ff16610d1f5760005460ff1615610d23565b303b155b610daf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161046d565b600054610100900460ff16158015610dee57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6066805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556065805492851692909116919091179055610e4b611c73565b801561051257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b6060806000610e8c84610534565b9250825167ffffffffffffffff811115610ea857610ea86128d1565b604051908082528060200260200182016040528015610ed1578160200160208202803683370190505b50915060005b8251811015610fbc5773ffffffffffffffffffffffffffffffffffffffff851660009081526069602052604081208551909190869084908110610f1c57610f1c612b59565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16838281518110610f9f57610f9f612b59565b602090810291909101015280610fb481612ba1565b915050610ed7565b505073ffffffffffffffffffffffffffffffffffffffff9092166000908152606a60205260409020549092565b606654604080517fd0a931730000000000000000000000000000000000000000000000000000000081529051309273ffffffffffffffffffffffffffffffffffffffff169163d0a931739160048083019260209291908290030181600087803b15801561105557600080fd5b505af1158015611069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108d9190612af5565b73ffffffffffffffffffffffffffffffffffffffff161461110a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f41697264726f704469737472696275746f722069732070686173656400000000604482015260640161046d565b6000611114611624565b905060005b6067548110156112c55760006067828154811061113857611138612b59565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828173ffffffffffffffffffffffffffffffffffffffff1663956afe456040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156111ae57600080fd5b505af11580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e69190612b88565b8273ffffffffffffffffffffffffffffffffffffffff166340306fb66040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561122e57600080fd5b505af1158015611242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112669190612b88565b6112709190612b41565b111561127c57506112b3565b73ffffffffffffffffffffffffffffffffffffffff81166000908152606a602052604090205483106112b1576112b181611c53565b505b806112bd81612ba1565b915050611119565b5050565b60335473ffffffffffffffffffffffffffffffffffffffff16331461134a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b6113546000611d12565b565b6067818154811061136657600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60335473ffffffffffffffffffffffffffffffffffffffff16331461140e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b73ffffffffffffffffffffffffffffffffffffffff81166114b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161046d565b610a2981611d12565b606654604080517fd0a931730000000000000000000000000000000000000000000000000000000081529051309273ffffffffffffffffffffffffffffffffffffffff169163d0a931739160048083019260209291908290030181600087803b15801561152657600080fd5b505af115801561153a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155e9190612af5565b73ffffffffffffffffffffffffffffffffffffffff16146115db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f41697264726f704469737472696275746f722069732070686173656400000000604482015260640161046d565b6115e5838361163e565b61161973ffffffffffffffffffffffffffffffffffffffff831633306fffffffffffffffffffffffffffffffff8516611d89565b61051283838361194b565b600062093a806116348142612bda565b61052f9190612c15565b6066546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063a4063dbc9060240160206040518083038186803b1580156116a957600080fd5b505afa1580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e19190612c52565b80156118405750606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f50f2f48373ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561176c57600080fd5b505afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190612af5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186803b15801561180857600080fd5b505afa15801561181c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118409190612c52565b611876576040517f5861b41d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061188183610534565b905060005b81518110156118f4578181815181106118a1576118a1612b59565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118e25750505050565b806118ec81612ba1565b915050611886565b506040517fe1478bb000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806fffffffffffffffffffffffffffffffff8116811461194657600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152606a6020526040902054158015906119ab5750611982611624565b73ffffffffffffffffffffffffffffffffffffffff84166000908152606a602052604090205411155b156119b9576119b983611c53565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604090205460ff16611a8f5773ffffffffffffffffffffffffffffffffffffffff8316600081815260686020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556067805491820181559091527f9787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b73ffffffffffffffffffffffffffffffffffffffff808416600090815260696020908152604080832093861683529290529081208054839290611ae59084906fffffffffffffffffffffffffffffffff16612c74565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550611b23610517565b73ffffffffffffffffffffffffffffffffffffffff8481166000818152606a602090815260409182902094909455805192861683526fffffffffffffffffffffffffffffffff851693830193909352338284015291517f364bb76a44233df8584c690de6da7810626a5e77192f3ebc942c35bcb1add24f9181900360600190a2505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611bf057600080fd5b505afa925050508015611c3e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611c3b91810190612af5565b60015b611c4a57506000919050565b50600192915050565b611c5c81611ba8565b15611c6a57610a2981611e24565b610a29816120b6565b600054610100900460ff16611d0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161046d565b6113546122ac565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611e1e90859061234c565b50505050565b60008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6c57600080fd5b505afa158015611e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea49190612af5565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611eee57600080fd5b505afa158015611f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f269190612af5565b905060008373ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7057600080fd5b505afa158015611f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa89190612af5565b90506000611fb4611624565b905062093a806000611fc887878585612458565b90506000611fd888878686612458565b90506000611fe889878787612458565b73ffffffffffffffffffffffffffffffffffffffff8a166000818152606a602052604080822091909155517fcf5431530000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff808716600483015280861660248301528316604482015260648101889052608481018790529192509063cf5431539060a401600060405180830381600087803b15801561209357600080fd5b505af11580156120a7573d6000803e3d6000fd5b50505050505050505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156120fe57600080fd5b505afa158015612112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121369190612af5565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561218057600080fd5b505afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612af5565b905060006121c4611624565b905062093a8060006121d886868585612458565b905060006121e887868686612458565b73ffffffffffffffffffffffffffffffffffffffff88166000818152606a602052604080822091909155517f9a2f9ccc0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff808616600483015283166024820152604481018790526064810186905291925090639a2f9ccc90608401600060405180830381600087803b15801561228b57600080fd5b505af115801561229f573d6000803e3d6000fd5b5050505050505050505050565b600054610100900460ff16612343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161046d565b61135433611d12565b60006123ae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166126219092919063ffffffff16565b80519091501561051257808060200190518101906123cc9190612c52565b610512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161046d565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152606960209081526040808320938716835292905220546fffffffffffffffffffffffffffffffff16806124a757612619565b73ffffffffffffffffffffffffffffffffffffffff8581166000818152606960209081526040808320948916808452949091529081902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055517f095ea7b300000000000000000000000000000000000000000000000000000000815260048101919091526fffffffffffffffffffffffffffffffff8316602482015263095ea7b390604401602060405180830381600087803b15801561256b57600080fd5b505af115801561257f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a39190612c52565b506040805173ffffffffffffffffffffffffffffffffffffffff86811682526fffffffffffffffffffffffffffffffff8416602083015291810185905260608101849052908616907fe58f5d1b481275eaa5671ecc0c4d371a6be6e01731a7ebdad8c6a5f7c8a815a99060800160405180910390a25b949350505050565b6060612630848460008561263a565b90505b9392505050565b6060824710156126cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161046d565b73ffffffffffffffffffffffffffffffffffffffff85163b61274a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046d565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516127739190612cd4565b60006040518083038185875af1925050503d80600081146127b0576040519150601f19603f3d011682016040523d82523d6000602084013e6127b5565b606091505b50915091506127c58282866127d0565b979650505050505050565b606083156127df575081612633565b8251156127ef5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046d9190612cf0565b73ffffffffffffffffffffffffffffffffffffffff81168114610a2957600080fd5b803561194681612823565b60006020828403121561286257600080fd5b813561263381612823565b600081518084526020808501945080840160005b838110156128b357815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612881565b509495945050505050565b602081526000612633602083018461286d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561291357600080fd5b823567ffffffffffffffff8082111561292b57600080fd5b818501915085601f83011261293f57600080fd5b813581811115612951576129516128d1565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715612994576129946128d1565b6040529182528482019250838101850191888311156129b257600080fd5b938501935b828510156129d7576129c885612845565b845293850193928501926129b7565b98975050505050505050565b600080604083850312156129f657600080fd5b8235612a0181612823565b91506020830135612a1181612823565b809150509250929050565b606081526000612a2f606083018661286d565b82810360208481019190915285518083528682019282019060005b81811015612a6657845183529383019391830191600101612a4a565b5050809350505050826040830152949350505050565b600060208284031215612a8e57600080fd5b5035919050565b600080600060608486031215612aaa57600080fd5b8335612ab581612823565b92506020840135612ac581612823565b915060408401356fffffffffffffffffffffffffffffffff81168114612aea57600080fd5b809150509250925092565b600060208284031215612b0757600080fd5b815161263381612823565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612b5457612b54612b12565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612b9a57600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612bd357612bd3612b12565b5060010190565b600082612c10577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c4d57612c4d612b12565b500290565b600060208284031215612c6457600080fd5b8151801515811461263357600080fd5b60006fffffffffffffffffffffffffffffffff808316818516808303821115612c9f57612c9f612b12565b01949350505050565b60005b83811015612cc3578181015183820152602001612cab565b83811115611e1e5750506000910152565b60008251612ce6818460208701612ca8565b9190910192915050565b6020815260008251806020840152612d0f816040850160208701612ca8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220b3e4d2ff6b22c400d1f596309083fedd72602bb62e9f5eea35da7d8e128af42b64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061010e5760003560e01c8063715018a6116100a5578063b4d1d79511610074578063f2fde38b11610059578063f2fde38b146102fb578063f50065631461031b578063f60ca6411461033b57600080fd5b8063b4d1d795146102b7578063cf58879a146102ce57600080fd5b8063715018a6146102215780638da5cb5b146102365780639be3476d14610282578063b15e44c21461029757600080fd5b806327938bb4116100e157806327938bb41461019d578063485cc955146101bd57806349cee5d5146101dd578063660c50751461020c57600080fd5b806301d5c7b91461011357806306ea459214610128578063136d835d1461015057806321860a051461017d575b600080fd5b610126610121366004612850565b610350565b005b34801561013457600080fd5b5061013d610517565b6040519081526020015b60405180910390f35b34801561015c57600080fd5b5061017061016b366004612850565b610534565b60405161014791906128be565b34801561018957600080fd5b50610126610198366004612850565b610899565b3480156101a957600080fd5b506101266101b8366004612900565b610a2c565b3480156101c957600080fd5b506101266101d83660046129e3565b610d04565b3480156101e957600080fd5b506101fd6101f8366004612850565b610e7e565b60405161014793929190612a1c565b34801561021857600080fd5b50610126610fe9565b34801561022d57600080fd5b506101266112c9565b34801561024257600080fd5b5060335473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610147565b34801561028e57600080fd5b5060675461013d565b3480156102a357600080fd5b5061025d6102b2366004612a7c565b611356565b3480156102c357600080fd5b5061013d62093a8081565b3480156102da57600080fd5b5060665461025d9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561030757600080fd5b50610126610316366004612850565b61138d565b34801561032757600080fd5b50610126610336366004612a95565b6114ba565b34801561034757600080fd5b5061013d611624565b606654604080517fd0a931730000000000000000000000000000000000000000000000000000000081529051309273ffffffffffffffffffffffffffffffffffffffff169163d0a931739160048083019260209291908290030181600087803b1580156103bc57600080fd5b505af11580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190612af5565b73ffffffffffffffffffffffffffffffffffffffff1614610476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f41697264726f704469737472696275746f72206973207068617365640000000060448201526064015b60405180910390fd5b60655473ffffffffffffffffffffffffffffffffffffffff16610499828261163e565b60003490508173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104e657600080fd5b505af11580156104fa573d6000803e3d6000fd5b5050505050610512838361050d84611927565b61194b565b505050565b600062093a80610525611624565b61052f9190612b41565b905090565b606060008273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561057e57600080fd5b505afa158015610592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b69190612af5565b905060008373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190612af5565b905061064384611ba8565b156107d557604080516003808252608082019092529060208201606080368337019050509250818360008151811061067d5761067d612b59565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080836001815181106106cb576106cb612b59565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561074b57600080fd5b505afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107839190612af5565b8360028151811061079657610796612b59565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610892565b6040805160028082526060820183529091602083019080368337019050509250818360008151811061080957610809612b59565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808360018151811061085757610857612b59565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b5050919050565b606654604080517fd0a931730000000000000000000000000000000000000000000000000000000081529051309273ffffffffffffffffffffffffffffffffffffffff169163d0a931739160048083019260209291908290030181600087803b15801561090557600080fd5b505af1158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190612af5565b73ffffffffffffffffffffffffffffffffffffffff16146109ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f41697264726f704469737472696275746f722069732070686173656400000000604482015260640161046d565b6109c2611624565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606a60205260409020541115610a20576040517f0d3f777600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a2981611c53565b50565b606654604080517fd0a931730000000000000000000000000000000000000000000000000000000081529051309273ffffffffffffffffffffffffffffffffffffffff169163d0a931739160048083019260209291908290030181600087803b158015610a9857600080fd5b505af1158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190612af5565b73ffffffffffffffffffffffffffffffffffffffff1614610b4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f41697264726f704469737472696275746f722069732070686173656400000000604482015260640161046d565b6000610b57611624565b905060005b8251811015610512576000838281518110610b7957610b79612b59565b6020026020010151905082606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610bd05750610cf2565b828173ffffffffffffffffffffffffffffffffffffffff1663956afe456040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c519190612b88565b8273ffffffffffffffffffffffffffffffffffffffff166340306fb66040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c9957600080fd5b505af1158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190612b88565b610cdb9190612b41565b1115610ce75750610cf2565b610cf081611c53565b505b80610cfc81612ba1565b915050610b5c565b600054610100900460ff16610d1f5760005460ff1615610d23565b303b155b610daf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161046d565b600054610100900460ff16158015610dee57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6066805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556065805492851692909116919091179055610e4b611c73565b801561051257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b6060806000610e8c84610534565b9250825167ffffffffffffffff811115610ea857610ea86128d1565b604051908082528060200260200182016040528015610ed1578160200160208202803683370190505b50915060005b8251811015610fbc5773ffffffffffffffffffffffffffffffffffffffff851660009081526069602052604081208551909190869084908110610f1c57610f1c612b59565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16838281518110610f9f57610f9f612b59565b602090810291909101015280610fb481612ba1565b915050610ed7565b505073ffffffffffffffffffffffffffffffffffffffff9092166000908152606a60205260409020549092565b606654604080517fd0a931730000000000000000000000000000000000000000000000000000000081529051309273ffffffffffffffffffffffffffffffffffffffff169163d0a931739160048083019260209291908290030181600087803b15801561105557600080fd5b505af1158015611069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108d9190612af5565b73ffffffffffffffffffffffffffffffffffffffff161461110a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f41697264726f704469737472696275746f722069732070686173656400000000604482015260640161046d565b6000611114611624565b905060005b6067548110156112c55760006067828154811061113857611138612b59565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828173ffffffffffffffffffffffffffffffffffffffff1663956afe456040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156111ae57600080fd5b505af11580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e69190612b88565b8273ffffffffffffffffffffffffffffffffffffffff166340306fb66040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561122e57600080fd5b505af1158015611242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112669190612b88565b6112709190612b41565b111561127c57506112b3565b73ffffffffffffffffffffffffffffffffffffffff81166000908152606a602052604090205483106112b1576112b181611c53565b505b806112bd81612ba1565b915050611119565b5050565b60335473ffffffffffffffffffffffffffffffffffffffff16331461134a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b6113546000611d12565b565b6067818154811061136657600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60335473ffffffffffffffffffffffffffffffffffffffff16331461140e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b73ffffffffffffffffffffffffffffffffffffffff81166114b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161046d565b610a2981611d12565b606654604080517fd0a931730000000000000000000000000000000000000000000000000000000081529051309273ffffffffffffffffffffffffffffffffffffffff169163d0a931739160048083019260209291908290030181600087803b15801561152657600080fd5b505af115801561153a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155e9190612af5565b73ffffffffffffffffffffffffffffffffffffffff16146115db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f41697264726f704469737472696275746f722069732070686173656400000000604482015260640161046d565b6115e5838361163e565b61161973ffffffffffffffffffffffffffffffffffffffff831633306fffffffffffffffffffffffffffffffff8516611d89565b61051283838361194b565b600062093a806116348142612bda565b61052f9190612c15565b6066546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063a4063dbc9060240160206040518083038186803b1580156116a957600080fd5b505afa1580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e19190612c52565b80156118405750606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f50f2f48373ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561176c57600080fd5b505afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190612af5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186803b15801561180857600080fd5b505afa15801561181c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118409190612c52565b611876576040517f5861b41d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061188183610534565b905060005b81518110156118f4578181815181106118a1576118a1612b59565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118e25750505050565b806118ec81612ba1565b915050611886565b506040517fe1478bb000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806fffffffffffffffffffffffffffffffff8116811461194657600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152606a6020526040902054158015906119ab5750611982611624565b73ffffffffffffffffffffffffffffffffffffffff84166000908152606a602052604090205411155b156119b9576119b983611c53565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604090205460ff16611a8f5773ffffffffffffffffffffffffffffffffffffffff8316600081815260686020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556067805491820181559091527f9787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b73ffffffffffffffffffffffffffffffffffffffff808416600090815260696020908152604080832093861683529290529081208054839290611ae59084906fffffffffffffffffffffffffffffffff16612c74565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550611b23610517565b73ffffffffffffffffffffffffffffffffffffffff8481166000818152606a602090815260409182902094909455805192861683526fffffffffffffffffffffffffffffffff851693830193909352338284015291517f364bb76a44233df8584c690de6da7810626a5e77192f3ebc942c35bcb1add24f9181900360600190a2505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611bf057600080fd5b505afa925050508015611c3e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611c3b91810190612af5565b60015b611c4a57506000919050565b50600192915050565b611c5c81611ba8565b15611c6a57610a2981611e24565b610a29816120b6565b600054610100900460ff16611d0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161046d565b6113546122ac565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611e1e90859061234c565b50505050565b60008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6c57600080fd5b505afa158015611e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea49190612af5565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611eee57600080fd5b505afa158015611f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f269190612af5565b905060008373ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7057600080fd5b505afa158015611f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa89190612af5565b90506000611fb4611624565b905062093a806000611fc887878585612458565b90506000611fd888878686612458565b90506000611fe889878787612458565b73ffffffffffffffffffffffffffffffffffffffff8a166000818152606a602052604080822091909155517fcf5431530000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff808716600483015280861660248301528316604482015260648101889052608481018790529192509063cf5431539060a401600060405180830381600087803b15801561209357600080fd5b505af11580156120a7573d6000803e3d6000fd5b50505050505050505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156120fe57600080fd5b505afa158015612112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121369190612af5565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561218057600080fd5b505afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612af5565b905060006121c4611624565b905062093a8060006121d886868585612458565b905060006121e887868686612458565b73ffffffffffffffffffffffffffffffffffffffff88166000818152606a602052604080822091909155517f9a2f9ccc0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff808616600483015283166024820152604481018790526064810186905291925090639a2f9ccc90608401600060405180830381600087803b15801561228b57600080fd5b505af115801561229f573d6000803e3d6000fd5b5050505050505050505050565b600054610100900460ff16612343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161046d565b61135433611d12565b60006123ae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166126219092919063ffffffff16565b80519091501561051257808060200190518101906123cc9190612c52565b610512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161046d565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152606960209081526040808320938716835292905220546fffffffffffffffffffffffffffffffff16806124a757612619565b73ffffffffffffffffffffffffffffffffffffffff8581166000818152606960209081526040808320948916808452949091529081902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055517f095ea7b300000000000000000000000000000000000000000000000000000000815260048101919091526fffffffffffffffffffffffffffffffff8316602482015263095ea7b390604401602060405180830381600087803b15801561256b57600080fd5b505af115801561257f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a39190612c52565b506040805173ffffffffffffffffffffffffffffffffffffffff86811682526fffffffffffffffffffffffffffffffff8416602083015291810185905260608101849052908616907fe58f5d1b481275eaa5671ecc0c4d371a6be6e01731a7ebdad8c6a5f7c8a815a99060800160405180910390a25b949350505050565b6060612630848460008561263a565b90505b9392505050565b6060824710156126cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161046d565b73ffffffffffffffffffffffffffffffffffffffff85163b61274a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046d565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516127739190612cd4565b60006040518083038185875af1925050503d80600081146127b0576040519150601f19603f3d011682016040523d82523d6000602084013e6127b5565b606091505b50915091506127c58282866127d0565b979650505050505050565b606083156127df575081612633565b8251156127ef5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046d9190612cf0565b73ffffffffffffffffffffffffffffffffffffffff81168114610a2957600080fd5b803561194681612823565b60006020828403121561286257600080fd5b813561263381612823565b600081518084526020808501945080840160005b838110156128b357815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612881565b509495945050505050565b602081526000612633602083018461286d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561291357600080fd5b823567ffffffffffffffff8082111561292b57600080fd5b818501915085601f83011261293f57600080fd5b813581811115612951576129516128d1565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715612994576129946128d1565b6040529182528482019250838101850191888311156129b257600080fd5b938501935b828510156129d7576129c885612845565b845293850193928501926129b7565b98975050505050505050565b600080604083850312156129f657600080fd5b8235612a0181612823565b91506020830135612a1181612823565b809150509250929050565b606081526000612a2f606083018661286d565b82810360208481019190915285518083528682019282019060005b81811015612a6657845183529383019391830191600101612a4a565b5050809350505050826040830152949350505050565b600060208284031215612a8e57600080fd5b5035919050565b600080600060608486031215612aaa57600080fd5b8335612ab581612823565b92506020840135612ac581612823565b915060408401356fffffffffffffffffffffffffffffffff81168114612aea57600080fd5b809150509250925092565b600060208284031215612b0757600080fd5b815161263381612823565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612b5457612b54612b12565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612b9a57600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612bd357612bd3612b12565b5060010190565b600082612c10577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c4d57612c4d612b12565b500290565b600060208284031215612c6457600080fd5b8151801515811461263357600080fd5b60006fffffffffffffffffffffffffffffffff808316818516808303821115612c9f57612c9f612b12565b01949350505050565b60005b83811015612cc3578181015183820152602001612cab565b83811115611e1e5750506000910152565b60008251612ce6818460208701612ca8565b9190910192915050565b6020815260008251806020840152612d0f816040850160208701612ca8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220b3e4d2ff6b22c400d1f596309083fedd72602bb62e9f5eea35da7d8e128af42b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airdrop(address)": {
        "params": {
          "pool": "the address of pangea pool"
        }
      },
      "airdropList(address[])": {
        "params": {
          "pools": "list of the addresses of pangea pool"
        }
      },
      "depositKlay(address)": {
        "details": "transaction will revert if the asset in the pool is not WKLAY",
        "params": {
          "pool": "the address of pangea pool to deposit"
        }
      },
      "depositToken(address,address,uint128)": {
        "details": "Approval (token.approve(airdropDistributor, amount)) must be performed before transaction",
        "params": {
          "amount": "amount of token to deposit",
          "pool": "the address of pangea pool to deposit",
          "token": "token address to deposit. it must be one of the pools' tokens."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "airdrop(address)": {
        "notice": "airdrop the deposited assets of pool"
      },
      "airdropAll()": {
        "notice": "airdrop the deposited assets all on this epoch"
      },
      "airdropList(address[])": {
        "notice": "airdrop Batch Call"
      },
      "airdropPool(uint256)": {
        "notice": "the address of airdrop pool"
      },
      "airdropPoolLength()": {
        "notice": "Number of pools that have ever been deposited"
      },
      "airdropTokens(address)": {
        "notice": "list of tokens that can be airdropped to the given pool"
      },
      "depositKlay(address)": {
        "notice": "deposit klay to the pool. this klay will be distributed to the next epoch"
      },
      "depositToken(address,address,uint128)": {
        "notice": "deposit Token to the pool. this token will be distributed to the next epoch"
      },
      "depositedAirdrop(address)": {
        "notice": "airdrop information deposited in the pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1981,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11176,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "wKLAY",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 11179,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "masterDeployer",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IMasterDeployer)13285"
      },
      {
        "astId": 11182,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "airdropPool",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11186,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "isAirdropPool",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11192,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "depositAmount",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint128))"
      },
      {
        "astId": 11196,
        "contract": "contracts/distribution/AirdropDistributorV2.sol:AirdropDistributorV2",
        "label": "airdropStartTimePerPool",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMasterDeployer)13285": {
        "encoding": "inplace",
        "label": "contract IMasterDeployer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint128))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint128)"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}