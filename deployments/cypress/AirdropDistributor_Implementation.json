{
  "address": "0x842c3839F7E0D26fAc482064D38b5487bd078f11",
  "abi": [
    {
      "inputs": [],
      "name": "NotExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLPAirdropDistributor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPoolToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount0",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount1",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "Airdrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "airdropList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "airdropPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropPoolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "airdropSnapshot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAirdropDistributorStruct.AirdropInfo",
          "name": "snapshot",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "airdropSnapshotLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "depositKlay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "depositedAirdrop",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAirdropDistributorStruct.AirdropInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WKLAY",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "contract IMasterDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xea49313a8398b16ef48cfaa25aa350f64ae22fe27feb5b3910a9eea5cb66934a",
  "receipt": {
    "to": null,
    "from": "0x2A2F23ff33671361010D357529BDF0adca9416Fc",
    "contractAddress": "0x842c3839F7E0D26fAc482064D38b5487bd078f11",
    "transactionIndex": 0,
    "gasUsed": "2883590",
    "logsBloom": "0x
    "blockHash": "0xb90aab27541eef9cbc78af59d5e2dd2a8fbde5cc135f12d630b6b408aebcd992",
    "transactionHash": "0xea49313a8398b16ef48cfaa25aa350f64ae22fe27feb5b3910a9eea5cb66934a",
    "logs": [],
    "blockNumber": 101576789,
    "cumulativeGasUsed": "2883590",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a884ade2120675d2bd462078627092f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLPAirdropDistributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPoolToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"airdropList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdropPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"airdropSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IAirdropDistributorStruct.AirdropInfo\",\"name\":\"snapshot\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"airdropSnapshotLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"depositKlay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"depositedAirdrop\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IAirdropDistributorStruct.AirdropInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WKLAY\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"contract IMasterDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airdrop(address)\":{\"params\":{\"pool\":\"the address of pangea pool\"}},\"airdropList(address[])\":{\"params\":{\"pools\":\"list of the addresses of pangea pool\"}},\"depositKlay(address)\":{\"details\":\"transaction will revert if the asset in the pool is not WKLAY\",\"params\":{\"pool\":\"the address of pangea pool to deposit\"}},\"depositToken(address,address,uint128)\":{\"details\":\"Approval (token.approve(airdropDistributor, amount)) must be performed before transaction\",\"params\":{\"amount\":\"amount of token to deposit\",\"pool\":\"the address of pangea pool to deposit\",\"token\":\"token address to deposit. it must be one of the pools' tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"airdrop(address)\":{\"notice\":\"airdrop the deposited assets of pool\"},\"airdropAll()\":{\"notice\":\"airdrop the deposited assets all on this epoch\"},\"airdropList(address[])\":{\"notice\":\"airdrop Batch Call\"},\"airdropPool(uint256)\":{\"notice\":\"the address of airdrop pool\"},\"airdropPoolLength()\":{\"notice\":\"Number of pools that have ever been deposited\"},\"airdropSnapshot(address,uint256)\":{\"notice\":\"record of past airdrop information distributed\"},\"airdropSnapshotLength(address)\":{\"notice\":\"Number of airdrop action distributed to the pool\"},\"depositKlay(address)\":{\"notice\":\"deposit klay to the pool. this klay will be distributed to the next epoch\"},\"depositToken(address,address,uint128)\":{\"notice\":\"deposit Token to the pool. this token will be distributed to the next epoch\"},\"depositedAirdrop(address)\":{\"notice\":\"airdrop information deposited in the pool. amount0 & amount1 will be zero after airdrop allocation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/distribution/AirdropDistributor.sol\":\"AirdropDistributor\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/distribution/AirdropDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../interfaces/IMasterDeployer.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/LPAirdropCallee.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"../interfaces/IAirdropDistributor.sol\\\";\\nimport \\\"../interfaces/IAirdropPool.sol\\\";\\n\\n// @notice Airdrop Token distribution Contract for Liquidity Provider\\ncontract AirdropDistributor is IAirdropDistributor, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    address internal wKLAY;\\n    IMasterDeployer public masterDeployer;\\n\\n    address[] public airdropPool;\\n    mapping(address => bool) private isAirdropPool;\\n\\n    mapping(address => mapping(address => uint128)) private depositAmount;\\n    mapping(address => uint256) private airdropStartTimePerPool;\\n\\n    mapping(address => AirdropInfo[]) private _airdropSnapshot;\\n    uint256 public constant PERIOD = 1 weeks;\\n\\n    modifier NotPhased() {\\n        require(masterDeployer.airdropDistributor() == address(this), \\\"AirdropDistributor is phased\\\");\\n        _;\\n    }\\n\\n    function initialize(address _masterDeployer, address _WKLAY) external initializer {\\n        masterDeployer = IMasterDeployer(_masterDeployer);\\n        wKLAY = _WKLAY;\\n    }\\n\\n    function epochStartTime() public view returns (uint256) {\\n        return (block.timestamp / PERIOD) * PERIOD;\\n    }\\n\\n    function nextEpochStartTime() public view returns (uint256) {\\n        return epochStartTime() + PERIOD;\\n    }\\n\\n    /// @notice Number of pools that have ever been deposited\\n    function airdropPoolLength() external view returns (uint256) {\\n        return airdropPool.length;\\n    }\\n\\n    function airdropSnapshot(address pool, uint256 idx) external view returns (AirdropInfo memory snapshot) {\\n        snapshot = _airdropSnapshot[pool][idx];\\n    }\\n\\n    function airdropSnapshotLength(address pool) external view returns (uint256 length) {\\n        length = _airdropSnapshot[pool].length;\\n    }\\n\\n    /// @notice airdrop information deposited in the pool. amount0 & amount1 will be zero after airdrop allocation\\n    function depositedAirdrop(address pool) external view returns (AirdropInfo memory) {\\n        return\\n            AirdropInfo(\\n                depositAmount[pool][IConcentratedLiquidityPool(pool).token0()],\\n                depositAmount[pool][IConcentratedLiquidityPool(pool).token1()],\\n                airdropStartTimePerPool[pool]\\n            );\\n    }\\n\\n    /// @notice deposit klay to the pool. this klay will be distributed to the next epoch\\n    /// @param pool the address of pangea pool to deposit\\n    /// @dev transaction will revert if the asset in the pool is not WKLAY\\n    function depositKlay(address pool) external payable NotPhased {\\n        address token = wKLAY;\\n        uint256 amount = msg.value;\\n        IWETH(token).deposit{value: amount}();\\n\\n        _deposit(pool, token, SafeCast.toUint128(amount));\\n    }\\n\\n    /// @notice deposit Token to the pool. this token will be distributed to the next epoch\\n    /// @param pool the address of pangea pool to deposit\\n    /// @param token token address to deposit. it must be one of the pools' tokens.\\n    /// @param amount amount of token to deposit\\n    /// @dev Approval (token.approve(airdropDistributor, amount)) must be performed before transaction\\n    function depositToken(\\n        address pool,\\n        address token,\\n        uint128 amount\\n    ) external NotPhased {\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        _deposit(pool, token, amount);\\n    }\\n\\n    /// @notice airdrop the deposited assets of pool\\n    /// @param pool the address of pangea pool\\n    function airdrop(address pool) external NotPhased {\\n        if (airdropStartTimePerPool[pool] > epochStartTime()) revert NotYet();\\n\\n        _airdrop(pool);\\n    }\\n\\n    /// @notice airdrop Batch Call\\n    /// @param pools list of the addresses of pangea pool\\n    function airdropList(address[] memory pools) external NotPhased {\\n        uint256 _epochStartTime = epochStartTime();\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address pool = pools[i];\\n\\n            if (airdropStartTimePerPool[pool] > _epochStartTime) continue;\\n            if ((IAirdropPool(pool).airdropStartTime() + IAirdropPool(pool).airdropPeriod()) > _epochStartTime) continue;\\n\\n            _airdrop(pool);\\n        }\\n    }\\n\\n    /// @notice airdrop the deposited assets all on this epoch\\n    function airdropAll() external NotPhased {\\n        uint256 _epochStartTime = epochStartTime();\\n\\n        for (uint256 i = 0; i < airdropPool.length; i++) {\\n            address pool = airdropPool[i];\\n            if (airdropStartTimePerPool[pool] > 0 && airdropStartTimePerPool[pool] <= _epochStartTime) {\\n                _airdrop(pool);\\n            }\\n        }\\n    }\\n\\n    function _deposit(\\n        address pool,\\n        address token,\\n        uint128 amount\\n    ) internal {\\n        if (!masterDeployer.pools(pool)) revert NotExists();\\n        if (IConcentratedLiquidityPool(pool).token0() != token && IConcentratedLiquidityPool(pool).token1() != token) revert NotPoolToken();\\n\\n        if (airdropStartTimePerPool[pool] > 0 && airdropStartTimePerPool[pool] <= epochStartTime()) {\\n            // edge case\\n            // If the previously deposited assets have not been distributed, distribute them first and deposit.\\n            _airdrop(pool);\\n        }\\n\\n        if (!isAirdropPool[pool]) {\\n            isAirdropPool[pool] = true;\\n            airdropPool.push(pool);\\n        }\\n\\n        depositAmount[pool][token] += amount;\\n        airdropStartTimePerPool[pool] = nextEpochStartTime();\\n\\n        emit Deposit(pool, token, amount, msg.sender);\\n    }\\n\\n    function _airdrop(address pool) internal {\\n        address token0 = IConcentratedLiquidityPool(pool).token0();\\n        address token1 = IConcentratedLiquidityPool(pool).token1();\\n\\n        uint128 airdrop0 = depositAmount[pool][token0];\\n        uint128 airdrop1 = depositAmount[pool][token1];\\n        depositAmount[pool][token0] = 0;\\n        depositAmount[pool][token1] = 0;\\n        airdropStartTimePerPool[pool] = 0; // reset\\n\\n        IERC20(token0).approve(pool, airdrop0);\\n        IERC20(token1).approve(pool, airdrop1);\\n\\n        uint256 startTime = epochStartTime();\\n        uint256 period = PERIOD;\\n\\n        LPAirdropCallee(pool).depositAirdrop(airdrop0, airdrop1, startTime, period);\\n\\n        IERC20(token0).approve(pool, 0);\\n        IERC20(token1).approve(pool, 0);\\n\\n        _airdropSnapshot[pool].push(AirdropInfo(airdrop0, airdrop1, startTime));\\n        emit Airdrop(pool, token0, token1, airdrop0, airdrop1, startTime, period);\\n    }\\n}\\n\",\"keccak256\":\"0xd2f05e86956c02dfed8fd61f20abaf49eaea400b219d6a6211ceb81927732c02\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAirdropDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IAirdropDistributorEvent {\\n    event Deposit(address indexed pool, address token, uint256 amount, address depositor);\\n\\n    event Airdrop(\\n        address indexed pool,\\n        address token0,\\n        address token1,\\n        uint128 amount0,\\n        uint128 amount1,\\n        uint256 startTime,\\n        uint256 period\\n    );\\n}\\n\\ninterface IAirdropDistributorError {\\n    error NotExists();\\n\\n    error NotPoolToken();\\n\\n    error NotYet();\\n\\n    error NotLPAirdropDistributor();\\n\\n    error Overflow();\\n}\\n\\ninterface IAirdropDistributorStruct {\\n    struct AirdropInfo {\\n        /// @dev the airdrop amount of `token0` for the pool\\n        uint256 amount0;\\n        /// @dev the airdrop amount of `token1` for the pool\\n        uint256 amount1;\\n        /// @dev start time to distribute airdrop\\n        uint256 startTime;\\n    }\\n}\\n\\ninterface IAirdropDistributor is IAirdropDistributorEvent, IAirdropDistributorStruct, IAirdropDistributorError {\\n    /// @notice Number of pools that have ever been deposited\\n    function airdropPoolLength() external view returns (uint256);\\n\\n    /// @notice record of past airdrop information distributed\\n    function airdropSnapshot(address pool, uint256 idx) external view returns (AirdropInfo memory snapshot);\\n\\n    /// @notice Number of airdrop action distributed to the pool\\n    function airdropSnapshotLength(address pool) external view returns (uint256 length);\\n\\n    /// @notice current deposited airdrop information in the pool. amount0 & amount1 will be zero after airdrop allocation\\n    function depositedAirdrop(address pool) external view returns (AirdropInfo memory);\\n\\n    /// @notice the address of airdrop pool\\n    function airdropPool(uint256 idx) external view returns (address);\\n\\n    /// @notice deposit klay to the pool. klay will be distributed to the next epoch\\n    /// @param pool the address of pangea pool to deposit\\n    /// @dev transaction will revert if the asset in the pool is not WKLAY\\n    function depositKlay(address pool) external payable;\\n\\n    /// @notice deposit token to the pool. the token will be distributed to the next epoch\\n    /// @param pool the address of pangea pool to deposit\\n    /// @param token token address to deposit. it must be one of the pools' tokens.\\n    /// @param amount amount of token to deposit\\n    /// @dev Approval (token.approve(airdropDistributor, amount)) must be performed before transaction\\n    function depositToken(\\n        address pool,\\n        address token,\\n        uint128 amount\\n    ) external;\\n\\n    /// @notice airdrop the deposited assets of pool\\n    /// @param pool the address of pangea pool\\n    function airdrop(address pool) external;\\n\\n    /// @notice airdrop Batch Call\\n    /// @param pools list of the addresses of pangea pool\\n    function airdropList(address[] memory pools) external;\\n}\\n\",\"keccak256\":\"0x35e4dd0c0b99604225c5d3dba93871d4e19de994a0ec7235c17415bd7bb1a5de\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAirdropPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IAirdropPool {\\n    function airdrop0PerSecond() external returns (uint256);\\n\\n    function airdrop1PerSecond() external returns (uint256);\\n\\n    function airdropStartTime() external returns (uint256);\\n\\n    function airdropPeriod() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x127717e4d8bd1b38c674e91f5a36d0b2d576e1f2d96eac28e92ddd40c74dade6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMasterDeployer.sol\\\";\\nimport \\\"../libraries/Ticks.sol\\\";\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice do not use this. it can be easily corrupted\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0xa2f3c1062b72ff1ebbbdf9afbbd08ec9644bb19e82951385c162ff82e5c87d8a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool deployer interface.\\ninterface IMasterDeployer {\\n    // ============ EVENTS ================\\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\\n    event AddToWhitelistFactory(address indexed factory);\\n    event RemoveFromWhitelistFactory(address indexed factory);\\n    event ProtocolFeeToUpdated(address protocolFeeTo);\\n\\n    /// @notice create pool through factory\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n\\n    /// @notice Return the address receiving protocol fees from Pool\\n    function protocolFeeTo() external view returns (address);\\n\\n    /// @notice Return whether the pool was deployed via a deployer\\n    function pools(address pool) external view returns (bool);\\n\\n    /// @notice LP Airdrop Distributor address\\n    function airdropDistributor() external returns (address);\\n\\n    /// @notice Return the number of pools deployed from masterDeployer\\n    function totalPoolsCount() external view returns (uint256 total);\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool);\\n\\n    /// @notice Return the address of Factory deployed pool\\n    function getFactoryAddress(address pool) external view returns (address factory);\\n}\\n\",\"keccak256\":\"0x78e000c156708cab98e97c281e357b4e5e000174f1b914ea5acdcd11181e4203\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function depositTo(address to) external payable;\\n\\n    function withdrawTo(address payable to, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x3df7d2d850b39e7532c1370d414ba6f225a07fa3d176cafcdb70f330e15a1c1b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/LPAirdropCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n// @notice It's for ConcentratedLiquidityPool. supports only tokens of pool\\ninterface LPAirdropCallee {\\n    function depositAirdrop(\\n        uint128 airdrop0,\\n        uint128 airdrop1,\\n        uint256 startTime,\\n        uint256 period\\n    ) external;\\n}\\n\\n// @notice It's for MiningPool & YieldPool. supports tokens of pool and reward Token\\ninterface LPRewardCallee {\\n    function rewardToken() external view returns (address);\\n\\n    function depositAirdropAndReward(\\n        uint128 airdrop0,\\n        uint128 airdrop1,\\n        uint128 reward,\\n        uint256 startTime,\\n        uint256 period\\n    ) external;\\n}\\n\",\"keccak256\":\"0x41a37ae05eaf0c044db1f4a64f4a2ecd3e56ec1e9243e5d228e5a994cbc09544\",\"license\":\"GPL-3.0\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary SafeCast {\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        require((z = uint128(y)) == y);\\n    }\\n\\n    function toInt128(uint256 y) internal pure returns (int128 z) {\\n        require(y <= 2**127 - 1);\\n        return int128(int256(y));\\n    }\\n}\\n\",\"keccak256\":\"0x26f130f9e37749f36d7c61bb818227d0ef4e089695be0009e9b626e63c7753c3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library for computing sqrt price for ticks of size 1.0001, i.e., sqrt(1.0001^tick) as fixed point Q64.96 numbers - supports\\n/// prices between 2**-128 and 2**128 - 1.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/TickMath.sol.\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MIN_TICK).\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MAX_TICK).\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    error TickOutOfBounds();\\n    error PriceOutOfBounds();\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96.\\n    /// @dev Throws if |tick| > max tick.\\n    /// @param tick The input tick for the above formula.\\n    /// @return sqrtPriceX96 Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick.\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        if (absTick > uint256(uint24(MAX_TICK))) revert TickOutOfBounds();\\n        unchecked {\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n            // This divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // We then downcast because we know the result always fits within 160 bits due to our tick input constraint.\\n            // We round up in the division so getTickAtSqrtRatio of the output price is always consistent.\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    function validatePrice(uint160 price) internal pure {\\n        if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio.\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96.\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio.\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // Second inequality must be < because the price can never reach the price at the max tick.\\n        if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n        unchecked {\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number.\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d20064b2a93ccddca358064e4843ebbe8c76fb75c85ce9c95d4050ee10d4ce5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Ticks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\n\\n/// @notice Tick management library for ranged liquidity.\\nlibrary Ticks {\\n    function getMaxLiquidity(uint24 _tickSpacing) internal pure returns (uint128) {\\n        return type(uint128).max / uint128(uint24(TickMath.MAX_TICK) / (2 * uint24(_tickSpacing)));\\n    }\\n\\n    function cross(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 nextTickToCross,\\n        uint160 secondsGrowthGlobal,\\n        uint256 currentLiquidity,\\n        uint256 feeGrowthGlobalA,\\n        uint256 feeGrowthGlobalB,\\n        bool zeroForOne,\\n        uint24 tickSpacing\\n    ) internal returns (uint256, int24) {\\n        ticks[nextTickToCross].secondsGrowthOutside = secondsGrowthGlobal - ticks[nextTickToCross].secondsGrowthOutside;\\n\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside0;\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside1;\\n            nextTickToCross = ticks[nextTickToCross].previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside1;\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside0;\\n            nextTickToCross = ticks[nextTickToCross].nextTick;\\n        }\\n        return (currentLiquidity, nextTickToCross);\\n    }\\n\\n    function insert(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        uint256 feeGrowthGlobal0,\\n        uint256 feeGrowthGlobal1,\\n        uint160 secondsGrowthGlobal,\\n        int24 lowerOld,\\n        int24 lower,\\n        int24 upperOld,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick,\\n        uint160 currentPrice\\n    ) public returns (int24, uint256 numOfInserted) {\\n        require(lower < upper, \\\"WRONG_ORDER\\\");\\n        require(TickMath.MIN_TICK <= lower, \\\"LOWER_RANGE\\\");\\n        require(upper <= TickMath.MAX_TICK, \\\"UPPER_RANGE\\\");\\n\\n        {\\n            // Stack overflow.\\n            uint128 currentLowerLiquidity = ticks[lower].liquidity;\\n            if (currentLowerLiquidity != 0 || lower == TickMath.MIN_TICK) {\\n                // We are adding liquidity to an existing tick.\\n                ticks[lower].liquidity = currentLowerLiquidity + amount;\\n            } else {\\n                // We are inserting a new tick.\\n                int24 oldNextTick;\\n                {\\n                    IConcentratedLiquidityPoolStruct.Tick storage old = ticks[lowerOld];\\n                    oldNextTick = old.nextTick;\\n                    old.nextTick = lower;\\n                    require(\\n                        (old.liquidity != 0 || lowerOld == TickMath.MIN_TICK) && lowerOld < lower && lower < oldNextTick,\\n                        \\\"LOWER_ORDER\\\"\\n                    );\\n                }\\n\\n                if (lower <= TickMath.getTickAtSqrtRatio(currentPrice)) {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(\\n                        lowerOld,\\n                        oldNextTick,\\n                        amount,\\n                        feeGrowthGlobal0,\\n                        feeGrowthGlobal1,\\n                        secondsGrowthGlobal\\n                    );\\n                } else {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(lowerOld, oldNextTick, amount, 0, 0, 0);\\n                }\\n\\n                ticks[oldNextTick].previousTick = lower;\\n                numOfInserted += 1;\\n            }\\n        }\\n\\n        uint128 currentUpperLiquidity = ticks[upper].liquidity;\\n        if (currentUpperLiquidity != 0 || upper == TickMath.MAX_TICK) {\\n            // We are adding liquidity to an existing tick.\\n            ticks[upper].liquidity = currentUpperLiquidity + amount;\\n        } else {\\n            // Inserting a new tick.\\n            int24 oldNextTick;\\n            {\\n                IConcentratedLiquidityPoolStruct.Tick storage old = ticks[upperOld];\\n                oldNextTick = old.nextTick;\\n                old.nextTick = upper;\\n                require(old.liquidity != 0 && oldNextTick > upper && upperOld < upper, \\\"UPPER_ORDER\\\");\\n            }\\n\\n            if (upper <= TickMath.getTickAtSqrtRatio(currentPrice)) {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(\\n                    upperOld,\\n                    oldNextTick,\\n                    amount,\\n                    feeGrowthGlobal0,\\n                    feeGrowthGlobal1,\\n                    secondsGrowthGlobal\\n                );\\n            } else {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(upperOld, oldNextTick, amount, 0, 0, 0);\\n            }\\n\\n            ticks[oldNextTick].previousTick = upper;\\n            numOfInserted += 1;\\n        }\\n\\n        int24 tickAtPrice = TickMath.getTickAtSqrtRatio(currentPrice);\\n\\n        if (nearestTick < upper && upper <= tickAtPrice) {\\n            nearestTick = upper;\\n        } else if (nearestTick < lower && lower <= tickAtPrice) {\\n            nearestTick = lower;\\n        }\\n\\n        return (nearestTick, numOfInserted);\\n    }\\n\\n    function remove(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick\\n    ) public returns (int24, uint256 numOfRemoved) {\\n        IConcentratedLiquidityPoolStruct.Tick storage current = ticks[lower];\\n\\n        if (lower != TickMath.MIN_TICK && current.liquidity == amount) {\\n            // Delete lower tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == lower) nearestTick = current.previousTick;\\n\\n            delete ticks[lower];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        current = ticks[upper];\\n\\n        if (upper != TickMath.MAX_TICK && current.liquidity == amount) {\\n            // Delete upper tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == upper) nearestTick = current.previousTick;\\n\\n            delete ticks[upper];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        return (nearestTick, numOfRemoved);\\n    }\\n}\\n\",\"keccak256\":\"0x0669f4e0e9ae2e042e976f5fd5274fb6c9b2f12da55e4dc4bdcd762e4d45a9d5\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airdrop(address)": {
        "params": {
          "pool": "the address of pangea pool"
        }
      },
      "airdropList(address[])": {
        "params": {
          "pools": "list of the addresses of pangea pool"
        }
      },
      "depositKlay(address)": {
        "details": "transaction will revert if the asset in the pool is not WKLAY",
        "params": {
          "pool": "the address of pangea pool to deposit"
        }
      },
      "depositToken(address,address,uint128)": {
        "details": "Approval (token.approve(airdropDistributor, amount)) must be performed before transaction",
        "params": {
          "amount": "amount of token to deposit",
          "pool": "the address of pangea pool to deposit",
          "token": "token address to deposit. it must be one of the pools' tokens."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "airdrop(address)": {
        "notice": "airdrop the deposited assets of pool"
      },
      "airdropAll()": {
        "notice": "airdrop the deposited assets all on this epoch"
      },
      "airdropList(address[])": {
        "notice": "airdrop Batch Call"
      },
      "airdropPool(uint256)": {
        "notice": "the address of airdrop pool"
      },
      "airdropPoolLength()": {
        "notice": "Number of pools that have ever been deposited"
      },
      "airdropSnapshot(address,uint256)": {
        "notice": "record of past airdrop information distributed"
      },
      "airdropSnapshotLength(address)": {
        "notice": "Number of airdrop action distributed to the pool"
      },
      "depositKlay(address)": {
        "notice": "deposit klay to the pool. this klay will be distributed to the next epoch"
      },
      "depositToken(address,address,uint128)": {
        "notice": "deposit Token to the pool. this token will be distributed to the next epoch"
      },
      "depositedAirdrop(address)": {
        "notice": "airdrop information deposited in the pool. amount0 & amount1 will be zero after airdrop allocation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10063,
        "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
        "label": "wKLAY",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10066,
        "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
        "label": "masterDeployer",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMasterDeployer)12434"
      },
      {
        "astId": 10069,
        "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
        "label": "airdropPool",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10073,
        "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
        "label": "isAirdropPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10079,
        "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
        "label": "depositAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint128))"
      },
      {
        "astId": 10083,
        "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
        "label": "airdropStartTimePerPool",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10089,
        "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
        "label": "_airdropSnapshot",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(AirdropInfo)11562_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AirdropInfo)11562_storage)dyn_storage": {
        "base": "t_struct(AirdropInfo)11562_storage",
        "encoding": "dynamic_array",
        "label": "struct IAirdropDistributorStruct.AirdropInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMasterDeployer)12434": {
        "encoding": "inplace",
        "label": "contract IMasterDeployer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(AirdropInfo)11562_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IAirdropDistributorStruct.AirdropInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(AirdropInfo)11562_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint128))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint128)"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AirdropInfo)11562_storage": {
        "encoding": "inplace",
        "label": "struct IAirdropDistributorStruct.AirdropInfo",
        "members": [
          {
            "astId": 11555,
            "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
            "label": "amount0",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11558,
            "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
            "label": "amount1",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11561,
            "contract": "contracts/distribution/AirdropDistributor.sol:AirdropDistributor",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}