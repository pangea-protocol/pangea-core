{
  "address": "0xF7C27b891670867dc2784d3A01E4d0e02Ec8909f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TickOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountIn",
          "type": "uint256"
        }
      ],
      "name": "calculateExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "overInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maximumAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountIn",
          "type": "uint256"
        }
      ],
      "name": "calculateExactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "overInput",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maximumAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountOut",
          "type": "uint256"
        }
      ],
      "name": "calculateExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountOut",
          "type": "uint256"
        }
      ],
      "name": "calculateExactOutputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6bfea43fa08a477c041fbbf8e11fb570eaaf9d1a621a929835fd99525634f52d",
  "receipt": {
    "to": null,
    "from": "0x2A2F23ff33671361010D357529BDF0adca9416Fc",
    "contractAddress": "0xF7C27b891670867dc2784d3A01E4d0e02Ec8909f",
    "transactionIndex": 2,
    "gasUsed": "3189841",
    "logsBloom": "0x
    "blockHash": "0xe163a06c32152f4ce22a1c4388cdab37560904e1ebba97d8f91a7fe76d8a7a68",
    "transactionHash": "0x6bfea43fa08a477c041fbbf8e11fb570eaaf9d1a621a929835fd99525634f52d",
    "logs": [],
    "blockNumber": 111428547,
    "cumulativeGasUsed": "10316718",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFF3e7cf0C007f919807b32b30a4a9E7Bd7Bc4121"
  ],
  "numDeployments": 1,
  "solcInputHash": "d2d71acda42f104dc6996ebcdbdd2a01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TickOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountIn\",\"type\":\"uint256\"}],\"name\":\"calculateExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"overInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maximumAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountIn\",\"type\":\"uint256\"}],\"name\":\"calculateExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"overInput\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maximumAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"}],\"name\":\"calculateExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"}],\"name\":\"calculateExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateExactInput(address[],address,uint256)\":{\"returns\":{\"amountOut\":\"the maximum output\",\"maximumAmountIn\":\"Maximum input that the path can handle\",\"overInput\":\"Check if more input has been given to receive the corresponding amountOut\",\"price\":\"    price after swapping\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateExactInput(address[],address,uint256)\":{\"notice\":\"Calculate the maximum output that can be received when swapped according to the given path.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/safeSwap/SafeSwapHelper.sol\":\"SafeSwapHelper\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice do not use this. it can be easily corrupted\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0xd50187378c243a9523c29c977d6680e377bbc48f801bdc3c5b1eff8db5eee074\",\"license\":\"GPL-3.0\"},\"contracts/libraries/DyDxMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n/// @notice Math library that facilitates ranged liquidity calculations.\\nlibrary DyDxMath {\\n    function getDy(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dy) {\\n        unchecked {\\n            if (roundUp) {\\n                dy = FullMath.mulDivRoundingUp(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            } else {\\n                dy = FullMath.mulDiv(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            }\\n        }\\n    }\\n\\n    function getDx(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dx) {\\n        unchecked {\\n            if (roundUp) {\\n                dx = UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper),\\n                    priceLower\\n                );\\n            } else {\\n                dx = FullMath.mulDiv(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper) / priceLower;\\n            }\\n        }\\n    }\\n\\n    function getLiquidityForAmounts(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 dy,\\n        uint256 dx\\n    ) internal pure returns (uint256 liquidity) {\\n        unchecked {\\n            if (priceUpper <= currentPrice) {\\n                liquidity = FullMath.mulDiv(dy, FixedPoint.Q96, priceUpper - priceLower);\\n            } else if (currentPrice <= priceLower) {\\n                liquidity = FullMath.mulDiv(dx, FullMath.mulDiv(priceLower, priceUpper, FixedPoint.Q96), priceUpper - priceLower);\\n            } else {\\n                uint256 liquidity0 = FullMath.mulDiv(\\n                    dx,\\n                    FullMath.mulDiv(priceUpper, currentPrice, FixedPoint.Q96),\\n                    priceUpper - currentPrice\\n                );\\n                uint256 liquidity1 = FullMath.mulDiv(dy, FixedPoint.Q96, currentPrice - priceLower);\\n                liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n            }\\n        }\\n    }\\n\\n    function getAmountsForLiquidity(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 liquidityAmount,\\n        bool roundUp\\n    ) internal pure returns (uint128 token0amount, uint128 token1amount) {\\n        if (priceUpper <= currentPrice) {\\n            // Only supply `token1` (`token1` is Y).\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else if (currentPrice <= priceLower) {\\n            // Only supply `token0` (`token0` is X).\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else {\\n            // Supply both tokens.\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, currentPrice, priceUpper, roundUp));\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, currentPrice, roundUp));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd7e93680c237fbda55c989b3bbf3dcd14c4df5d40a0a9a997325d8a539f80cc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary FixedPoint {\\n    uint8 internal constant Q128RES = 128;\\n    uint8 internal constant Q96RES = 96;\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x591a424ebe1e10342bf873b49a85989bcbca4b575846ed3d3f3a194f122fdbbd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\\n/// @dev Handles \\\"phantom overflow\\\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b.\\n            // Compute the product mod 2**256 and mod 2**256 - 1,\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product.\\n            uint256 prod1; // Most significant 256 bits of the product.\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n            // Make sure the result is less than 2**256 -\\n            // also prevents denominator == 0.\\n            require(denominator > prod1);\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n            // Make division exact by subtracting the remainder from [prod1 prod0] -\\n            // compute remainder using mulmod.\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number.\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n            // Factor powers of two out of denominator -\\n            // compute largest power of two divisor of denominator\\n            // (always >= 1).\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two.\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n            // Divide [prod1 prod0] by the factors of two.\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos -\\n            // if twos is zero, then it becomes one.\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256 -\\n            // now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // for four bits. That is, denominator * inv = 1 mod 2**4.\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**8.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**16.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**32.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**64.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**128.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**256.\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        unchecked {\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8211b004be6ff6be30b81fe484544d00c7bb467a4fd2a0d6c60114353e2300cf\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary SafeCast {\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        require((z = uint128(y)) == y);\\n    }\\n\\n    function toInt128(uint256 y) internal pure returns (int128 z) {\\n        require(y <= 2**127 - 1);\\n        return int128(int256(y));\\n    }\\n}\\n\",\"keccak256\":\"0x26f130f9e37749f36d7c61bb818227d0ef4e089695be0009e9b626e63c7753c3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library for computing sqrt price for ticks of size 1.0001, i.e., sqrt(1.0001^tick) as fixed point Q64.96 numbers - supports\\n/// prices between 2**-128 and 2**128 - 1.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/TickMath.sol.\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MIN_TICK).\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MAX_TICK).\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    error TickOutOfBounds();\\n    error PriceOutOfBounds();\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96.\\n    /// @dev Throws if |tick| > max tick.\\n    /// @param tick The input tick for the above formula.\\n    /// @return sqrtPriceX96 Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick.\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        if (absTick > uint256(uint24(MAX_TICK))) revert TickOutOfBounds();\\n        unchecked {\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n            // This divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // We then downcast because we know the result always fits within 160 bits due to our tick input constraint.\\n            // We round up in the division so getTickAtSqrtRatio of the output price is always consistent.\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    function validatePrice(uint160 price) internal pure {\\n        if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio.\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96.\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio.\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // Second inequality must be < because the price can never reach the price at the max tick.\\n        if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n        unchecked {\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number.\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d20064b2a93ccddca358064e4843ebbe8c76fb75c85ce9c95d4050ee10d4ce5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that contains methods that perform common math functions but do not do any overflow or underflow checks.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/UnsafeMath.sol.\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y).\\n    /// @dev Division by 0 has unspecified behavior, and must be checked externally.\\n    /// @param x The dividend.\\n    /// @param y The divisor.\\n    /// @return z The quotient, ceil(x / y).\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea315497f3b3f0dcf40535dd8a130e3615ffaaa18a735eb6ec48f990fac148a0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/misc/safeSwap/SafeSwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"./SafeSwapHelperLib.sol\\\";\\n\\ncontract SafeSwapHelper {\\n    address public wETH;\\n\\n    constructor(address _wETH) {\\n        wETH = _wETH;\\n    }\\n\\n    /// @notice Calculate the maximum output that can be received when swapped according to the given path.\\n    /// @return amountOut the maximum output\\n    /// @return price     price after swapping\\n    /// @return overInput Check if more input has been given to receive the corresponding amountOut\\n    /// @return maximumAmountIn Maximum input that the path can handle\\n    function calculateExactInput(\\n        address[] calldata path,\\n        address tokenIn,\\n        uint256 exactAmountIn\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amountOut,\\n            uint256 price,\\n            bool overInput,\\n            uint256 maximumAmountIn\\n        )\\n    {\\n        address originalTokenIn = tokenIn;\\n        tokenIn = tokenIn == address(0) ? wETH : tokenIn;\\n\\n        amountOut = exactAmountIn;\\n        bool _overInput;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            address pool = path[i];\\n\\n            (amountOut, price, _overInput) = SafeSwapHelperLib.exactInput(pool, tokenIn, amountOut);\\n\\n            if (_overInput) {\\n                overInput = true;\\n            }\\n\\n            tokenIn = IConcentratedLiquidityPool(pool).token0() == tokenIn\\n                ? IConcentratedLiquidityPool(pool).token1()\\n                : IConcentratedLiquidityPool(pool).token0();\\n        }\\n\\n        if (overInput) {\\n            (maximumAmountIn, ) = calculateExactOutput(path, originalTokenIn, amountOut);\\n        }\\n    }\\n\\n    function calculateExactInputSingle(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountIn\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amountOut,\\n            uint256 price,\\n            bool overInput,\\n            uint256 maximumAmountIn\\n        )\\n    {\\n        (amountOut, price, overInput) = SafeSwapHelperLib.exactInput(pool, tokenIn == address(0) ? wETH : tokenIn, exactAmountIn);\\n\\n        if (overInput) {\\n            (maximumAmountIn, ) = calculateExactOutputSingle(pool, tokenIn, amountOut);\\n        }\\n    }\\n\\n    function calculateExactOutput(\\n        address[] calldata path,\\n        address tokenIn,\\n        uint256 exactAmountOut\\n    ) public view returns (uint256 amountIn, uint256 price) {\\n        address tokenOut = findTokenOut(path, tokenIn);\\n\\n        uint256 amountOut = exactAmountOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            address pool = path[i - 1];\\n\\n            tokenOut = IConcentratedLiquidityPool(pool).token0() == tokenOut\\n                ? IConcentratedLiquidityPool(pool).token1()\\n                : IConcentratedLiquidityPool(pool).token0();\\n\\n            (amountOut, price) = SafeSwapHelperLib.exactOutput(pool, tokenOut, amountOut);\\n        }\\n        amountIn = amountOut;\\n    }\\n\\n    function calculateExactOutputSingle(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountOut\\n    ) public view returns (uint256 amountIn, uint256 price) {\\n        return SafeSwapHelperLib.exactOutput(pool, tokenIn == address(0) ? wETH : tokenIn, exactAmountOut);\\n    }\\n\\n    function findTokenOut(address[] calldata path, address tokenIn) internal view returns (address tokenOut) {\\n        tokenOut = tokenIn == address(0) ? wETH : tokenIn;\\n        IConcentratedLiquidityPool pool;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            pool = IConcentratedLiquidityPool(path[i]);\\n            tokenOut = pool.token0() == tokenOut ? pool.token1() : pool.token0();\\n        }\\n        return tokenOut;\\n    }\\n}\\n\",\"keccak256\":\"0x1e8f707f7ba8968a81753518d8924601f10169df03aeeb0a4a97d56841b09e37\",\"license\":\"GPL-3.0\"},\"contracts/misc/safeSwap/SafeSwapHelperLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IConcentratedLiquidityPool as CLPool} from \\\"../../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../../libraries/DyDxMath.sol\\\";\\nimport \\\"../../libraries/TickMath.sol\\\";\\nimport \\\"../../libraries/FullMath.sol\\\";\\n\\n\\nlibrary SafeSwapHelperLib {\\n    struct SwapCache {\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        uint256 output;\\n        int24 nextTickToCross;\\n    }\\n\\n    function exactInput(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountIn\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 amountOut,\\n            uint256 price,\\n            bool overInput\\n        )\\n    {\\n        bool zeroForOne = determineZeroForOne(pool, tokenIn);\\n        uint24 swapFee = CLPool(pool).swapFee();\\n        int24 iTickSpacing = int24(CLPool(pool).tickSpacing());\\n\\n        // initialize cache\\n        SwapCache memory cache;\\n        {\\n            (uint160 currentPrice, int24 nearestTick) = CLPool(pool).getPriceAndNearestTicks();\\n            cache = SwapCache({\\n                currentPrice: currentPrice,\\n                currentLiquidity: uint256(CLPool(pool).liquidity()),\\n                input: exactAmountIn,\\n                output: 0,\\n                nextTickToCross: zeroForOne ? nearestTick : CLPool(pool).ticks(nearestTick).nextTick\\n            });\\n        }\\n        if (zeroLiquidity(cache)) return (0, cache.currentPrice, exactAmountIn > 0);\\n\\n        while (cache.input != 0) {\\n            uint256 nextTickPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n            uint256 output = 0;\\n            bool cross = false;\\n\\n            if (zeroForOne) {\\n                // Trading token 0 (x) for token 1 (y).\\n                // Price is decreasing.\\n                // Maximum input amount within current tick range: \\u0394x = \\u0394(1/\\u221a\\ud835\\udc43) \\u00b7 L.\\n                uint256 maxDx = DyDxMath.getDx(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n\\n                if (cache.input <= maxDx) {\\n                    // We can swap within the current range.\\n                    uint256 liquidityPadded = cache.currentLiquidity << FixedPoint.Q96RES;\\n                    // Calculate new price after swap: \\u221a\\ud835\\udc43[new] =  L \\u00b7 \\u221a\\ud835\\udc43 / (L + \\u0394x \\u00b7 \\u221a\\ud835\\udc43)\\n                    // This is derived from \\u0394(1/\\u221a\\ud835\\udc43) = \\u0394x/L\\n                    // where \\u0394(1/\\u221a\\ud835\\udc43) is 1/\\u221a\\ud835\\udc43[old] - 1/\\u221a\\ud835\\udc43[new] and we solve for \\u221a\\ud835\\udc43[new].\\n                    // In case of an overflow we can use: \\u221a\\ud835\\udc43[new] = L / (L / \\u221a\\ud835\\udc43 + \\u0394x).\\n                    // This is derived by dividing the original fraction by \\u221a\\ud835\\udc43 on both sides.\\n                    uint256 newPrice = uint256(\\n                        FullMath.mulDivRoundingUp(liquidityPadded, cache.currentPrice, liquidityPadded + cache.currentPrice * cache.input)\\n                    );\\n\\n                    if (!(nextTickPrice <= newPrice && newPrice < cache.currentPrice)) {\\n                        // Overflow. We use a modified version of the formula.\\n                        newPrice = uint160(UnsafeMath.divRoundingUp(liquidityPadded, liquidityPadded / cache.currentPrice + cache.input));\\n                    }\\n                    // Based on the price difference calculate the output of th swap: \\u0394y = \\u0394\\u221aP \\u00b7 L.\\n                    output = DyDxMath.getDy(cache.currentLiquidity, newPrice, cache.currentPrice, false);\\n                    cache.currentPrice = newPrice;\\n                    cache.input = 0;\\n                } else {\\n                    // Execute swap step and cross the tick.\\n                    output = DyDxMath.getDy(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n                    cache.currentPrice = nextTickPrice;\\n                    cross = true;\\n                    cache.input -= maxDx;\\n                }\\n            } else {\\n                // Price is increasing.\\n                // Maximum swap amount within the current tick range: \\u0394y = \\u0394\\u221aP \\u00b7 L.\\n                uint256 maxDy = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n\\n                if (cache.input <= maxDy) {\\n                    // We can swap within the current range.\\n                    // Calculate new price after swap: \\u0394P = \\u0394y/L.\\n                    uint256 newPrice = cache.currentPrice + FullMath.mulDiv(cache.input, FixedPoint.Q96, cache.currentLiquidity);\\n                    // Calculate output of swap\\n                    // - \\u0394x = \\u0394(1/\\u221aP) \\u00b7 L.\\n                    output = DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, newPrice, false);\\n                    cache.currentPrice = newPrice;\\n                    cache.input = 0;\\n                } else {\\n                    // Swap & cross the tick.\\n                    output = DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n                    cache.currentPrice = nextTickPrice;\\n                    cross = true;\\n                    cache.input -= maxDy;\\n                }\\n            }\\n\\n            amountOut += amountWithOutFee(output, swapFee);\\n\\n            if (cross) {\\n                (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n\\n                if (cache.currentLiquidity == 0) {\\n                    if (cache.nextTickToCross == TickMath.MAX_TICK || cache.nextTickToCross == TickMath.MIN_TICK) {\\n                        // In the case of the last tick, there is no next tick.\\n                        // price must be crossed because of rangeFeeGrowth\\n                        if (zeroForOne) {\\n                            cache.currentPrice = Math.max(cache.currentPrice - 1, TickMath.MIN_SQRT_RATIO);\\n                        } else {\\n                            cache.currentPrice = Math.min(cache.currentPrice + 1, TickMath.MAX_SQRT_RATIO - 1);\\n                        }\\n                        break;\\n                    }\\n                    cache.currentPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n                    (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n                }\\n            }\\n        }\\n        overInput = cache.input > 0;\\n        price = cache.currentPrice;\\n    }\\n\\n    function exactOutput(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountOut\\n    ) internal view returns (uint256 amountIn, uint256 price) {\\n        bool zeroForOne = determineZeroForOne(pool, tokenIn);\\n        uint24 swapFee = CLPool(pool).swapFee();\\n        int24 iTickSpacing = int24(CLPool(pool).tickSpacing());\\n\\n        // initialize cache\\n        SwapCache memory cache;\\n        {\\n            (uint160 currentPrice, int24 nearestTick) = CLPool(pool).getPriceAndNearestTicks();\\n            cache = SwapCache({\\n                currentPrice: currentPrice,\\n                currentLiquidity: uint256(CLPool(pool).liquidity()),\\n                input: 0,\\n                output: exactAmountOut,\\n                nextTickToCross: zeroForOne ? nearestTick : CLPool(pool).ticks(nearestTick).nextTick\\n            });\\n        }\\n        if (zeroLiquidity(cache)) return (0, cache.currentPrice);\\n\\n        while (cache.output != 0) {\\n            uint256 nextTickPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n            uint256 input = 0;\\n            bool cross = false;\\n\\n            if (zeroForOne) {\\n                uint256 maxDy = amountWithOutFee(DyDxMath.getDy(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false), swapFee);\\n\\n                if (cache.output <= maxDy) {\\n                    uint256 newPrice = cache.currentPrice -\\n                        FullMath.mulDivRoundingUp(amountWithFee(cache.output, swapFee), FixedPoint.Q96, cache.currentLiquidity);\\n                    input = DyDxMath.getDx(cache.currentLiquidity, newPrice, cache.currentPrice, true);\\n\\n                    cache.currentPrice = newPrice;\\n                    cache.output = 0;\\n                } else {\\n                    input = DyDxMath.getDx(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n\\n                    cache.currentPrice = nextTickPrice;\\n                    cache.output -= maxDy;\\n                    cross = true;\\n                }\\n            } else {\\n                uint256 maxDx = amountWithOutFee(DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false), swapFee);\\n\\n                if (cache.output <= maxDx) {\\n                    uint256 liquidityPadded = cache.currentLiquidity << FixedPoint.Q96RES;\\n                    uint256 newPrice = uint256(\\n                        FullMath.mulDivRoundingUp(\\n                            liquidityPadded,\\n                            cache.currentPrice,\\n                            liquidityPadded - cache.currentPrice * amountWithFee(cache.output, swapFee)\\n                        )\\n                    );\\n\\n                    if (!(cache.currentPrice <= newPrice && newPrice < nextTickPrice)) {\\n                        // Overflow. We use a modified version of the formula.\\n                        newPrice = uint160(\\n                            UnsafeMath.divRoundingUp(\\n                                liquidityPadded,\\n                                liquidityPadded / cache.currentPrice - amountWithFee(cache.output, swapFee)\\n                            )\\n                        );\\n                    }\\n\\n                    input = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, newPrice, true);\\n\\n                    cache.currentPrice = newPrice;\\n                    cache.output = 0;\\n                } else {\\n                    input = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n\\n                    cache.currentPrice = nextTickPrice;\\n                    cache.output -= maxDx;\\n                    cross = true;\\n                }\\n            }\\n            amountIn += input;\\n\\n            if (cross) {\\n                (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n\\n                if (cache.currentLiquidity == 0) {\\n                    if (cache.nextTickToCross == TickMath.MAX_TICK || cache.nextTickToCross == TickMath.MIN_TICK) {\\n                        // In the case of the last tick, there is no next tick.\\n                        // price must be crossed because of rangeFeeGrowth\\n                        if (zeroForOne) {\\n                            cache.currentPrice = Math.max(cache.currentPrice - 1, TickMath.MIN_SQRT_RATIO);\\n                        } else {\\n                            cache.currentPrice = Math.min(cache.currentPrice + 1, TickMath.MAX_SQRT_RATIO - 1);\\n                        }\\n                        break;\\n                    }\\n                    cache.currentPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n                    (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n                }\\n            }\\n        }\\n        price = cache.currentPrice;\\n        require(cache.output == 0, \\\"INSUFFICIENT OUTPUT\\\");\\n    }\\n\\n    function crossTick(\\n        address pool,\\n        SwapCache memory cache,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) private view returns (uint256 currentLiquidity, int24 nextTickToCross) {\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n            unchecked {\\n                if ((cache.nextTickToCross / tickSpacing) % 2 == 0) {\\n                    currentLiquidity = cache.currentLiquidity - CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                } else {\\n                    currentLiquidity = cache.currentLiquidity + CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                }\\n            }\\n            nextTickToCross = CLPool(pool).ticks(cache.nextTickToCross).previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n            unchecked {\\n                if ((cache.nextTickToCross / tickSpacing) % 2 == 0) {\\n                    currentLiquidity = cache.currentLiquidity + CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                } else {\\n                    currentLiquidity = cache.currentLiquidity - CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                }\\n            }\\n            nextTickToCross = CLPool(pool).ticks(cache.nextTickToCross).nextTick;\\n        }\\n    }\\n\\n    function zeroLiquidity(SwapCache memory cache) internal pure returns (bool) {\\n        if (cache.currentLiquidity > 0) {\\n            return false;\\n        }\\n        return cache.nextTickToCross == TickMath.MIN_TICK || cache.nextTickToCross == TickMath.MAX_TICK;\\n    }\\n\\n    function amountWithFee(uint256 amount, uint256 swapFee) private pure returns (uint256) {\\n        return FullMath.mulDivRoundingUp(amount, 1e6, 1e6 - swapFee);\\n    }\\n\\n    function amountWithOutFee(uint256 amount, uint256 swapFee) private pure returns (uint256) {\\n        return amount - FullMath.mulDivRoundingUp(amount, swapFee, 1e6);\\n    }\\n\\n    function determineZeroForOne(address pool, address tokenIn) private view returns (bool) {\\n        return CLPool(pool).token0() == tokenIn;\\n    }\\n}\\n\",\"keccak256\":\"0xbe12539e41c1ee3fdfbbb5e4e13275c04766ba2164ef2767034f3f3ebab918bf\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620028e8380380620028e883398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b61284c806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806375a844a01161005057806375a844a0146100d2578063beba5d3f146100e5578063f2428621146100f857600080fd5b80635213f13b1461006c5780636ecc5794146100aa575b600080fd5b61007f61007a366004612351565b61013d565b6040805194855260208501939093529015159183019190915260608201526080015b60405180910390f35b6100bd6100b83660046123dd565b6103c3565b604080519283526020830191909152016100a1565b6100bd6100e0366004612351565b610419565b61007f6100f33660046123dd565b61064d565b6000546101189073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a1565b60008080808573ffffffffffffffffffffffffffffffffffffffff811615610165578661017f565b60005473ffffffffffffffffffffffffffffffffffffffff165b96508594506000805b8981101561039f5760008b8b838181106101a4576101a461241e565b90506020020160208101906101b9919061244d565b90506101c6818b8a6106bd565b9199509750925082156101d857600195505b8973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561023557600080fd5b505afa158015610249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026d919061246a565b73ffffffffffffffffffffffffffffffffffffffff161461030b578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ce57600080fd5b505afa1580156102e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610306919061246a565b610389565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561035157600080fd5b505afa158015610365573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610389919061246a565b9950508080610397906124b6565b915050610188565b5083156103b6576103b28a8a8489610419565b5092505b5050945094509450949050565b60008061040c8573ffffffffffffffffffffffffffffffffffffffff8616156103ec5785610406565b60005473ffffffffffffffffffffffffffffffffffffffff165b85610dc4565b915091505b935093915050565b6000806000610429878787611509565b905083865b801561063f57600089896104436001856124ef565b8181106104525761045261241e565b9050602002016020810190610467919061244d565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe919061246a565b73ffffffffffffffffffffffffffffffffffffffff161461059c578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561055f57600080fd5b505afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610597919061246a565b61061a565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156105e257600080fd5b505afa1580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a919061246a565b9350610627818585610dc4565b9550925081905061063781612506565b91505061042e565b509791965090945050505050565b60008080806106988773ffffffffffffffffffffffffffffffffffffffff8816156106785787610692565b60005473ffffffffffffffffffffffffffffffffffffffff165b876106bd565b9195509350915081156106b4576106b08787866103c3565b5090505b93509350935093565b6000806000806106cd878761174d565b905060008773ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071757600080fd5b505afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f919061253b565b905060008873ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079957600080fd5b505afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d1919061253b565b90506108086040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808b73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108889190612582565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f957600080fd5b505afa15801561090d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093191906125d7565b6fffffffffffffffffffffffffffffffff1681526020018b81526020016000815260200187610a04576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8f169063f30dba939060240160c06040518083038186803b1580156109c357600080fd5b505afa1580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb91906125f2565b60200151610a06565b825b60020b81525092505050610a1981611802565b15610a33575160009650945050508415159150610dbb9050565b604081015115610daa576000610a4c8260800151611883565b73ffffffffffffffffffffffffffffffffffffffff1690506000808615610b86576000610a8485602001518587600001516000611c16565b905080856040015111610b4a5760208501518551604087015160609290921b91600091610ac791849190610ab890826126aa565b610ac290866126e7565b611c70565b9050808611158015610ad95750865181105b610b225760408701518751610b09918491610af4908361272e565b610afe91906126e7565b808204910615150190565b73ffffffffffffffffffffffffffffffffffffffff1690505b610b3787602001518289600001516000611ccb565b908752600060408801529350610b809050565b610b5f85602001518587600001516000611ccb565b848652604086018051919450600193508291610b7c9083906124ef565b9052505b50610c38565b6000610b9d85602001518660000151866000611ccb565b905080856040015111610c00576000610bcc86604001516c010000000000000000000000008860200151611d10565b8651610bd891906126e7565b9050610bef86602001518760000151836000611c16565b908652600060408701529250610c36565b610c1585602001518660000151866000611c16565b848652604086018051919450600193508291610c329083906124ef565b9052505b505b610c47828762ffffff16611de1565b610c51908b6126e7565b99508015610da257610c658d85878a611dfb565b60020b608086015260208501819052610da257610ca17ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618612769565b60020b846080015160020b1480610cde5750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b15610d63578615610d0d578351610d0690610cfb906001906124ef565b6401000276a36122f2565b8452610d5b565b8351610d5890610d1e9060016126e7565b610d3d600173fffd8963efd1fc6a506488495d951d5263988d266127a8565b73ffffffffffffffffffffffffffffffffffffffff16612309565b84525b505050610daa565b610d708460800151611883565b73ffffffffffffffffffffffffffffffffffffffff168452610d948d85878a611dfb565b60020b608086015260208501525b505050610a33565b604081015190519550151593505050505b93509350939050565b6000806000610dd3868661174d565b905060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1d57600080fd5b505afa158015610e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e55919061253b565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9f57600080fd5b505afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed7919061253b565b9050610f0e6040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808a73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b158015610f5657600080fd5b505afa158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e9190612582565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610fff57600080fd5b505afa158015611013573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103791906125d7565b6fffffffffffffffffffffffffffffffff168152602001600081526020018a81526020018761110a576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8e169063f30dba939060240160c06040518083038186803b1580156110c957600080fd5b505afa1580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110191906125f2565b6020015161110c565b825b60020b8152509250505061111f81611802565b15611134575160009550935061041192505050565b60608101511561148857600061114d8260800151611883565b73ffffffffffffffffffffffffffffffffffffffff169050600080861561124057600061119361118886602001518688600001516000611ccb565b8862ffffff16611de1565b9050808560600151116112045760006111d06111b887606001518a62ffffff16612318565b6c010000000000000000000000008860200151611c70565b86516111dc91906124ef565b90506111f386602001518288600001516001611c16565b90865260006060870152925061123a565b61121985602001518587600001516000611c16565b84865260608601805191945082916112329083906124ef565b905250600191505b5061136a565b600061125a61118886602001518760000151876000611c16565b905080856060015111611332576000606060ff168660200151901b905060006112ab8288600001516112958a606001518d62ffffff16612318565b8a516112a191906126aa565b610ac290866124ef565b9050808760000151111580156112c057508581105b61130a576112f1826112db89606001518c62ffffff16612318565b89516112e7908661272e565b610afe91906124ef565b73ffffffffffffffffffffffffffffffffffffffff1690505b61131f87602001518860000151836001611ccb565b9087526000606088015293506113689050565b61134785602001518660000151866000611ccb565b84865260608601805191945082916113609083906124ef565b905250600191505b505b611374828a6126e7565b98508015611480576113888c85878a611dfb565b60020b608086015260208501819052611480576113c47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618612769565b60020b846080015160020b14806114015750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b1561144157861561142557835161141e90610cfb906001906124ef565b8452611439565b835161143690610d1e9060016126e7565b84525b505050611488565b61144e8460800151611883565b73ffffffffffffffffffffffffffffffffffffffff1684526114728c85878a611dfb565b60020b608086015260208501525b505050611134565b80516060820151909550156114fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e54204f555450555400000000000000000000000000604482015260640160405180910390fd5b50505050935093915050565b600073ffffffffffffffffffffffffffffffffffffffff82161561152d5781611547565b60005473ffffffffffffffffffffffffffffffffffffffff165b90506000805b84811015611743578585828181106115675761156761241e565b905060200201602081019061157c919061244d565b91508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156115db57600080fd5b505afa1580156115ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611613919061246a565b73ffffffffffffffffffffffffffffffffffffffff16146116b1578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561167457600080fd5b505afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac919061246a565b61172f565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156116f757600080fd5b505afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f919061246a565b92508061173b816124b6565b91505061154d565b50505b9392505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ac57600080fd5b505afa1580156117c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e4919061246a565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b60208101516000901561181757506000919050565b608082015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618148061187d57506118707ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618612769565b60020b826080015160020b145b92915050565b60008060008360020b1261189a578260020b6118a7565b8260020b6118a7906127dd565b90506118d27ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618612769565b62ffffff16811115611910576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001821661193157700100000000000000000000000000000000611943565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611977576ffff97272373d413259a46990580e213a0260801c5b6004821615611996576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156119b5576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156119d4576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156119f3576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611a12576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611a31576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611a51576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611a71576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611a91576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611ab1576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611ad1576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611af1576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611b11576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611b31576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611b52576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611b72576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611b91576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611bae576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611bed57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81611be957611be96126ff565b0490505b640100000000810615611c01576001611c04565b60005b60ff16602082901c0192505050919050565b60008115611c4557611c3e611c32606087901b86860386611c70565b85808204910615150190565b9050611c68565b83611c57606087901b82860386611d10565b81611c6457611c646126ff565b0490505b949350505050565b6000611c7d848484611d10565b90508180611c8d57611c8d6126ff565b83850915611746577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110611cc157600080fd5b6001019392505050565b60008115611ced57611c3e858585036c01000000000000000000000000611c70565b611d07858585036c01000000000000000000000000611d10565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611d685760008411611d5d57600080fd5b508290049050611746565b808411611d7457600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000611df18383620f4240611c70565b61174690846124ef565b60008082156120775760028460020b866080015160020b81611e1f57611e1f6126ff565b0560020b81611e3057611e306126ff565b0760020b611f025760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015611ea757600080fd5b505afa158015611ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edf91906125f2565b604001516fffffffffffffffffffffffffffffffff168560200151039150611fc8565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015611f7157600080fd5b505afa158015611f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa991906125f2565b604001516fffffffffffffffffffffffffffffffff1685602001510191505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561203757600080fd5b505afa15801561204b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206f91906125f2565b5190506122e9565b60028460020b866080015160020b81612092576120926126ff565b0560020b816120a3576120a36126ff565b0760020b6121755760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561211a57600080fd5b505afa15801561212e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215291906125f2565b604001516fffffffffffffffffffffffffffffffff16856020015101915061223b565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b1580156121e457600080fd5b505afa1580156121f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221c91906125f2565b604001516fffffffffffffffffffffffffffffffff1685602001510391505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b1580156122aa57600080fd5b505afa1580156122be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e291906125f2565b6020015190505b94509492505050565b6000818310156123025781611746565b5090919050565b60008183106123025781611746565b600061174683620f4240610ac285826124ef565b73ffffffffffffffffffffffffffffffffffffffff8116811461234e57600080fd5b50565b6000806000806060858703121561236757600080fd5b843567ffffffffffffffff8082111561237f57600080fd5b818701915087601f83011261239357600080fd5b8135818111156123a257600080fd5b8860208260051b85010111156123b757600080fd5b602092830196509450508501356123cd8161232c565b9396929550929360400135925050565b6000806000606084860312156123f257600080fd5b83356123fd8161232c565b9250602084013561240d8161232c565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561245f57600080fd5b81356117468161232c565b60006020828403121561247c57600080fd5b81516117468161232c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124e8576124e8612487565b5060010190565b60008282101561250157612501612487565b500390565b60008161251557612515612487565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561254d57600080fd5b815162ffffff8116811461174657600080fd5b805161256b8161232c565b919050565b8051600281900b811461256b57600080fd5b6000806040838503121561259557600080fd5b82516125a08161232c565b91506125ae60208401612570565b90509250929050565b80516fffffffffffffffffffffffffffffffff8116811461256b57600080fd5b6000602082840312156125e957600080fd5b611746826125b7565b600060c0828403121561260457600080fd5b60405160c0810181811067ffffffffffffffff8211171561264e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405261265a83612570565b815261266860208401612570565b6020820152612679604084016125b7565b6040820152606083015160608201526080830151608082015261269e60a08401612560565b60a08201529392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126e2576126e2612487565b500290565b600082198211156126fa576126fa612487565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612764577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000081141561279f5761279f612487565b60000392915050565b600073ffffffffffffffffffffffffffffffffffffffff838116908316818110156127d5576127d5612487565b039392505050565b60007f800000000000000000000000000000000000000000000000000000000000000082141561280f5761280f612487565b506000039056fea26469706673582212200e61bbf083268460262609f5d6053eb485478ed7b9d43f5e6cd9e5bda118c5f364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806375a844a01161005057806375a844a0146100d2578063beba5d3f146100e5578063f2428621146100f857600080fd5b80635213f13b1461006c5780636ecc5794146100aa575b600080fd5b61007f61007a366004612351565b61013d565b6040805194855260208501939093529015159183019190915260608201526080015b60405180910390f35b6100bd6100b83660046123dd565b6103c3565b604080519283526020830191909152016100a1565b6100bd6100e0366004612351565b610419565b61007f6100f33660046123dd565b61064d565b6000546101189073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a1565b60008080808573ffffffffffffffffffffffffffffffffffffffff811615610165578661017f565b60005473ffffffffffffffffffffffffffffffffffffffff165b96508594506000805b8981101561039f5760008b8b838181106101a4576101a461241e565b90506020020160208101906101b9919061244d565b90506101c6818b8a6106bd565b9199509750925082156101d857600195505b8973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561023557600080fd5b505afa158015610249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026d919061246a565b73ffffffffffffffffffffffffffffffffffffffff161461030b578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ce57600080fd5b505afa1580156102e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610306919061246a565b610389565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561035157600080fd5b505afa158015610365573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610389919061246a565b9950508080610397906124b6565b915050610188565b5083156103b6576103b28a8a8489610419565b5092505b5050945094509450949050565b60008061040c8573ffffffffffffffffffffffffffffffffffffffff8616156103ec5785610406565b60005473ffffffffffffffffffffffffffffffffffffffff165b85610dc4565b915091505b935093915050565b6000806000610429878787611509565b905083865b801561063f57600089896104436001856124ef565b8181106104525761045261241e565b9050602002016020810190610467919061244d565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe919061246a565b73ffffffffffffffffffffffffffffffffffffffff161461059c578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561055f57600080fd5b505afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610597919061246a565b61061a565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156105e257600080fd5b505afa1580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a919061246a565b9350610627818585610dc4565b9550925081905061063781612506565b91505061042e565b509791965090945050505050565b60008080806106988773ffffffffffffffffffffffffffffffffffffffff8816156106785787610692565b60005473ffffffffffffffffffffffffffffffffffffffff165b876106bd565b9195509350915081156106b4576106b08787866103c3565b5090505b93509350935093565b6000806000806106cd878761174d565b905060008773ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071757600080fd5b505afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f919061253b565b905060008873ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079957600080fd5b505afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d1919061253b565b90506108086040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808b73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108889190612582565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f957600080fd5b505afa15801561090d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093191906125d7565b6fffffffffffffffffffffffffffffffff1681526020018b81526020016000815260200187610a04576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8f169063f30dba939060240160c06040518083038186803b1580156109c357600080fd5b505afa1580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb91906125f2565b60200151610a06565b825b60020b81525092505050610a1981611802565b15610a33575160009650945050508415159150610dbb9050565b604081015115610daa576000610a4c8260800151611883565b73ffffffffffffffffffffffffffffffffffffffff1690506000808615610b86576000610a8485602001518587600001516000611c16565b905080856040015111610b4a5760208501518551604087015160609290921b91600091610ac791849190610ab890826126aa565b610ac290866126e7565b611c70565b9050808611158015610ad95750865181105b610b225760408701518751610b09918491610af4908361272e565b610afe91906126e7565b808204910615150190565b73ffffffffffffffffffffffffffffffffffffffff1690505b610b3787602001518289600001516000611ccb565b908752600060408801529350610b809050565b610b5f85602001518587600001516000611ccb565b848652604086018051919450600193508291610b7c9083906124ef565b9052505b50610c38565b6000610b9d85602001518660000151866000611ccb565b905080856040015111610c00576000610bcc86604001516c010000000000000000000000008860200151611d10565b8651610bd891906126e7565b9050610bef86602001518760000151836000611c16565b908652600060408701529250610c36565b610c1585602001518660000151866000611c16565b848652604086018051919450600193508291610c329083906124ef565b9052505b505b610c47828762ffffff16611de1565b610c51908b6126e7565b99508015610da257610c658d85878a611dfb565b60020b608086015260208501819052610da257610ca17ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618612769565b60020b846080015160020b1480610cde5750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b15610d63578615610d0d578351610d0690610cfb906001906124ef565b6401000276a36122f2565b8452610d5b565b8351610d5890610d1e9060016126e7565b610d3d600173fffd8963efd1fc6a506488495d951d5263988d266127a8565b73ffffffffffffffffffffffffffffffffffffffff16612309565b84525b505050610daa565b610d708460800151611883565b73ffffffffffffffffffffffffffffffffffffffff168452610d948d85878a611dfb565b60020b608086015260208501525b505050610a33565b604081015190519550151593505050505b93509350939050565b6000806000610dd3868661174d565b905060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1d57600080fd5b505afa158015610e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e55919061253b565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9f57600080fd5b505afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed7919061253b565b9050610f0e6040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808a73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b158015610f5657600080fd5b505afa158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e9190612582565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610fff57600080fd5b505afa158015611013573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103791906125d7565b6fffffffffffffffffffffffffffffffff168152602001600081526020018a81526020018761110a576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8e169063f30dba939060240160c06040518083038186803b1580156110c957600080fd5b505afa1580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110191906125f2565b6020015161110c565b825b60020b8152509250505061111f81611802565b15611134575160009550935061041192505050565b60608101511561148857600061114d8260800151611883565b73ffffffffffffffffffffffffffffffffffffffff169050600080861561124057600061119361118886602001518688600001516000611ccb565b8862ffffff16611de1565b9050808560600151116112045760006111d06111b887606001518a62ffffff16612318565b6c010000000000000000000000008860200151611c70565b86516111dc91906124ef565b90506111f386602001518288600001516001611c16565b90865260006060870152925061123a565b61121985602001518587600001516000611c16565b84865260608601805191945082916112329083906124ef565b905250600191505b5061136a565b600061125a61118886602001518760000151876000611c16565b905080856060015111611332576000606060ff168660200151901b905060006112ab8288600001516112958a606001518d62ffffff16612318565b8a516112a191906126aa565b610ac290866124ef565b9050808760000151111580156112c057508581105b61130a576112f1826112db89606001518c62ffffff16612318565b89516112e7908661272e565b610afe91906124ef565b73ffffffffffffffffffffffffffffffffffffffff1690505b61131f87602001518860000151836001611ccb565b9087526000606088015293506113689050565b61134785602001518660000151866000611ccb565b84865260608601805191945082916113609083906124ef565b905250600191505b505b611374828a6126e7565b98508015611480576113888c85878a611dfb565b60020b608086015260208501819052611480576113c47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618612769565b60020b846080015160020b14806114015750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b1561144157861561142557835161141e90610cfb906001906124ef565b8452611439565b835161143690610d1e9060016126e7565b84525b505050611488565b61144e8460800151611883565b73ffffffffffffffffffffffffffffffffffffffff1684526114728c85878a611dfb565b60020b608086015260208501525b505050611134565b80516060820151909550156114fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e54204f555450555400000000000000000000000000604482015260640160405180910390fd5b50505050935093915050565b600073ffffffffffffffffffffffffffffffffffffffff82161561152d5781611547565b60005473ffffffffffffffffffffffffffffffffffffffff165b90506000805b84811015611743578585828181106115675761156761241e565b905060200201602081019061157c919061244d565b91508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156115db57600080fd5b505afa1580156115ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611613919061246a565b73ffffffffffffffffffffffffffffffffffffffff16146116b1578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561167457600080fd5b505afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac919061246a565b61172f565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156116f757600080fd5b505afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f919061246a565b92508061173b816124b6565b91505061154d565b50505b9392505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ac57600080fd5b505afa1580156117c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e4919061246a565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b60208101516000901561181757506000919050565b608082015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618148061187d57506118707ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618612769565b60020b826080015160020b145b92915050565b60008060008360020b1261189a578260020b6118a7565b8260020b6118a7906127dd565b90506118d27ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618612769565b62ffffff16811115611910576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001821661193157700100000000000000000000000000000000611943565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611977576ffff97272373d413259a46990580e213a0260801c5b6004821615611996576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156119b5576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156119d4576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156119f3576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611a12576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611a31576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611a51576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611a71576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611a91576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611ab1576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611ad1576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611af1576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611b11576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611b31576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611b52576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611b72576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611b91576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611bae576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611bed57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81611be957611be96126ff565b0490505b640100000000810615611c01576001611c04565b60005b60ff16602082901c0192505050919050565b60008115611c4557611c3e611c32606087901b86860386611c70565b85808204910615150190565b9050611c68565b83611c57606087901b82860386611d10565b81611c6457611c646126ff565b0490505b949350505050565b6000611c7d848484611d10565b90508180611c8d57611c8d6126ff565b83850915611746577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110611cc157600080fd5b6001019392505050565b60008115611ced57611c3e858585036c01000000000000000000000000611c70565b611d07858585036c01000000000000000000000000611d10565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611d685760008411611d5d57600080fd5b508290049050611746565b808411611d7457600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000611df18383620f4240611c70565b61174690846124ef565b60008082156120775760028460020b866080015160020b81611e1f57611e1f6126ff565b0560020b81611e3057611e306126ff565b0760020b611f025760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015611ea757600080fd5b505afa158015611ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edf91906125f2565b604001516fffffffffffffffffffffffffffffffff168560200151039150611fc8565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015611f7157600080fd5b505afa158015611f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa991906125f2565b604001516fffffffffffffffffffffffffffffffff1685602001510191505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561203757600080fd5b505afa15801561204b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206f91906125f2565b5190506122e9565b60028460020b866080015160020b81612092576120926126ff565b0560020b816120a3576120a36126ff565b0760020b6121755760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561211a57600080fd5b505afa15801561212e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215291906125f2565b604001516fffffffffffffffffffffffffffffffff16856020015101915061223b565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b1580156121e457600080fd5b505afa1580156121f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221c91906125f2565b604001516fffffffffffffffffffffffffffffffff1685602001510391505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b1580156122aa57600080fd5b505afa1580156122be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e291906125f2565b6020015190505b94509492505050565b6000818310156123025781611746565b5090919050565b60008183106123025781611746565b600061174683620f4240610ac285826124ef565b73ffffffffffffffffffffffffffffffffffffffff8116811461234e57600080fd5b50565b6000806000806060858703121561236757600080fd5b843567ffffffffffffffff8082111561237f57600080fd5b818701915087601f83011261239357600080fd5b8135818111156123a257600080fd5b8860208260051b85010111156123b757600080fd5b602092830196509450508501356123cd8161232c565b9396929550929360400135925050565b6000806000606084860312156123f257600080fd5b83356123fd8161232c565b9250602084013561240d8161232c565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561245f57600080fd5b81356117468161232c565b60006020828403121561247c57600080fd5b81516117468161232c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124e8576124e8612487565b5060010190565b60008282101561250157612501612487565b500390565b60008161251557612515612487565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561254d57600080fd5b815162ffffff8116811461174657600080fd5b805161256b8161232c565b919050565b8051600281900b811461256b57600080fd5b6000806040838503121561259557600080fd5b82516125a08161232c565b91506125ae60208401612570565b90509250929050565b80516fffffffffffffffffffffffffffffffff8116811461256b57600080fd5b6000602082840312156125e957600080fd5b611746826125b7565b600060c0828403121561260457600080fd5b60405160c0810181811067ffffffffffffffff8211171561264e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405261265a83612570565b815261266860208401612570565b6020820152612679604084016125b7565b6040820152606083015160608201526080830151608082015261269e60a08401612560565b60a08201529392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126e2576126e2612487565b500290565b600082198211156126fa576126fa612487565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612764577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000081141561279f5761279f612487565b60000392915050565b600073ffffffffffffffffffffffffffffffffffffffff838116908316818110156127d5576127d5612487565b039392505050565b60007f800000000000000000000000000000000000000000000000000000000000000082141561280f5761280f612487565b506000039056fea26469706673582212200e61bbf083268460262609f5d6053eb485478ed7b9d43f5e6cd9e5bda118c5f364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateExactInput(address[],address,uint256)": {
        "returns": {
          "amountOut": "the maximum output",
          "maximumAmountIn": "Maximum input that the path can handle",
          "overInput": "Check if more input has been given to receive the corresponding amountOut",
          "price": "    price after swapping"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateExactInput(address[],address,uint256)": {
        "notice": "Calculate the maximum output that can be received when swapped according to the given path."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19544,
        "contract": "contracts/misc/safeSwap/SafeSwapHelper.sol:SafeSwapHelper",
        "label": "wETH",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}