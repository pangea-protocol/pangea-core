{
  "address": "0xeBa3761C793310E9F814AFcF5d4E7d83FbDc5F14",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidConfig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeAndTickSpacing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorisedDeployer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorisedManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongTokenOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "tickSpacing",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "ok",
          "type": "bool"
        }
      ],
      "name": "UpdateAvailableFeeAndTickSpacing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateDefaultProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "UpdatePoolImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UpdateRewardToken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "name": "availableFeeAndTickSpacing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "configAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_deployData",
          "type": "bytes"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "pairPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolLogger",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLogger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "poolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "tickSpacing",
          "type": "uint24"
        },
        {
          "internalType": "bool",
          "name": "ok",
          "type": "bool"
        }
      ],
      "name": "setAvailableFeeAndTickSpacing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setDefaultProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nextImplementation",
          "type": "address"
        }
      ],
      "name": "setPoolImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPoolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "upgradePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "upgradePoolsAndCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34d721a425c718314ea62a855fdeb4a3171c20874465027c11593f1fe0eb4a97",
  "receipt": {
    "to": null,
    "from": "0x2A2F23ff33671361010D357529BDF0adca9416Fc",
    "contractAddress": "0xeBa3761C793310E9F814AFcF5d4E7d83FbDc5F14",
    "transactionIndex": 0,
    "gasUsed": "3998946",
    "logsBloom": "0x
    "blockHash": "0xaa52674ac365a97b49e3ec128e685444d441235da8500a3b2cc65a1875870adc",
    "transactionHash": "0x34d721a425c718314ea62a855fdeb4a3171c20874465027c11593f1fe0eb4a97",
    "logs": [],
    "blockNumber": 111618507,
    "cumulativeGasUsed": "3998946",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "c1064afc934590b178375e1b163afdd3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeAndTickSpacing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorisedDeployer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorisedManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongTokenOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"tickSpacing\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"UpdateAvailableFeeAndTickSpacing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"UpdateDefaultProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"UpdatePoolImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"UpdateProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdateRewardToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"availableFeeAndTickSpacing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_deployData\",\"type\":\"bytes\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pairPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolLogger\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLogger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"tickSpacing\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"setAvailableFeeAndTickSpacing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextImplementation\",\"type\":\"address\"}],\"name\":\"setPoolImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"upgradePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"upgradePoolsAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"configAddress\":{\"params\":{\"data\":\"abi.encode(address tokenA, address tokenB, uint24 swapFee, uint24 tickSpacing);\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configAddress(bytes32)\":{\"notice\":\"Return the address of the pool created with the given config data\"},\"getPoolAddress(uint256)\":{\"notice\":\"Return the address of pool by index\"},\"getPools(address,address,uint256,uint256)\":{\"notice\":\"Return the list of pools composed of two tokens\"},\"isPool(address)\":{\"notice\":\"Return whether the pool is created by the factory\"},\"poolsCount(address,address)\":{\"notice\":\"Return the number of pools composed of two tokens\"},\"totalPoolsCount()\":{\"notice\":\"Return the number of pools deployed from factory\"}},\"notice\":\"Contract for deploying Reward Liquidity Pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/custom/miningPool/MiningPoolFactory.sol\":\"MiningPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/custom/common/interfaces/ICustomPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICustomPool {\\n    function initialize(bytes memory _deployData, address _masterDeployer) external;\\n}\\n\",\"keccak256\":\"0x5057d8b09ec04a7fe9a61e9ca2acb9de30721c696af6a72ae724331cef48cadc\",\"license\":\"GPL-3.0\"},\"contracts/custom/common/interfaces/IEIP173Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IEIP173Proxy {\\n    function proxyAdmin() external view returns (address);\\n\\n    function transferProxyAdmin(address newAdmin) external;\\n\\n    function upgradeTo(address newImplementation) external;\\n\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\",\"keccak256\":\"0x3582bdb5f54a6574e482a32a8fc26f12776c94a653b01a297eb261d669d5fb99\",\"license\":\"GPL-3.0\"},\"contracts/custom/common/vendor/EIP173Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\n\\ninterface ERC165 {\\n    function supportsInterface(bytes4 id) external view returns (bool);\\n}\\n\\n///@notice Proxy implementing EIP173 for ownership management\\ncontract EIP173Proxy is EIP1967Proxy {\\n    // ////////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////\\n\\n    event ProxyAdminTransferred(address indexed previousAdmin, address indexed newAdmin);\\n\\n    // /////////////////////// CONSTRUCTOR //////////////////////////////////////////////////////////////////////\\n\\n    constructor(\\n        address implementationAddress,\\n        address adminAddress,\\n        bytes memory data\\n    ) payable {\\n        _setImplementation(implementationAddress, data);\\n        _setProxyAdmin(adminAddress);\\n    }\\n\\n    // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\\n\\n    function proxyAdmin() external view returns (address) {\\n        return _proxyAdmin();\\n    }\\n\\n    function supportsInterface(bytes4 id) external view returns (bool) {\\n        if (id == 0x01ffc9a7 || id == 0x7f5828d0) {\\n            return true;\\n        }\\n        if (id == 0xFFFFFFFF) {\\n            return false;\\n        }\\n\\n        ERC165 implementation;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            implementation := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\n        }\\n\\n        // Technically this is not standard compliant as ERC-165 require 30,000 gas which that call cannot ensure\\n        // because it is itself inside `supportsInterface` that might only get 30,000 gas.\\n        // In practise this is unlikely to be an issue.\\n        try implementation.supportsInterface(id) returns (bool support) {\\n            return support;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function transferProxyAdmin(address newAdmin) external onlyProxyAdmin {\\n        _setProxyAdmin(newAdmin);\\n    }\\n\\n    function upgradeTo(address newImplementation) external onlyProxyAdmin {\\n        _setImplementation(newImplementation, \\\"\\\");\\n    }\\n\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable onlyProxyAdmin {\\n        _setImplementation(newImplementation, data);\\n    }\\n\\n    // /////////////////////// MODIFIERS ////////////////////////////////////////////////////////////////////////\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\\n\\n    function _proxyAdmin() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n\\n    function _setProxyAdmin(address newAdmin) internal {\\n        address previousAdmin = _proxyAdmin();\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            sstore(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103, newAdmin)\\n        }\\n        emit ProxyAdminTransferred(previousAdmin, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0x781ec615fd7938034fe4b1b5f1172dc88e4d50a2daad009f7302cc2e7d2e1ff2\",\"license\":\"GPL-3.0\"},\"contracts/custom/common/vendor/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0;\\n\\nabstract contract EIP1967Proxy {\\n    // /////////////////////// EVENTS ///////////////////////////////////////////////////////////////////////////\\n\\n    event ProxyImplementationUpdated(address indexed previousImplementation, address indexed newImplementation);\\n\\n    // ///////////////////// EXTERNAL ///////////////////////////////////////////////////////////////////////////\\n\\n    // prettier-ignore\\n    receive() external payable virtual {\\n        revert(\\\"ETHER_REJECTED\\\");\\n        // explicit reject by default\\n    }\\n\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    // ///////////////////////// INTERNAL //////////////////////////////////////////////////////////////////////\\n\\n    function _fallback() internal {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let implementationAddress := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\n            calldatacopy(0x0, 0x0, calldatasize())\\n            let success := delegatecall(gas(), implementationAddress, 0x0, calldatasize(), 0, 0)\\n            let retSz := returndatasize()\\n            returndatacopy(0, 0, retSz)\\n            switch success\\n            case 0 {\\n                revert(0, retSz)\\n            }\\n            default {\\n                return(0, retSz)\\n            }\\n        }\\n    }\\n\\n    function _setImplementation(address newImplementation, bytes memory data) internal {\\n        address previousImplementation;\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            previousImplementation := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\n        }\\n\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            sstore(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc, newImplementation)\\n        }\\n\\n        emit ProxyImplementationUpdated(previousImplementation, newImplementation);\\n\\n        if (data.length > 0) {\\n            (bool success, ) = newImplementation.delegatecall(data);\\n            if (!success) {\\n                assembly {\\n                    // This assembly ensure the revert contains the exact string data\\n                    let returnDataSize := returndatasize()\\n                    returndatacopy(0, 0, returnDataSize)\\n                    revert(0, returnDataSize)\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8babec54779d0d95da4b9e73bab1f16be4cf5d6fd19e32727a605e7c9318ae0\",\"license\":\"GPL-3.0\"},\"contracts/custom/miningPool/MiningPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IPoolFactoryCallee.sol\\\";\\nimport \\\"../../interfaces/IConcentratedLiquidityPoolFactory.sol\\\";\\nimport \\\"../common/vendor/EIP173Proxy.sol\\\";\\nimport \\\"../common/interfaces/IEIP173Proxy.sol\\\";\\nimport \\\"../common/interfaces/ICustomPool.sol\\\";\\nimport \\\"../../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"./interfaces/IProtocolFeeSetter.sol\\\";\\nimport \\\"./interfaces/IMiningPool.sol\\\";\\n\\n/// @notice Contract for deploying Reward Liquidity Pool\\ncontract MiningPoolFactory is OwnableUpgradeable, IConcentratedLiquidityPoolFactory {\\n    address public masterDeployer;\\n    address public poolLogger;\\n    address public manager;\\n    address private poolImplementation;\\n\\n    mapping(address => mapping(address => address[])) public pools;\\n    mapping(bytes32 => address) public configAddress;\\n    mapping(bytes32 => bool) private availableConfigs; // useless fields...\\n    mapping(address => bool) public isPool;\\n\\n    address[] private poolArray;\\n    uint256 public defaultProtocolFee;\\n\\n    mapping(uint24 => mapping(uint24 => bool)) public availableFeeAndTickSpacing;\\n\\n    event UpdatePoolImplementation(address previousImplementation, address newImplementation);\\n    event UpdateProtocolFee(address pool, uint256 protocolFee);\\n    event UpdateDefaultProtocolFee(uint256 protocolFee);\\n    event UpdateAvailableFeeAndTickSpacing(uint24 fee, uint24 tickSpacing, bool ok);\\n    event UpdateRewardToken(address pool, address token);\\n\\n    error WrongTokenOrder();\\n    error UnauthorisedDeployer();\\n    error UnauthorisedManager();\\n    error InvalidToken();\\n    error InvalidConfig();\\n    error ZeroAddress();\\n    error InvalidFeeAndTickSpacing();\\n    error InvalidPool();\\n\\n    modifier onlyManager() {\\n        if (manager != _msgSender()) revert UnauthorisedManager();\\n        _;\\n    }\\n\\n    function initialize(\\n        address _implementation,\\n        address _masterDeployer,\\n        address _poolLogger\\n    ) external initializer {\\n        if (_implementation == address(0)) revert ZeroAddress();\\n        if (_masterDeployer == address(0)) revert ZeroAddress();\\n        if (_poolLogger == address(0)) revert ZeroAddress();\\n        poolImplementation = _implementation;\\n        masterDeployer = _masterDeployer;\\n        poolLogger = _poolLogger;\\n\\n        defaultProtocolFee = 1000;\\n\\n        availableFeeAndTickSpacing[10_000][100] = true; // swapFee = 1.0%  / tickSpacing = 100\\n        availableFeeAndTickSpacing[2_000][20] = true; // swapFee = 0.2%  / tickSpacing =  20\\n        /// @dev why not set the tick spacing to 1? To avoid truncation errors on the client side(UX).\\n        availableFeeAndTickSpacing[600][2] = true; // swapFee = 0.06% / tickSpacing =   2\\n        availableFeeAndTickSpacing[100][2] = true; // swapFee = 0.01% / tickSpacing =   2\\n\\n        __Ownable_init();\\n        manager = _msgSender();\\n    }\\n\\n    function deployPool(bytes memory _deployData) external returns (address pool) {\\n        if (msg.sender != masterDeployer) revert UnauthorisedDeployer();\\n\\n        (address tokenA, address tokenB, uint24 swapFee, uint160 price, uint24 tickSpacing) = abi.decode(\\n            _deployData,\\n            (address, address, uint24, uint160, uint24)\\n        );\\n\\n        if (tokenA > tokenB) revert WrongTokenOrder();\\n        if (!availableFeeAndTickSpacing[swapFee][tickSpacing]) revert InvalidFeeAndTickSpacing();\\n        address[] memory _pools = pools[tokenA][tokenB];\\n\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            if (\\n                IConcentratedLiquidityPool(_pools[i]).tickSpacing() == tickSpacing &&\\n                IConcentratedLiquidityPool(_pools[i]).swapFee() == swapFee\\n            ) {\\n                revert InvalidConfig();\\n            }\\n        }\\n\\n        // Strips any extra data.\\n        // Don't include price in _deployData to enable predictable address calculation.\\n        _deployData = abi.encode(tokenA, tokenB, address(0), swapFee, tickSpacing);\\n        bytes32 salt = keccak256(_deployData);\\n\\n        pool = address(new EIP173Proxy{salt: salt}(poolImplementation, address(this), \\\"\\\"));\\n        ICustomPool(pool).initialize(_deployData, masterDeployer);\\n\\n        configAddress[salt] = pool;\\n        pools[tokenA][tokenB].push(pool);\\n        pools[tokenB][tokenA].push(pool);\\n        isPool[pool] = true;\\n        poolArray.push(pool);\\n\\n        IPoolFactoryCallee(pool).setPrice(price);\\n        IPoolFactoryCallee(pool).registerLogger(poolLogger);\\n        IProtocolFeeSetter(pool).setProtocolFee(defaultProtocolFee);\\n    }\\n\\n    function totalPoolsCount() external view returns (uint256 total) {\\n        return poolArray.length;\\n    }\\n\\n    function getPoolAddress(uint256 idx) external view returns (address pool) {\\n        return poolArray[idx];\\n    }\\n\\n    function poolsCount(address token0, address token1) external view returns (uint256 count) {\\n        count = pools[token0][token1].length;\\n    }\\n\\n    function getPools(\\n        address token0,\\n        address token1,\\n        uint256 startIndex,\\n        uint256 count\\n    ) external view returns (address[] memory pairPools) {\\n        pairPools = new address[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            pairPools[i] = pools[token0][token1][startIndex + i];\\n        }\\n    }\\n\\n    function setAvailableFeeAndTickSpacing(\\n        uint24 fee,\\n        uint24 tickSpacing,\\n        bool ok\\n    ) external onlyManager {\\n        availableFeeAndTickSpacing[fee][tickSpacing] = ok;\\n\\n        emit UpdateAvailableFeeAndTickSpacing(fee, tickSpacing, ok);\\n    }\\n\\n    function setRewardToken(address pool, address token) external onlyManager {\\n        if (!isPool[pool]) revert InvalidPool();\\n        IMiningPool(pool).registerRewardToken(token);\\n\\n        emit UpdateRewardToken(pool, token);\\n    }\\n\\n    function setDefaultProtocolFee(uint256 protocolFee) external onlyManager {\\n        defaultProtocolFee = protocolFee;\\n\\n        emit UpdateDefaultProtocolFee(protocolFee);\\n    }\\n\\n    function setProtocolFee(address pool, uint256 protocolFee) external onlyManager {\\n        IProtocolFeeSetter(pool).setProtocolFee(protocolFee);\\n\\n        emit UpdateProtocolFee(pool, protocolFee);\\n    }\\n\\n    function setManager(address _manager) external onlyManager {\\n        manager = _manager;\\n    }\\n\\n    function setPoolImplementation(address nextImplementation) external onlyManager {\\n        emit UpdatePoolImplementation(poolImplementation, nextImplementation);\\n        poolImplementation = nextImplementation;\\n    }\\n\\n    function upgradePools(address[] memory _pools) external onlyManager {\\n        address _implementation = poolImplementation;\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            IEIP173Proxy(_pools[i]).upgradeTo(_implementation);\\n        }\\n    }\\n\\n    function upgradePoolsAndCall(address[] memory _pools, bytes[] calldata datas) external onlyManager {\\n        address _implementation = poolImplementation;\\n        require(_pools.length == datas.length, \\\"mismatching array length\\\");\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            IEIP173Proxy(_pools[i]).upgradeToAndCall(_implementation, datas[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c56802a79b2d10881876193d58ee56cf7d5e068e3257595c8e0fdfe8f1ab16f\",\"license\":\"GPL-3.0\"},\"contracts/custom/miningPool/interfaces/IMiningPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMiningPoolStruct.sol\\\";\\nimport \\\"../../../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../../common/interfaces/ICustomPool.sol\\\";\\n\\n/// @notice Mining Pool interface.\\ninterface IMiningPool is ICustomPool, IMiningPoolStruct, IConcentratedLiquidityPoolStruct, IConcentratedLiquidityPool {\\n\\n    function registerRewardToken(address token) external;\\n\\n    /// @notice Look up reward Growth Outside values about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function rewardGrowthOutsidePerTicks(int24 tick) external view returns (uint256);\\n\\n    /// @notice Returns the reward information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positionRewards(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (PositionReward memory);\\n\\n    /// @notice reward Token\\n    function rewardToken() external view returns (address);\\n\\n    /// @notice The reward growth collected per unit of liquidity for the entire life of the pool\\n    function rewardGrowthGlobal() external view returns (uint256);\\n\\n    /// @dev deposit Reward Token\\n    function depositReward(uint256 amount) external view returns (uint256);\\n\\n    /// @notice reward growth inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeRewardGrowth(int24 lower, int24 upper) external view returns (uint256 rewardGrowthInside);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredReward How much amount want be withdrawn from the rewards owed\\n    // @dev If desired rewards exceeds the possible amount, only the possible amount will be returned.\\n    function collectReward(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredReward\\n    ) external returns (uint256 rewardAmount);\\n}\\n\",\"keccak256\":\"0x79330f0fc2c89eab11fbb93a6c9ba158dc9d920f81c15919784a3047da8e1020\",\"license\":\"GPL-3.0\"},\"contracts/custom/miningPool/interfaces/IMiningPoolStruct.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMiningPoolStruct {\\n    struct PositionReward {\\n        /// @dev reward growth of rewardToken inside the tick range as of the last mint/burn/collect\\n        uint256 rewardGrowthInsideLast;\\n        /// @dev computed amount of reward owed to the position as of the last mint/burn/collect\\n        uint128 rewardOwed;\\n    }\\n}\\n\",\"keccak256\":\"0x9a6c523c7c75dc5c1fae48d077389997c39a315cf0dad8fa62c39f42cac824ac\",\"license\":\"GPL-3.0\"},\"contracts/custom/miningPool/interfaces/IProtocolFeeSetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IProtocolFeeSetter {\\n    function setProtocolFee(uint256 _protocolFee) external;\\n}\\n\",\"keccak256\":\"0x77809d19f0aad34a6be16d972dba8dd3986ca00fa1f736c3d7b33cc3249279aa\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice do not use this. it can be easily corrupted\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0xd50187378c243a9523c29c977d6680e377bbc48f801bdc3c5b1eff8db5eee074\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConcentratedLiquidityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IPoolFactory.sol\\\";\\n\\n/// @notice Pool deployment interface.\\ninterface IConcentratedLiquidityPoolFactory is IPoolFactory {\\n    /// @notice create and deploy a pool. if exists, revert.\\n    /// @param deployData abi.encode(address tokenA, address tokenB, uint24 swapFee, uint160 price, uint24 tickSpacing)\\n    function deployPool(bytes calldata deployData) external returns (address pool);\\n\\n    /// @notice Return the address of the pool created with the given config data\\n    /// @param data abi.encode(address tokenA, address tokenB, uint24 swapFee, uint24 tickSpacing);\\n    function configAddress(bytes32 data) external returns (address pool);\\n\\n    /// @notice Return whether the pool is created by the factory\\n    function isPool(address pool) external returns (bool ok);\\n\\n    /// @notice Return the number of pools deployed from factory\\n    function totalPoolsCount() external view returns (uint256 total);\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool);\\n\\n    /// @notice Return the number of pools composed of two tokens\\n    function poolsCount(address token0, address token1) external view returns (uint256 count);\\n\\n    /// @notice Return the list of pools composed of two tokens\\n    function getPools(\\n        address token0,\\n        address token1,\\n        uint256 startIndex,\\n        uint256 count\\n    ) external view returns (address[] memory pairPools);\\n}\\n\",\"keccak256\":\"0x422e7a9d40f2ff07336a72850aba4801bf2ddcde45604ed10b9a363382a4a218\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Pool deployment interface.\\ninterface IPoolFactory {\\n    function deployPool(bytes calldata _deployData) external returns (address pool);\\n\\n    function configAddress(bytes32 data) external returns (address pool);\\n\\n    function isPool(address pool) external returns (bool ok);\\n}\\n\",\"keccak256\":\"0x2a289fce9555b2513f9dbf0b8d7f340db60693a8a50b257f7737ab7beb4c5b92\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolFactoryCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool interface called by factory contract\\ninterface IPoolFactoryCallee {\\n    function setPrice(uint160 price) external;\\n\\n    function registerLogger(address logger) external;\\n}\\n\",\"keccak256\":\"0x18ba424029770d0d9c1dd8750dd4895f71998f54b0c6dfed7bd565cfe2745951\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061334d806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620001c45760003560e01c80636034b5101162000101578063c0c53b8b11620000a3578063d6f74898116200007a578063d6f748981462000460578063e5c8c5721462000477578063f2fde38b146200048e578063f6ab6d9914620004a557600080fd5b8063c0c53b8b1462000411578063cf58879a1462000428578063d0ebdbe7146200044957600080fd5b80638da5cb5b11620000d85780638da5cb5b14620003aa5780639ee6465b14620003c9578063b5b3ca2c14620003fa57600080fd5b80636034b5101462000363578063715018a6146200037a57806371a25812146200038457600080fd5b8063481c6a75116200016b578063566a89af1162000142578063566a89af14620002da5780635b16ebb714620002e35780635bc93d6c146200031a57600080fd5b8063481c6a7514620002815780635159d73c14620002a257806356088ff114620002b957600080fd5b806327c3cae111620001a057806327c3cae1146200023a57806340aee0411462000251578063421bcbdf146200026857600080fd5b8062a5ae2114620001c95780630dfc574b146200020a578063169c4cef1462000223575b600080fd5b620001e0620001da36600462001e26565b620004de565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b620002216200021b36600462001f78565b6200051e565b005b620001e0620002343660046200201a565b620006dc565b620001e06200024b36600462002060565b6200072f565b62000221620002623660046200211c565b62000eef565b62000272606e5481565b60405190815260200162000201565b606754620001e09073ffffffffffffffffffffffffffffffffffffffff1681565b62000221620002b33660046200216f565b62001026565b606654620001e09073ffffffffffffffffffffffffffffffffffffffff1681565b606d5462000272565b62000309620002f4366004620021c5565b606c6020526000908152604090205460ff1681565b604051901515815260200162000201565b620002726200032b366004620021ec565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260696020908152604080832093909416825291909152205490565b620002216200037436600462001e26565b6200110e565b620002216200119b565b6200039b620003953660046200222a565b6200122c565b60405162000201919062002275565b60335473ffffffffffffffffffffffffffffffffffffffff16620001e0565b62000309620003da366004620022d1565b606f60209081526000928352604080842090915290825290205460ff1681565b620002216200040b36600462002304565b62001357565b620002216200042236600462002333565b62001480565b606554620001e09073ffffffffffffffffffffffffffffffffffffffff1681565b620002216200045a366004620021c5565b62001820565b6200022162000471366004620021c5565b620018b9565b6200022162000488366004620021ec565b620019a6565b620002216200049f366004620021c5565b62001b2a565b620001e0620004b636600462001e26565b606a6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6000606d8281548110620004f657620004f66200237a565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b60675473ffffffffffffffffffffffffffffffffffffffff16331462000570576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606854835173ffffffffffffffffffffffffffffffffffffffff909116908214620005fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6d69736d61746368696e67206172726179206c656e677468000000000000000060448201526064015b60405180910390fd5b60005b8451811015620006d5578481815181106200061e576200061e6200237a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634f1ef286838686858181106200065757620006576200237a565b90506020028101906200066b9190620023a9565b6040518463ffffffff1660e01b81526004016200068b9392919062002418565b600060405180830381600087803b158015620006a657600080fd5b505af1158015620006bb573d6000803e3d6000fd5b505050508080620006cc90620024b1565b915050620005ff565b5050505050565b606960205282600052604060002060205281600052604060002081815481106200070557600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60655460009073ffffffffffffffffffffffffffffffffffffffff16331462000784576040517f03781a5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600080600086806020019051810190620007a29190620024ed565b945094509450945094508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16111562000813576040517f30082a1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62ffffff8084166000908152606f602090815260408083209385168352929052205460ff166200086f576040517fb87686b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff80861660009081526069602090815260408083209388168352928152828220805484518184028101840190955280855292939290918301828280156200090157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311620008d5575b5050505050905060005b815181101562000abf578262ffffff168282815181106200093057620009306200237a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200097e57600080fd5b505afa15801562000993573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009b991906200256d565b62ffffff1614801562000a7257508462ffffff16828281518110620009e257620009e26200237a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a3057600080fd5b505afa15801562000a45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a6b91906200256d565b62ffffff16145b1562000aaa576040517f35be3ac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8062000ab681620024b1565b9150506200090b565b506040805173ffffffffffffffffffffffffffffffffffffffff80891660208301528716918101919091526000606082015262ffffff8086166080830152831660a082015260c001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905280516020820120606854919a5091829173ffffffffffffffffffffffffffffffffffffffff1690309062000b6a9062001e18565b73ffffffffffffffffffffffffffffffffffffffff9283168152911660208201526060604082018190526000908201526080018190604051809103906000f590508015801562000bbe573d6000803e3d6000fd5b506065546040517fcce2df0300000000000000000000000000000000000000000000000000000000815291995073ffffffffffffffffffffffffffffffffffffffff808b169263cce2df039262000c1d928e929116906004016200258d565b600060405180830381600087803b15801562000c3857600080fd5b505af115801562000c4d573d6000803e3d6000fd5b5050506000828152606a60209081526040808320805473ffffffffffffffffffffffffffffffffffffffff8e81167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093558d811680875260698087528588208f8416808a52908852868920805460018181018355918b52898b2001805487168817905590895290875285882091885290865284872080548083018255908852868820018054841685179055838752606c90955283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686179055606d805495860181559095527f5006b838207c6a9ae9b84d68f467dd4bb5c305fbfb6b04eab8faaabeec1e18d890930180549093168117909255517fd90bda4e0000000000000000000000000000000000000000000000000000000081529187166004830152915063d90bda4e90602401600060405180830381600087803b15801562000dbd57600080fd5b505af115801562000dd2573d6000803e3d6000fd5b50506066546040517fbd7d1eea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152908b16925063bd7d1eea9150602401600060405180830381600087803b15801562000e4457600080fd5b505af115801562000e59573d6000803e3d6000fd5b5050606e546040517f787dce3d000000000000000000000000000000000000000000000000000000008152600481019190915273ffffffffffffffffffffffffffffffffffffffff8b16925063787dce3d9150602401600060405180830381600087803b15801562000eca57600080fd5b505af115801562000edf573d6000803e3d6000fd5b5050505050505050505050919050565b60675473ffffffffffffffffffffffffffffffffffffffff16331462000f41576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60685473ffffffffffffffffffffffffffffffffffffffff1660005b8251811015620010215782818151811062000f7c5762000f7c6200237a565b60209081029190910101516040517f3659cfe600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015290911690633659cfe690602401600060405180830381600087803b15801562000ff257600080fd5b505af115801562001007573d6000803e3d6000fd5b5050505080806200101890620024b1565b91505062000f5d565b505050565b60675473ffffffffffffffffffffffffffffffffffffffff16331462001078576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62ffffff8381166000818152606f602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301939093528101919091527f7a6c71f96c8aa946c5483648392f4440e50d64b7a351ea262129c024a068465f9060600160405180910390a1505050565b60675473ffffffffffffffffffffffffffffffffffffffff16331462001160576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e8190556040518181527f2d63886767aff97f7e87aa7061069ccb0a28bc5a34d22985057e40917f31373c9060200160405180910390a150565b60335473ffffffffffffffffffffffffffffffffffffffff1633146200121e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620005f3565b6200122a600062001c60565b565b60608167ffffffffffffffff8111156200124a576200124a62001e40565b60405190808252806020026020018201604052801562001274578160200160208202803683370190505b50905060005b828110156200134e5773ffffffffffffffffffffffffffffffffffffffff8087166000908152606960209081526040808320938916835292905220620012c1828662002621565b81548110620012d457620012d46200237a565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106200131457620013146200237a565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806200134581620024b1565b9150506200127a565b50949350505050565b60675473ffffffffffffffffffffffffffffffffffffffff163314620013a9576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f787dce3d0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff83169063787dce3d90602401600060405180830381600087803b1580156200141257600080fd5b505af115801562001427573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff86168152602081018590527f5f1fbcc409cd21ef4459e87d22bd635e32979279e8aefe917fc2d34567c7795a93500190505b60405180910390a15050565b600054610100900460ff166200149d5760005460ff1615620014a1565b303b155b6200152f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401620005f3565b600054610100900460ff161580156200156f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff8416620015bd576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166200160b576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821662001659576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6068805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556065805486841690831617905560668054928516929091169190911790556103e8606e557fb76ee0f27ddb32fa9a2030cb52797673872e15ab3461e4045f604fa66863d60a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811660019081179092557f341ace2ca8af05318cc8a4b96e4e3a7492e53fec3a5cbdafc6874b38633e788080548216831790557fd29274335c99d39d761c7010f07e14fba3d6202112deb81c4632ddf308b91e70805482168317905560026000527fe0d3e439b4a04265b4f24fa629f59c5433e12f15565196b06fa74f22397180866020527f1997a1aa8844bbadce0d5df367e8ccf8854782822d76567847c45104dc52656680549091169091179055620017c062001cd7565b606780547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905580156200181a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050565b60675473ffffffffffffffffffffffffffffffffffffffff16331462001872576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60675473ffffffffffffffffffffffffffffffffffffffff1633146200190b576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6068546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f0617fd31aa5ab95ec80eefc1eb61a2c477aa419d1d761b4e46f5f077e47852aa910160405180910390a1606880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60675473ffffffffffffffffffffffffffffffffffffffff163314620019f8576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152606c602052604090205460ff1662001a58576040517f2083cd4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fe46dbc9800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063e46dbc9890602401600060405180830381600087803b15801562001ac257600080fd5b505af115801562001ad7573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8087168252851660208201527fc30eb506689648404822be5551d0b5c732da6df0983ad57dd760118e9e0bab98935001905062001474565b60335473ffffffffffffffffffffffffffffffffffffffff16331462001bad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620005f3565b73ffffffffffffffffffffffffffffffffffffffff811662001c52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401620005f3565b62001c5d8162001c60565b50565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662001d70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401620005f3565b6200122a600054610100900460ff1662001e0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401620005f3565b6200122a3362001c60565b610cdb806200263d83390190565b60006020828403121562001e3957600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171562001eb95762001eb962001e40565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff8116811462001c5d57600080fd5b600082601f83011262001ef657600080fd5b8135602067ffffffffffffffff82111562001f155762001f1562001e40565b8160051b62001f2682820162001e6f565b928352848101820192828101908785111562001f4157600080fd5b83870192505b8483101562001f6d57823562001f5d8162001ec1565b8252918301919083019062001f47565b979650505050505050565b60008060006040848603121562001f8e57600080fd5b833567ffffffffffffffff8082111562001fa757600080fd5b62001fb58783880162001ee4565b9450602086013591508082111562001fcc57600080fd5b818601915086601f83011262001fe157600080fd5b81358181111562001ff157600080fd5b8760208260051b85010111156200200757600080fd5b6020830194508093505050509250925092565b6000806000606084860312156200203057600080fd5b83356200203d8162001ec1565b925060208401356200204f8162001ec1565b929592945050506040919091013590565b600060208083850312156200207457600080fd5b823567ffffffffffffffff808211156200208d57600080fd5b818501915085601f830112620020a257600080fd5b813581811115620020b757620020b762001e40565b620020e9847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162001e6f565b915080825286848285010111156200210057600080fd5b8084840185840137600090820190930192909252509392505050565b6000602082840312156200212f57600080fd5b813567ffffffffffffffff8111156200214757600080fd5b620021558482850162001ee4565b949350505050565b62ffffff8116811462001c5d57600080fd5b6000806000606084860312156200218557600080fd5b833562002192816200215d565b92506020840135620021a4816200215d565b915060408401358015158114620021ba57600080fd5b809150509250925092565b600060208284031215620021d857600080fd5b8135620021e58162001ec1565b9392505050565b600080604083850312156200220057600080fd5b82356200220d8162001ec1565b915060208301356200221f8162001ec1565b809150509250929050565b600080600080608085870312156200224157600080fd5b84356200224e8162001ec1565b93506020850135620022608162001ec1565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b81811015620022c557835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162002291565b50909695505050505050565b60008060408385031215620022e557600080fd5b8235620022f2816200215d565b915060208301356200221f816200215d565b600080604083850312156200231857600080fd5b8235620023258162001ec1565b946020939093013593505050565b6000806000606084860312156200234957600080fd5b8335620023568162001ec1565b92506020840135620023688162001ec1565b91506040840135620021ba8162001ec1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112620023df57600080fd5b83018035915067ffffffffffffffff821115620023fb57600080fd5b6020019150368190038213156200241157600080fd5b9250929050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620024e657620024e662002482565b5060010190565b600080600080600060a086880312156200250657600080fd5b8551620025138162001ec1565b6020870151909550620025268162001ec1565b604087015190945062002539816200215d565b60608701519093506200254c8162001ec1565b60808701519092506200255f816200215d565b809150509295509295909350565b6000602082840312156200258057600080fd5b8151620021e5816200215d565b604081526000835180604084015260005b81811015620025bd57602081870181015160608684010152016200259e565b81811115620025d0576000606083860101525b5073ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b6000821982111562002637576200263762002482565b50019056fe608060405260405162000cdb38038062000cdb8339810160408190526200002691620001fc565b62000032838262000046565b6200003d8262000128565b505050620002fa565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8054908390556040516001600160a01b0380851691908316907f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829690600090a381511562000123576000836001600160a01b031683604051620000ca9190620002dc565b600060405180830381855af49150503d806000811462000107576040519150601f19603f3d011682016040523d82523d6000602084013e6200010c565b606091505b505090508062000121573d806000803e806000fd5b505b505050565b60006200014260008051602062000cbb8339815191525490565b90508160008051602062000cbb83398151915255816001600160a01b0316816001600160a01b03167fdf435d422321da6b195902d70fc417c06a32f88379c20dd8f2a8da07088cec2960405160405180910390a35050565b80516001600160a01b0381168114620001b257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001ea578181015183820152602001620001d0565b83811115620001215750506000910152565b6000806000606084860312156200021257600080fd5b6200021d846200019a565b92506200022d602085016200019a565b60408501519092506001600160401b03808211156200024b57600080fd5b818601915086601f8301126200026057600080fd5b815181811115620002755762000275620001b7565b604051601f8201601f19908116603f01168101908382118183101715620002a057620002a0620001b7565b81604052828152896020848701011115620002ba57600080fd5b620002cd836020830160208801620001cd565b80955050505050509250925092565b60008251620002f0818460208701620001cd565b9190910192915050565b6109b1806200030a6000396000f3fe60806040526004361061005e5760003560e01c80633e47158c116100435780633e47158c146101295780634f1ef286146101635780638356ca4f14610176576100ca565b806301ffc9a7146100d45780633659cfe614610109576100ca565b366100ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f45544845525f52454a454354454400000000000000000000000000000000000060448201526064015b60405180910390fd5b6100d2610196565b005b3480156100e057600080fd5b506100f46100ef366004610815565b6101e1565b60405190151581526020015b60405180910390f35b34801561011557600080fd5b506100d2610124366004610880565b6103be565b34801561013557600080fd5b5061013e610490565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610100565b6100d261017136600461089b565b6104bf565b34801561018257600080fd5b506100d2610191366004610880565b6105ba565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460003681823780813683855af491503d8082833e8280156101d7578183f35b8183fd5b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061027457507f7f5828d0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b1561028157506001919050565b7fffffffff0000000000000000000000000000000000000000000000000000000080831614156102b357506000919050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008416600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a79060240160206040518083038186803b15801561035c57600080fd5b505afa9250505080156103aa575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526103a79181019061091e565b60015b6103b75750600092915050565b9392505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016100c1565b61048d8160405180602001604052806000815250610679565b50565b60006104ba7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905090565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016100c1565b6105b58383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061067992505050565b505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610670576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016100c1565b61048d81610768565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80549083905560405173ffffffffffffffffffffffffffffffffffffffff80851691908316907f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829690600090a38151156105b55760008373ffffffffffffffffffffffffffffffffffffffff16836040516107149190610940565b600060405180830381855af49150503d806000811461074f576040519150601f19603f3d011682016040523d82523d6000602084013e610754565b606091505b50509050806101db573d806000803e806000fd5b60006107927fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b9050817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103558173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fdf435d422321da6b195902d70fc417c06a32f88379c20dd8f2a8da07088cec2960405160405180910390a35050565b60006020828403121561082757600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146103b757600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461087b57600080fd5b919050565b60006020828403121561089257600080fd5b6103b782610857565b6000806000604084860312156108b057600080fd5b6108b984610857565b9250602084013567ffffffffffffffff808211156108d657600080fd5b818601915086601f8301126108ea57600080fd5b8135818111156108f957600080fd5b87602082850101111561090b57600080fd5b6020830194508093505050509250925092565b60006020828403121561093057600080fd5b815180151581146103b757600080fd5b6000825160005b818110156109615760208186018101518583015201610947565b81811115610970576000828501525b50919091019291505056fea2646970667358221220f941c4782a0ee12b1d02c6008db8836a2dee954b83ea1ed7172f702965941e0a64736f6c63430008090033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103a2646970667358221220426959070b93151a1646e53d43a07b98ef93683041f1aef3e64e7e5bb221358364736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001c45760003560e01c80636034b5101162000101578063c0c53b8b11620000a3578063d6f74898116200007a578063d6f748981462000460578063e5c8c5721462000477578063f2fde38b146200048e578063f6ab6d9914620004a557600080fd5b8063c0c53b8b1462000411578063cf58879a1462000428578063d0ebdbe7146200044957600080fd5b80638da5cb5b11620000d85780638da5cb5b14620003aa5780639ee6465b14620003c9578063b5b3ca2c14620003fa57600080fd5b80636034b5101462000363578063715018a6146200037a57806371a25812146200038457600080fd5b8063481c6a75116200016b578063566a89af1162000142578063566a89af14620002da5780635b16ebb714620002e35780635bc93d6c146200031a57600080fd5b8063481c6a7514620002815780635159d73c14620002a257806356088ff114620002b957600080fd5b806327c3cae111620001a057806327c3cae1146200023a57806340aee0411462000251578063421bcbdf146200026857600080fd5b8062a5ae2114620001c95780630dfc574b146200020a578063169c4cef1462000223575b600080fd5b620001e0620001da36600462001e26565b620004de565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b620002216200021b36600462001f78565b6200051e565b005b620001e0620002343660046200201a565b620006dc565b620001e06200024b36600462002060565b6200072f565b62000221620002623660046200211c565b62000eef565b62000272606e5481565b60405190815260200162000201565b606754620001e09073ffffffffffffffffffffffffffffffffffffffff1681565b62000221620002b33660046200216f565b62001026565b606654620001e09073ffffffffffffffffffffffffffffffffffffffff1681565b606d5462000272565b62000309620002f4366004620021c5565b606c6020526000908152604090205460ff1681565b604051901515815260200162000201565b620002726200032b366004620021ec565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260696020908152604080832093909416825291909152205490565b620002216200037436600462001e26565b6200110e565b620002216200119b565b6200039b620003953660046200222a565b6200122c565b60405162000201919062002275565b60335473ffffffffffffffffffffffffffffffffffffffff16620001e0565b62000309620003da366004620022d1565b606f60209081526000928352604080842090915290825290205460ff1681565b620002216200040b36600462002304565b62001357565b620002216200042236600462002333565b62001480565b606554620001e09073ffffffffffffffffffffffffffffffffffffffff1681565b620002216200045a366004620021c5565b62001820565b6200022162000471366004620021c5565b620018b9565b6200022162000488366004620021ec565b620019a6565b620002216200049f366004620021c5565b62001b2a565b620001e0620004b636600462001e26565b606a6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6000606d8281548110620004f657620004f66200237a565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b60675473ffffffffffffffffffffffffffffffffffffffff16331462000570576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606854835173ffffffffffffffffffffffffffffffffffffffff909116908214620005fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6d69736d61746368696e67206172726179206c656e677468000000000000000060448201526064015b60405180910390fd5b60005b8451811015620006d5578481815181106200061e576200061e6200237a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634f1ef286838686858181106200065757620006576200237a565b90506020028101906200066b9190620023a9565b6040518463ffffffff1660e01b81526004016200068b9392919062002418565b600060405180830381600087803b158015620006a657600080fd5b505af1158015620006bb573d6000803e3d6000fd5b505050508080620006cc90620024b1565b915050620005ff565b5050505050565b606960205282600052604060002060205281600052604060002081815481106200070557600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60655460009073ffffffffffffffffffffffffffffffffffffffff16331462000784576040517f03781a5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600080600086806020019051810190620007a29190620024ed565b945094509450945094508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16111562000813576040517f30082a1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62ffffff8084166000908152606f602090815260408083209385168352929052205460ff166200086f576040517fb87686b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff80861660009081526069602090815260408083209388168352928152828220805484518184028101840190955280855292939290918301828280156200090157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311620008d5575b5050505050905060005b815181101562000abf578262ffffff168282815181106200093057620009306200237a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200097e57600080fd5b505afa15801562000993573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009b991906200256d565b62ffffff1614801562000a7257508462ffffff16828281518110620009e257620009e26200237a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a3057600080fd5b505afa15801562000a45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a6b91906200256d565b62ffffff16145b1562000aaa576040517f35be3ac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8062000ab681620024b1565b9150506200090b565b506040805173ffffffffffffffffffffffffffffffffffffffff80891660208301528716918101919091526000606082015262ffffff8086166080830152831660a082015260c001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905280516020820120606854919a5091829173ffffffffffffffffffffffffffffffffffffffff1690309062000b6a9062001e18565b73ffffffffffffffffffffffffffffffffffffffff9283168152911660208201526060604082018190526000908201526080018190604051809103906000f590508015801562000bbe573d6000803e3d6000fd5b506065546040517fcce2df0300000000000000000000000000000000000000000000000000000000815291995073ffffffffffffffffffffffffffffffffffffffff808b169263cce2df039262000c1d928e929116906004016200258d565b600060405180830381600087803b15801562000c3857600080fd5b505af115801562000c4d573d6000803e3d6000fd5b5050506000828152606a60209081526040808320805473ffffffffffffffffffffffffffffffffffffffff8e81167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093558d811680875260698087528588208f8416808a52908852868920805460018181018355918b52898b2001805487168817905590895290875285882091885290865284872080548083018255908852868820018054841685179055838752606c90955283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686179055606d805495860181559095527f5006b838207c6a9ae9b84d68f467dd4bb5c305fbfb6b04eab8faaabeec1e18d890930180549093168117909255517fd90bda4e0000000000000000000000000000000000000000000000000000000081529187166004830152915063d90bda4e90602401600060405180830381600087803b15801562000dbd57600080fd5b505af115801562000dd2573d6000803e3d6000fd5b50506066546040517fbd7d1eea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152908b16925063bd7d1eea9150602401600060405180830381600087803b15801562000e4457600080fd5b505af115801562000e59573d6000803e3d6000fd5b5050606e546040517f787dce3d000000000000000000000000000000000000000000000000000000008152600481019190915273ffffffffffffffffffffffffffffffffffffffff8b16925063787dce3d9150602401600060405180830381600087803b15801562000eca57600080fd5b505af115801562000edf573d6000803e3d6000fd5b5050505050505050505050919050565b60675473ffffffffffffffffffffffffffffffffffffffff16331462000f41576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60685473ffffffffffffffffffffffffffffffffffffffff1660005b8251811015620010215782818151811062000f7c5762000f7c6200237a565b60209081029190910101516040517f3659cfe600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015290911690633659cfe690602401600060405180830381600087803b15801562000ff257600080fd5b505af115801562001007573d6000803e3d6000fd5b5050505080806200101890620024b1565b91505062000f5d565b505050565b60675473ffffffffffffffffffffffffffffffffffffffff16331462001078576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62ffffff8381166000818152606f602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301939093528101919091527f7a6c71f96c8aa946c5483648392f4440e50d64b7a351ea262129c024a068465f9060600160405180910390a1505050565b60675473ffffffffffffffffffffffffffffffffffffffff16331462001160576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e8190556040518181527f2d63886767aff97f7e87aa7061069ccb0a28bc5a34d22985057e40917f31373c9060200160405180910390a150565b60335473ffffffffffffffffffffffffffffffffffffffff1633146200121e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620005f3565b6200122a600062001c60565b565b60608167ffffffffffffffff8111156200124a576200124a62001e40565b60405190808252806020026020018201604052801562001274578160200160208202803683370190505b50905060005b828110156200134e5773ffffffffffffffffffffffffffffffffffffffff8087166000908152606960209081526040808320938916835292905220620012c1828662002621565b81548110620012d457620012d46200237a565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106200131457620013146200237a565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806200134581620024b1565b9150506200127a565b50949350505050565b60675473ffffffffffffffffffffffffffffffffffffffff163314620013a9576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f787dce3d0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff83169063787dce3d90602401600060405180830381600087803b1580156200141257600080fd5b505af115801562001427573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff86168152602081018590527f5f1fbcc409cd21ef4459e87d22bd635e32979279e8aefe917fc2d34567c7795a93500190505b60405180910390a15050565b600054610100900460ff166200149d5760005460ff1615620014a1565b303b155b6200152f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401620005f3565b600054610100900460ff161580156200156f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff8416620015bd576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166200160b576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821662001659576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6068805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556065805486841690831617905560668054928516929091169190911790556103e8606e557fb76ee0f27ddb32fa9a2030cb52797673872e15ab3461e4045f604fa66863d60a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811660019081179092557f341ace2ca8af05318cc8a4b96e4e3a7492e53fec3a5cbdafc6874b38633e788080548216831790557fd29274335c99d39d761c7010f07e14fba3d6202112deb81c4632ddf308b91e70805482168317905560026000527fe0d3e439b4a04265b4f24fa629f59c5433e12f15565196b06fa74f22397180866020527f1997a1aa8844bbadce0d5df367e8ccf8854782822d76567847c45104dc52656680549091169091179055620017c062001cd7565b606780547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905580156200181a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050565b60675473ffffffffffffffffffffffffffffffffffffffff16331462001872576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60675473ffffffffffffffffffffffffffffffffffffffff1633146200190b576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6068546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f0617fd31aa5ab95ec80eefc1eb61a2c477aa419d1d761b4e46f5f077e47852aa910160405180910390a1606880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60675473ffffffffffffffffffffffffffffffffffffffff163314620019f8576040517f3d83907a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152606c602052604090205460ff1662001a58576040517f2083cd4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fe46dbc9800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063e46dbc9890602401600060405180830381600087803b15801562001ac257600080fd5b505af115801562001ad7573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8087168252851660208201527fc30eb506689648404822be5551d0b5c732da6df0983ad57dd760118e9e0bab98935001905062001474565b60335473ffffffffffffffffffffffffffffffffffffffff16331462001bad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620005f3565b73ffffffffffffffffffffffffffffffffffffffff811662001c52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401620005f3565b62001c5d8162001c60565b50565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662001d70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401620005f3565b6200122a600054610100900460ff1662001e0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401620005f3565b6200122a3362001c60565b610cdb806200263d83390190565b60006020828403121562001e3957600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171562001eb95762001eb962001e40565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff8116811462001c5d57600080fd5b600082601f83011262001ef657600080fd5b8135602067ffffffffffffffff82111562001f155762001f1562001e40565b8160051b62001f2682820162001e6f565b928352848101820192828101908785111562001f4157600080fd5b83870192505b8483101562001f6d57823562001f5d8162001ec1565b8252918301919083019062001f47565b979650505050505050565b60008060006040848603121562001f8e57600080fd5b833567ffffffffffffffff8082111562001fa757600080fd5b62001fb58783880162001ee4565b9450602086013591508082111562001fcc57600080fd5b818601915086601f83011262001fe157600080fd5b81358181111562001ff157600080fd5b8760208260051b85010111156200200757600080fd5b6020830194508093505050509250925092565b6000806000606084860312156200203057600080fd5b83356200203d8162001ec1565b925060208401356200204f8162001ec1565b929592945050506040919091013590565b600060208083850312156200207457600080fd5b823567ffffffffffffffff808211156200208d57600080fd5b818501915085601f830112620020a257600080fd5b813581811115620020b757620020b762001e40565b620020e9847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162001e6f565b915080825286848285010111156200210057600080fd5b8084840185840137600090820190930192909252509392505050565b6000602082840312156200212f57600080fd5b813567ffffffffffffffff8111156200214757600080fd5b620021558482850162001ee4565b949350505050565b62ffffff8116811462001c5d57600080fd5b6000806000606084860312156200218557600080fd5b833562002192816200215d565b92506020840135620021a4816200215d565b915060408401358015158114620021ba57600080fd5b809150509250925092565b600060208284031215620021d857600080fd5b8135620021e58162001ec1565b9392505050565b600080604083850312156200220057600080fd5b82356200220d8162001ec1565b915060208301356200221f8162001ec1565b809150509250929050565b600080600080608085870312156200224157600080fd5b84356200224e8162001ec1565b93506020850135620022608162001ec1565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b81811015620022c557835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162002291565b50909695505050505050565b60008060408385031215620022e557600080fd5b8235620022f2816200215d565b915060208301356200221f816200215d565b600080604083850312156200231857600080fd5b8235620023258162001ec1565b946020939093013593505050565b6000806000606084860312156200234957600080fd5b8335620023568162001ec1565b92506020840135620023688162001ec1565b91506040840135620021ba8162001ec1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112620023df57600080fd5b83018035915067ffffffffffffffff821115620023fb57600080fd5b6020019150368190038213156200241157600080fd5b9250929050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620024e657620024e662002482565b5060010190565b600080600080600060a086880312156200250657600080fd5b8551620025138162001ec1565b6020870151909550620025268162001ec1565b604087015190945062002539816200215d565b60608701519093506200254c8162001ec1565b60808701519092506200255f816200215d565b809150509295509295909350565b6000602082840312156200258057600080fd5b8151620021e5816200215d565b604081526000835180604084015260005b81811015620025bd57602081870181015160608684010152016200259e565b81811115620025d0576000606083860101525b5073ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b6000821982111562002637576200263762002482565b50019056fe608060405260405162000cdb38038062000cdb8339810160408190526200002691620001fc565b62000032838262000046565b6200003d8262000128565b505050620002fa565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8054908390556040516001600160a01b0380851691908316907f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829690600090a381511562000123576000836001600160a01b031683604051620000ca9190620002dc565b600060405180830381855af49150503d806000811462000107576040519150601f19603f3d011682016040523d82523d6000602084013e6200010c565b606091505b505090508062000121573d806000803e806000fd5b505b505050565b60006200014260008051602062000cbb8339815191525490565b90508160008051602062000cbb83398151915255816001600160a01b0316816001600160a01b03167fdf435d422321da6b195902d70fc417c06a32f88379c20dd8f2a8da07088cec2960405160405180910390a35050565b80516001600160a01b0381168114620001b257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001ea578181015183820152602001620001d0565b83811115620001215750506000910152565b6000806000606084860312156200021257600080fd5b6200021d846200019a565b92506200022d602085016200019a565b60408501519092506001600160401b03808211156200024b57600080fd5b818601915086601f8301126200026057600080fd5b815181811115620002755762000275620001b7565b604051601f8201601f19908116603f01168101908382118183101715620002a057620002a0620001b7565b81604052828152896020848701011115620002ba57600080fd5b620002cd836020830160208801620001cd565b80955050505050509250925092565b60008251620002f0818460208701620001cd565b9190910192915050565b6109b1806200030a6000396000f3fe60806040526004361061005e5760003560e01c80633e47158c116100435780633e47158c146101295780634f1ef286146101635780638356ca4f14610176576100ca565b806301ffc9a7146100d45780633659cfe614610109576100ca565b366100ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f45544845525f52454a454354454400000000000000000000000000000000000060448201526064015b60405180910390fd5b6100d2610196565b005b3480156100e057600080fd5b506100f46100ef366004610815565b6101e1565b60405190151581526020015b60405180910390f35b34801561011557600080fd5b506100d2610124366004610880565b6103be565b34801561013557600080fd5b5061013e610490565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610100565b6100d261017136600461089b565b6104bf565b34801561018257600080fd5b506100d2610191366004610880565b6105ba565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460003681823780813683855af491503d8082833e8280156101d7578183f35b8183fd5b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061027457507f7f5828d0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b1561028157506001919050565b7fffffffff0000000000000000000000000000000000000000000000000000000080831614156102b357506000919050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008416600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a79060240160206040518083038186803b15801561035c57600080fd5b505afa9250505080156103aa575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526103a79181019061091e565b60015b6103b75750600092915050565b9392505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016100c1565b61048d8160405180602001604052806000815250610679565b50565b60006104ba7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905090565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016100c1565b6105b58383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061067992505050565b505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610670576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016100c1565b61048d81610768565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80549083905560405173ffffffffffffffffffffffffffffffffffffffff80851691908316907f5570d70a002632a7b0b3c9304cc89efb62d8da9eca0dbd7752c83b737906829690600090a38151156105b55760008373ffffffffffffffffffffffffffffffffffffffff16836040516107149190610940565b600060405180830381855af49150503d806000811461074f576040519150601f19603f3d011682016040523d82523d6000602084013e610754565b606091505b50509050806101db573d806000803e806000fd5b60006107927fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b9050817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103558173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fdf435d422321da6b195902d70fc417c06a32f88379c20dd8f2a8da07088cec2960405160405180910390a35050565b60006020828403121561082757600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146103b757600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461087b57600080fd5b919050565b60006020828403121561089257600080fd5b6103b782610857565b6000806000604084860312156108b057600080fd5b6108b984610857565b9250602084013567ffffffffffffffff808211156108d657600080fd5b818601915086601f8301126108ea57600080fd5b8135818111156108f957600080fd5b87602082850101111561090b57600080fd5b6020830194508093505050509250925092565b60006020828403121561093057600080fd5b815180151581146103b757600080fd5b6000825160005b818110156109615760208186018101518583015201610947565b81811115610970576000828501525b50919091019291505056fea2646970667358221220f941c4782a0ee12b1d02c6008db8836a2dee954b83ea1ed7172f702965941e0a64736f6c63430008090033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103a2646970667358221220426959070b93151a1646e53d43a07b98ef93683041f1aef3e64e7e5bb221358364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "configAddress": {
        "params": {
          "data": "abi.encode(address tokenA, address tokenB, uint24 swapFee, uint24 tickSpacing);"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configAddress(bytes32)": {
        "notice": "Return the address of the pool created with the given config data"
      },
      "getPoolAddress(uint256)": {
        "notice": "Return the address of pool by index"
      },
      "getPools(address,address,uint256,uint256)": {
        "notice": "Return the list of pools composed of two tokens"
      },
      "isPool(address)": {
        "notice": "Return whether the pool is created by the factory"
      },
      "poolsCount(address,address)": {
        "notice": "Return the number of pools composed of two tokens"
      },
      "totalPoolsCount()": {
        "notice": "Return the number of pools deployed from factory"
      }
    },
    "notice": "Contract for deploying Reward Liquidity Pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1981,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5765,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "masterDeployer",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 5767,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "poolLogger",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 5769,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "manager",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 5771,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "poolImplementation",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 5778,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 5782,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "configAddress",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 5786,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "availableConfigs",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5790,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "isPool",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5793,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "poolArray",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5795,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "defaultProtocolFee",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 5801,
        "contract": "contracts/custom/miningPool/MiningPoolFactory.sol:MiningPoolFactory",
        "label": "availableFeeAndTickSpacing",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_uint24,t_mapping(t_uint24,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint24,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint24",
        "label": "mapping(uint24 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint24,t_mapping(t_uint24,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint24",
        "label": "mapping(uint24 => mapping(uint24 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint24,t_bool)"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}