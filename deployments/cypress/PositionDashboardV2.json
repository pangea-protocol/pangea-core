{
  "address": "0xaA9a87b6ccDcC521D582b3df92C106B179734344",
  "abi": [
    {
      "inputs": [],
      "name": "TickOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb763672b20cc06862fbcf6548b1b7ad9fdbd641f82ad4441ce56770543a5b69",
  "receipt": {
    "to": null,
    "from": "0x2A2F23ff33671361010D357529BDF0adca9416Fc",
    "contractAddress": "0xaA9a87b6ccDcC521D582b3df92C106B179734344",
    "transactionIndex": 5,
    "gasUsed": "1169373",
    "logsBloom": "0x
    "blockHash": "0xbe60cd19b45cf7cce8ad3f00a8600ec0a9cc91dc0d983e79333465bb792b6962",
    "transactionHash": "0xcb763672b20cc06862fbcf6548b1b7ad9fdbd641f82ad4441ce56770543a5b69",
    "logs": [],
    "blockNumber": 110740266,
    "cumulativeGasUsed": "1615852",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6916dbc1023f78dcc0da82f137387cb0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"TickOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dashboard/PositionDashboardV2.sol\":\"PositionDashboardV2\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/custom/common/interfaces/ICustomPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICustomPool {\\n    function initialize(bytes memory _deployData, address _masterDeployer) external;\\n}\\n\",\"keccak256\":\"0x5057d8b09ec04a7fe9a61e9ca2acb9de30721c696af6a72ae724331cef48cadc\",\"license\":\"GPL-3.0\"},\"contracts/custom/miningPool/interfaces/IMiningPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMiningPoolStruct.sol\\\";\\nimport \\\"../../../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../../common/interfaces/ICustomPool.sol\\\";\\n\\n/// @notice Mining Pool interface.\\ninterface IMiningPool is ICustomPool, IMiningPoolStruct, IConcentratedLiquidityPoolStruct, IConcentratedLiquidityPool {\\n    /// @notice Look up reward Growth Outside values about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function rewardGrowthOutsidePerTicks(int24 tick) external view returns (uint256);\\n\\n    /// @notice Returns the reward information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positionRewards(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (PositionReward memory);\\n\\n    /// @notice reward Token\\n    function rewardToken() external view returns (address);\\n\\n    /// @notice The reward growth collected per unit of liquidity for the entire life of the pool\\n    function rewardGrowthGlobal() external view returns (uint256);\\n\\n    /// @dev deposit Reward Token\\n    function depositReward(uint256 amount) external view returns (uint256);\\n\\n    /// @notice reward growth inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeRewardGrowth(int24 lower, int24 upper) external view returns (uint256 rewardGrowthInside);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredReward How much amount want be withdrawn from the rewards owed\\n    // @dev If desired rewards exceeds the possible amount, only the possible amount will be returned.\\n    function collectReward(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredReward\\n    ) external returns (uint256 rewardAmount);\\n}\\n\",\"keccak256\":\"0x8a860856cfc319030b10fb84323adcb281794068e181537540a52889a8c9a939\",\"license\":\"GPL-3.0\"},\"contracts/custom/miningPool/interfaces/IMiningPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../../interfaces/IConcentratedLiquidityPoolManager.sol\\\";\\n\\ninterface IMiningPoolManager is IConcentratedLiquidityPoolManager {\\n    function positionRewardAmount(uint256 positionId) external view returns (uint256 rewardAmount, uint256 rewardGrowthInside);\\n}\\n\",\"keccak256\":\"0x39f258a1def53d0ebf269a0cb3ae58de901d18e99ee786d4ea0a7838295d01af\",\"license\":\"GPL-3.0\"},\"contracts/custom/miningPool/interfaces/IMiningPoolStruct.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMiningPoolStruct {\\n    struct PositionReward {\\n        /// @dev reward growth of rewardToken inside the tick range as of the last mint/burn/collect\\n        uint256 rewardGrowthInsideLast;\\n        /// @dev computed amount of reward owed to the position as of the last mint/burn/collect\\n        uint128 rewardOwed;\\n    }\\n}\\n\",\"keccak256\":\"0x9a6c523c7c75dc5c1fae48d077389997c39a315cf0dad8fa62c39f42cac824ac\",\"license\":\"GPL-3.0\"},\"contracts/dashboard/PositionDashboardV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../custom/miningPool/interfaces/IMiningPoolManager.sol\\\";\\nimport \\\"../custom/miningPool/interfaces/IMiningPool.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPoolManager.sol\\\";\\nimport \\\"../libraries/DyDxMath.sol\\\";\\nimport \\\"../libraries/FullMath.sol\\\";\\nimport \\\"../libraries/TickMath.sol\\\";\\nimport \\\"../libraries/FixedPoint.sol\\\";\\n\\ncontract PositionDashboardV2 {\\n    function getTotal(address poolManager, uint256 positionId) external view returns (uint256 amount0, uint256 amount1) {\\n        (amount0, amount1) = getPrincipal(poolManager, positionId);\\n        (uint256 fee0, uint256 fee1) = getFees(poolManager, positionId);\\n        amount0 += fee0;\\n        amount1 += fee1;\\n    }\\n\\n    function getPrincipal(address poolManager, uint256 positionId) public view returns (uint256 amount0, uint256 amount1) {\\n        IConcentratedLiquidityPoolManagerStruct.Position memory position = IConcentratedLiquidityPoolManager(poolManager).positions(\\n            positionId\\n        );\\n\\n        uint256 priceLower = uint256(TickMath.getSqrtRatioAtTick(position.lower));\\n        uint256 priceUpper = uint256(TickMath.getSqrtRatioAtTick(position.upper));\\n        uint256 currentPrice = uint256(IConcentratedLiquidityPool(position.pool).price());\\n\\n        (amount0, amount1) = DyDxMath.getAmountsForLiquidity(priceLower, priceUpper, currentPrice, position.liquidity, false);\\n    }\\n\\n    function getFees(address poolManager, uint256 positionId) public view returns (uint256 fee0, uint256 fee1) {\\n        (fee0, fee1, , ) = IConcentratedLiquidityPoolManager(poolManager).positionFees(positionId);\\n    }\\n\\n    function getRewards(address poolManager, uint256 positionId) public view returns (address rewardToken, uint256 rewardAmount) {\\n        IConcentratedLiquidityPoolManagerStruct.Position memory position = IMiningPoolManager(poolManager).positions(positionId);\\n        rewardToken = IMiningPool(position.pool).rewardToken();\\n        (rewardAmount, ) = IMiningPoolManager(poolManager).positionRewardAmount(positionId);\\n    }\\n}\\n\",\"keccak256\":\"0x6b6e4f838fad63dc4d4f419a258974326ce0bd44709a9c45be5522d2aeba1fa2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice do not use this. it can be easily corrupted\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0xd50187378c243a9523c29c977d6680e377bbc48f801bdc3c5b1eff8db5eee074\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConcentratedLiquidityPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IConcentratedLiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/// @notice concentrated liquidity pool manager contract Structs.\\ninterface IConcentratedLiquidityPoolManagerStruct {\\n    struct Position {\\n        address pool; /// @dev the pool address\\n        uint128 liquidity; /// @dev The amount of liquidity for this position\\n        int24 lower; /// @dev The lower end of the tick range for the position\\n        int24 upper; /// @dev The upper end of the tick range for the position\\n        uint32 latestAddition; /// @dev useless field, but reserved for the future\\n        uint256 feeGrowthInside0; /// @dev The fee growth of token0 as of the last action on the individual position\\n        uint256 feeGrowthInside1; /// @dev The fee growth of token0 as of the last action on the individual position\\n        uint256 feeOwed0; /// @dev The amount of token0 owed to the position as of the last computation\\n        uint256 feeOwed1; /// @dev The amount of token1 owed to the position as of the last computation\\n    }\\n\\n    struct MintParam {\\n        address pool;\\n        int24 lowerOld;\\n        int24 lower;\\n        int24 upperOld;\\n        int24 upper;\\n        uint128 amount0Desired;\\n        uint128 amount1Desired;\\n        uint256 minLiquidity;\\n        uint256 positionId;\\n    }\\n\\n    struct MintNativeParam {\\n        address pool;\\n        int24 lowerOld;\\n        int24 lower;\\n        int24 upperOld;\\n        int24 upper;\\n        uint128 amountDesired;\\n        uint256 minLiquidity;\\n        uint256 positionId;\\n    }\\n}\\n\\ninterface IConcentratedLiquidityPoolManagerEvent {\\n    event IncreaseLiquidity(\\n        address indexed pool,\\n        address indexed owner,\\n        uint256 indexed positionId,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint128 liquidity\\n    );\\n\\n    event DecreaseLiquidity(\\n        address indexed pool,\\n        address indexed owner,\\n        uint256 indexed positionId,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint128 liquidity\\n    );\\n\\n    event CollectFee(address indexed pool, address indexed recipient, uint256 indexed positionId, uint256 amount0, uint256 amount1);\\n}\\n\\n/// @notice concentrated liquidity manager contract interface.\\ninterface IConcentratedLiquidityPoolManager is\\n    IConcentratedLiquidityPoolManagerStruct,\\n    IConcentratedLiquidityPoolManagerEvent,\\n    IERC721Enumerable\\n{\\n    /// @dev return the position information associated with a given token ID.\\n    function positions(uint256 positionId) external view returns (Position memory);\\n\\n    /// @dev Create or add additional Liquidity to a given position of ERC20-ERC20 pair pool\\n    /// @param pool           target pool\\n    /// @param lowerOld       previous lower tick\\n    /// @param lower          The lower end of the tick range for the position\\n    /// @param upperOld       previous upper tick\\n    /// @param upper          The upper end of the tick range for the position\\n    /// @param amount0Desired The amount of token0\\n    /// @param amount1Desired The amount of token1\\n    /// @param minLiquidity   minimum liquidity to create\\n    /// @param positionId     create position if position = 0, else add additional liquidity\\n    function mint(\\n        address pool,\\n        int24 lowerOld,\\n        int24 lower,\\n        int24 upperOld,\\n        int24 upper,\\n        uint128 amount0Desired,\\n        uint128 amount1Desired,\\n        uint256 minLiquidity,\\n        uint256 positionId\\n    ) external returns (uint256);\\n\\n    /// @notice Create or add additional Liquidity to a given position of ERC20-NATIVE pair pool\\n    /// @param pool           target pool\\n    /// @param lowerOld       previous lower tick\\n    /// @param lower          The lower end of the tick range for the position\\n    /// @param upperOld       previous upper tick\\n    /// @param upper          The upper end of the tick range for the position\\n    /// @param amountDesired  The amount of token\\n    /// @param minLiquidity   minimum liquidity to create (slippage)\\n    /// @param positionId     create position if position = 0, else add additional liquidity\\n    function mintNative(\\n        address pool,\\n        int24 lowerOld,\\n        int24 lower,\\n        int24 upperOld,\\n        int24 upper,\\n        uint128 amountDesired,\\n        uint256 minLiquidity,\\n        uint256 positionId\\n    ) external payable returns (uint256);\\n\\n    /// @notice burn liquidity ( if burn all liquidity, delete tokenId )\\n    /// @param positionId     The ID of the NFT\\n    /// @param amount         the amount by which liquidity will be burned\\n    /// @param recipient      The account that should receive the tokens\\n    /// @param minimumOut0    The minimum amount of token0 that should be accounted for the burned liquidity\\n    /// @param minimumOut1    The minimum amount of token1 that should be accounted for the burned liquidity\\n    /// @param unwrap         unwrap or not if native token exists\\n    function burn(\\n        uint256 positionId,\\n        uint128 amount,\\n        address recipient,\\n        uint256 minimumOut0,\\n        uint256 minimumOut1,\\n        bool unwrap\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Returns the claimable fees and the fee growth accumulators of a given position\\n    function positionFees(uint256 positionId)\\n        external\\n        view\\n        returns (\\n            uint256 token0amount,\\n            uint256 token1amount,\\n            uint256 feeGrowthInside0,\\n            uint256 feeGrowthInside1\\n        );\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param positionId   The ID of the NFT for which tokens are being collected\\n    /// @param recipient    The account that should receive the tokens\\n    /// @param unwrap       unwrap or not if native token exists\\n    function collect(\\n        uint256 positionId,\\n        address recipient,\\n        bool unwrap\\n    ) external returns (uint256 token0amount, uint256 token1amount);\\n}\\n\",\"keccak256\":\"0x933cd1be5d66a8067b00285ad03e418fcfa351e48f6870ce5f600073fdc48bbf\",\"license\":\"GPL-3.0\"},\"contracts/libraries/DyDxMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n/// @notice Math library that facilitates ranged liquidity calculations.\\nlibrary DyDxMath {\\n    function getDy(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dy) {\\n        unchecked {\\n            if (roundUp) {\\n                dy = FullMath.mulDivRoundingUp(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            } else {\\n                dy = FullMath.mulDiv(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            }\\n        }\\n    }\\n\\n    function getDx(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dx) {\\n        unchecked {\\n            if (roundUp) {\\n                dx = UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper),\\n                    priceLower\\n                );\\n            } else {\\n                dx = FullMath.mulDiv(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper) / priceLower;\\n            }\\n        }\\n    }\\n\\n    function getLiquidityForAmounts(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 dy,\\n        uint256 dx\\n    ) internal pure returns (uint256 liquidity) {\\n        unchecked {\\n            if (priceUpper <= currentPrice) {\\n                liquidity = FullMath.mulDiv(dy, FixedPoint.Q96, priceUpper - priceLower);\\n            } else if (currentPrice <= priceLower) {\\n                liquidity = FullMath.mulDiv(dx, FullMath.mulDiv(priceLower, priceUpper, FixedPoint.Q96), priceUpper - priceLower);\\n            } else {\\n                uint256 liquidity0 = FullMath.mulDiv(\\n                    dx,\\n                    FullMath.mulDiv(priceUpper, currentPrice, FixedPoint.Q96),\\n                    priceUpper - currentPrice\\n                );\\n                uint256 liquidity1 = FullMath.mulDiv(dy, FixedPoint.Q96, currentPrice - priceLower);\\n                liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n            }\\n        }\\n    }\\n\\n    function getAmountsForLiquidity(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 liquidityAmount,\\n        bool roundUp\\n    ) internal pure returns (uint128 token0amount, uint128 token1amount) {\\n        if (priceUpper <= currentPrice) {\\n            // Only supply `token1` (`token1` is Y).\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else if (currentPrice <= priceLower) {\\n            // Only supply `token0` (`token0` is X).\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else {\\n            // Supply both tokens.\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, currentPrice, priceUpper, roundUp));\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, currentPrice, roundUp));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd7e93680c237fbda55c989b3bbf3dcd14c4df5d40a0a9a997325d8a539f80cc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary FixedPoint {\\n    uint8 internal constant Q128RES = 128;\\n    uint8 internal constant Q96RES = 96;\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x591a424ebe1e10342bf873b49a85989bcbca4b575846ed3d3f3a194f122fdbbd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\\n/// @dev Handles \\\"phantom overflow\\\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b.\\n            // Compute the product mod 2**256 and mod 2**256 - 1,\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product.\\n            uint256 prod1; // Most significant 256 bits of the product.\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n            // Make sure the result is less than 2**256 -\\n            // also prevents denominator == 0.\\n            require(denominator > prod1);\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n            // Make division exact by subtracting the remainder from [prod1 prod0] -\\n            // compute remainder using mulmod.\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number.\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n            // Factor powers of two out of denominator -\\n            // compute largest power of two divisor of denominator\\n            // (always >= 1).\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two.\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n            // Divide [prod1 prod0] by the factors of two.\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos -\\n            // if twos is zero, then it becomes one.\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256 -\\n            // now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // for four bits. That is, denominator * inv = 1 mod 2**4.\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**8.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**16.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**32.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**64.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**128.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**256.\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        unchecked {\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8211b004be6ff6be30b81fe484544d00c7bb467a4fd2a0d6c60114353e2300cf\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary SafeCast {\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        require((z = uint128(y)) == y);\\n    }\\n\\n    function toInt128(uint256 y) internal pure returns (int128 z) {\\n        require(y <= 2**127 - 1);\\n        return int128(int256(y));\\n    }\\n}\\n\",\"keccak256\":\"0x26f130f9e37749f36d7c61bb818227d0ef4e089695be0009e9b626e63c7753c3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library for computing sqrt price for ticks of size 1.0001, i.e., sqrt(1.0001^tick) as fixed point Q64.96 numbers - supports\\n/// prices between 2**-128 and 2**128 - 1.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/TickMath.sol.\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MIN_TICK).\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MAX_TICK).\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    error TickOutOfBounds();\\n    error PriceOutOfBounds();\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96.\\n    /// @dev Throws if |tick| > max tick.\\n    /// @param tick The input tick for the above formula.\\n    /// @return sqrtPriceX96 Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick.\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        if (absTick > uint256(uint24(MAX_TICK))) revert TickOutOfBounds();\\n        unchecked {\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n            // This divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // We then downcast because we know the result always fits within 160 bits due to our tick input constraint.\\n            // We round up in the division so getTickAtSqrtRatio of the output price is always consistent.\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    function validatePrice(uint160 price) internal pure {\\n        if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio.\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96.\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio.\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // Second inequality must be < because the price can never reach the price at the max tick.\\n        if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n        unchecked {\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number.\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d20064b2a93ccddca358064e4843ebbe8c76fb75c85ce9c95d4050ee10d4ce5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that contains methods that perform common math functions but do not do any overflow or underflow checks.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/UnsafeMath.sol.\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y).\\n    /// @dev Division by 0 has unspecified behavior, and must be checked externally.\\n    /// @param x The dividend.\\n    /// @param y The divisor.\\n    /// @return z The quotient, ceil(x / y).\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea315497f3b3f0dcf40535dd8a130e3615ffaaa18a735eb6ec48f990fac148a0\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e7c806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636c99832a146100515780637387f44d1461007e57806381b5d291146100bd578063efb36c14146100d0575b600080fd5b61006461005f366004610b75565b6100e3565b604080519283526020830191909152015b60405180910390f35b61009161008c366004610b75565b610128565b6040805173ffffffffffffffffffffffffffffffffffffffff9093168352602083019190915201610075565b6100646100cb366004610b75565b6102ea565b6100646100de366004610b75565b6104ae565b6000806100f084846102ea565b909250905060008061010286866104ae565b90925090506101118285610bd0565b935061011d8184610bd0565b925050509250929050565b60008060008473ffffffffffffffffffffffffffffffffffffffff166399fbab88856040518263ffffffff1660e01b815260040161016891815260200190565b6101206040518083038186803b15801561018157600080fd5b505afa158015610195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b99190610c8a565b9050806000015173ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561020557600080fd5b505afa158015610219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023d9190610d28565b6040517fd53cfc060000000000000000000000000000000000000000000000000000000081526004810186905290935073ffffffffffffffffffffffffffffffffffffffff86169063d53cfc0690602401604080518083038186803b1580156102a557600080fd5b505afa1580156102b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dd9190610d45565b5080925050509250929050565b60008060008473ffffffffffffffffffffffffffffffffffffffff166399fbab88856040518263ffffffff1660e01b815260040161032a91815260200190565b6101206040518083038186803b15801561034357600080fd5b505afa158015610357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037b9190610c8a565b9050600061038c826040015161055e565b73ffffffffffffffffffffffffffffffffffffffff16905060006103b3836060015161055e565b73ffffffffffffffffffffffffffffffffffffffff1690506000836000015173ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561041757600080fd5b505afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f9190610d28565b73ffffffffffffffffffffffffffffffffffffffff16905061048b83838387602001516fffffffffffffffffffffffffffffffff1660006108f1565b6fffffffffffffffffffffffffffffffff9182169a911698509650505050505050565b6040517fed7bba9a00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063ed7bba9a9060240160806040518083038186803b15801561051957600080fd5b505afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105519190610d69565b5091969095509350505050565b60008060008360020b12610575578260020b610582565b8260020b61058290610d9f565b90506105ad7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610dd8565b62ffffff168111156105eb576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001821661060c5770010000000000000000000000000000000061061e565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610652576ffff97272373d413259a46990580e213a0260801c5b6004821615610671576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610690576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156106af576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156106ce576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156106ed576fff2ea16466c96a3843ec78b326b528610260801c5b608082161561070c576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161561072c576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161561074c576ff987a7253ac413176f2b074cf7815e540260801c5b61040082161561076c576ff3392b0822b70005940c7a398e4b70f30260801c5b61080082161561078c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156107ac576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156107cc576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156107ec576f70d869a156d2a1b890bb3df62baf32f70260801c5b61800082161561080c576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561082d576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561084d576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561086c576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610889576b048a170391f7dc42444e8fa20260801c5b60008460020b13156108c857807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816108c4576108c4610e17565b0490505b6401000000008106156108dc5760016108df565b60005b60ff16602082901c0192505050919050565b6000808486116109165761090f61090a85898987610960565b6109ae565b9050610956565b8685116109335761092c61090a858989876109d2565b9150610956565b61094261090a858789876109d2565b915061095361090a85898887610960565b90505b9550959350505050565b6000811561098957610982858585036c01000000000000000000000000610a23565b90506109a6565b6109a3858585036c01000000000000000000000000610a7f565b90505b949350505050565b806fffffffffffffffffffffffffffffffff811681146109cd57600080fd5b919050565b600081156109fa576109826109ee606087901b86860386610a23565b85808204910615150190565b83610a0c606087901b82860386610a7f565b81610a1957610a19610e17565b0495945050505050565b6000610a30848484610a7f565b90508180610a4057610a40610e17565b83850915610a78577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110610a7457600080fd5b6001015b9392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415610ad75760008411610acc57600080fd5b508290049050610a78565b808411610ae357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610b7257600080fd5b50565b60008060408385031215610b8857600080fd5b8235610b9381610b50565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610be357610be3610ba1565b500190565b604051610120810167ffffffffffffffff81118282101715610c33577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b80516109cd81610b50565b80516fffffffffffffffffffffffffffffffff811681146109cd57600080fd5b8051600281900b81146109cd57600080fd5b805163ffffffff811681146109cd57600080fd5b60006101208284031215610c9d57600080fd5b610ca5610be8565b610cae83610c39565b8152610cbc60208401610c44565b6020820152610ccd60408401610c64565b6040820152610cde60608401610c64565b6060820152610cef60808401610c76565b608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b600060208284031215610d3a57600080fd5b8151610a7881610b50565b60008060408385031215610d5857600080fd5b505080516020909101519092909150565b60008060008060808587031215610d7f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610dd157610dd1610ba1565b5060000390565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000811415610e0e57610e0e610ba1565b60000392915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220ab1d646c73db202a4e725b4ce7c9fe7bb2566e983440ac8aa8c3c1034102c70d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80636c99832a146100515780637387f44d1461007e57806381b5d291146100bd578063efb36c14146100d0575b600080fd5b61006461005f366004610b75565b6100e3565b604080519283526020830191909152015b60405180910390f35b61009161008c366004610b75565b610128565b6040805173ffffffffffffffffffffffffffffffffffffffff9093168352602083019190915201610075565b6100646100cb366004610b75565b6102ea565b6100646100de366004610b75565b6104ae565b6000806100f084846102ea565b909250905060008061010286866104ae565b90925090506101118285610bd0565b935061011d8184610bd0565b925050509250929050565b60008060008473ffffffffffffffffffffffffffffffffffffffff166399fbab88856040518263ffffffff1660e01b815260040161016891815260200190565b6101206040518083038186803b15801561018157600080fd5b505afa158015610195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b99190610c8a565b9050806000015173ffffffffffffffffffffffffffffffffffffffff1663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561020557600080fd5b505afa158015610219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023d9190610d28565b6040517fd53cfc060000000000000000000000000000000000000000000000000000000081526004810186905290935073ffffffffffffffffffffffffffffffffffffffff86169063d53cfc0690602401604080518083038186803b1580156102a557600080fd5b505afa1580156102b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dd9190610d45565b5080925050509250929050565b60008060008473ffffffffffffffffffffffffffffffffffffffff166399fbab88856040518263ffffffff1660e01b815260040161032a91815260200190565b6101206040518083038186803b15801561034357600080fd5b505afa158015610357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037b9190610c8a565b9050600061038c826040015161055e565b73ffffffffffffffffffffffffffffffffffffffff16905060006103b3836060015161055e565b73ffffffffffffffffffffffffffffffffffffffff1690506000836000015173ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561041757600080fd5b505afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f9190610d28565b73ffffffffffffffffffffffffffffffffffffffff16905061048b83838387602001516fffffffffffffffffffffffffffffffff1660006108f1565b6fffffffffffffffffffffffffffffffff9182169a911698509650505050505050565b6040517fed7bba9a00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063ed7bba9a9060240160806040518083038186803b15801561051957600080fd5b505afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105519190610d69565b5091969095509350505050565b60008060008360020b12610575578260020b610582565b8260020b61058290610d9f565b90506105ad7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610dd8565b62ffffff168111156105eb576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001821661060c5770010000000000000000000000000000000061061e565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610652576ffff97272373d413259a46990580e213a0260801c5b6004821615610671576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610690576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156106af576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156106ce576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156106ed576fff2ea16466c96a3843ec78b326b528610260801c5b608082161561070c576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161561072c576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161561074c576ff987a7253ac413176f2b074cf7815e540260801c5b61040082161561076c576ff3392b0822b70005940c7a398e4b70f30260801c5b61080082161561078c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156107ac576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156107cc576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156107ec576f70d869a156d2a1b890bb3df62baf32f70260801c5b61800082161561080c576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561082d576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561084d576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561086c576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610889576b048a170391f7dc42444e8fa20260801c5b60008460020b13156108c857807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816108c4576108c4610e17565b0490505b6401000000008106156108dc5760016108df565b60005b60ff16602082901c0192505050919050565b6000808486116109165761090f61090a85898987610960565b6109ae565b9050610956565b8685116109335761092c61090a858989876109d2565b9150610956565b61094261090a858789876109d2565b915061095361090a85898887610960565b90505b9550959350505050565b6000811561098957610982858585036c01000000000000000000000000610a23565b90506109a6565b6109a3858585036c01000000000000000000000000610a7f565b90505b949350505050565b806fffffffffffffffffffffffffffffffff811681146109cd57600080fd5b919050565b600081156109fa576109826109ee606087901b86860386610a23565b85808204910615150190565b83610a0c606087901b82860386610a7f565b81610a1957610a19610e17565b0495945050505050565b6000610a30848484610a7f565b90508180610a4057610a40610e17565b83850915610a78577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110610a7457600080fd5b6001015b9392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415610ad75760008411610acc57600080fd5b508290049050610a78565b808411610ae357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610b7257600080fd5b50565b60008060408385031215610b8857600080fd5b8235610b9381610b50565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610be357610be3610ba1565b500190565b604051610120810167ffffffffffffffff81118282101715610c33577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b80516109cd81610b50565b80516fffffffffffffffffffffffffffffffff811681146109cd57600080fd5b8051600281900b81146109cd57600080fd5b805163ffffffff811681146109cd57600080fd5b60006101208284031215610c9d57600080fd5b610ca5610be8565b610cae83610c39565b8152610cbc60208401610c44565b6020820152610ccd60408401610c64565b6040820152610cde60608401610c64565b6060820152610cef60808401610c76565b608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b600060208284031215610d3a57600080fd5b8151610a7881610b50565b60008060408385031215610d5857600080fd5b505080516020909101519092909150565b60008060008060808587031215610d7f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60007f8000000000000000000000000000000000000000000000000000000000000000821415610dd157610dd1610ba1565b5060000390565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000811415610e0e57610e0e610ba1565b60000392915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220ab1d646c73db202a4e725b4ce7c9fe7bb2566e983440ac8aa8c3c1034102c70d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}