{
  "address": "0x254809e3C28Ba1601CaB05E91E0840BbC5cb596e",
  "abi": [
    {
      "inputs": [],
      "name": "NotPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "airdropDistributor",
      "outputs": [
        {
          "internalType": "contract IAirdropDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "cumulativeAirdrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "airdrop0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "airdrop1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "cumulativeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "cumulativeTradingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFee0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradingFee1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "cumulativeTradingVolume",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingVolume0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradingVolume1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_airdropDistributor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "contract IMasterDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb4befeb5367a82d0a1903482bbc0c2bf36af376c473cefe5a5346397abfb929",
  "receipt": {
    "to": null,
    "from": "0x23004B8aD485cEf5C15f8D2868049aB4b2788B0b",
    "contractAddress": "0x254809e3C28Ba1601CaB05E91E0840BbC5cb596e",
    "transactionIndex": 0,
    "gasUsed": "1979035",
    "logsBloom": "0x
    "blockHash": "0xd70452f39b1dbfc54cbdfc451bc0d798ed4139fdda6a55dd5afca822e8cbad2e",
    "transactionHash": "0xeb4befeb5367a82d0a1903482bbc0c2bf36af376c473cefe5a5346397abfb929",
    "logs": [],
    "blockNumber": 96729529,
    "cumulativeGasUsed": "1979035",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f775cf71cf3afe8bafbf3e3b34605380",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"airdropDistributor\",\"outputs\":[{\"internalType\":\"contract IAirdropDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"cumulativeAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"airdrop0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdrop1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"cumulativeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"cumulativeTradingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFee1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"cumulativeTradingVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingVolume0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingVolume1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airdropDistributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"contract IMasterDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cumulativeAirdrop(address)\":{\"details\":\"undistributed and deposited volumes are excluded\"},\"cumulativeFees(address)\":{\"details\":\"fee = swap Fee + flash Fee + airdrop Reward\"},\"cumulativeTradingFees(address)\":{\"details\":\"trading fee = swap Fee + flash Fee\"},\"cumulativeTradingVolume(address)\":{\"details\":\"The trading volume is calculated based on the swap output, not swap input\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cumulativeAirdrop(address)\":{\"notice\":\"returns total airdrop earned so far from the pool\"},\"cumulativeFees(address)\":{\"notice\":\"returns cumulative fees earned so far from the pool\"},\"cumulativeTradingFees(address)\":{\"notice\":\"returns cumulative fees except airdrop earned so far from the pool\"},\"cumulativeTradingVolume(address)\":{\"notice\":\"returns cumulative trading volume from cumulative fees\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dashboard/PoolDashboard.sol\":\"PoolDashboard\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dashboard/PoolDashboard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IAirdropDistributor.sol\\\";\\nimport \\\"../interfaces/IMasterDeployer.sol\\\";\\nimport {IConcentratedLiquidityPool, IConcentratedLiquidityPoolStruct} from \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../interfaces/IAirdropPool.sol\\\";\\nimport \\\"../interfaces/IPoolFeeInfo.sol\\\";\\nimport \\\"../libraries/FullMath.sol\\\";\\nimport \\\"../libraries/TickMath.sol\\\";\\nimport \\\"../libraries/FixedPoint.sol\\\";\\n\\n/// @notice\\ncontract PoolDashboard is Initializable {\\n    IMasterDeployer public masterDeployer;\\n    IAirdropDistributor public airdropDistributor;\\n\\n    error NotPool();\\n\\n    modifier verifyPool(address pool) {\\n        if (!masterDeployer.pools(pool)) revert NotPool();\\n        _;\\n    }\\n\\n    function initialize(address _masterDeployer, address _airdropDistributor) external initializer {\\n        masterDeployer = IMasterDeployer(_masterDeployer);\\n        airdropDistributor = IAirdropDistributor(_airdropDistributor);\\n    }\\n\\n    /// @notice returns cumulative fees earned so far from the pool\\n    /// @dev fee = swap Fee + flash Fee + airdrop Reward\\n    function cumulativeFees(address pool) public view verifyPool(pool) returns (uint256 fee0, uint256 fee1) {\\n        (uint256 down0, uint256 down1) = cumulativeFeesDownSide(pool);\\n        (uint256 up0, uint256 up1) = cumulativeFeesUpSide(pool);\\n        fee0 = down0 + up0;\\n        fee1 = down1 + up1;\\n    }\\n\\n    /// @notice returns cumulative fees except airdrop earned so far from the pool\\n    /// @dev trading fee = swap Fee + flash Fee\\n    function cumulativeTradingFees(address pool) public view verifyPool(pool) returns (uint256 tradingFee0, uint256 tradingFee1) {\\n        (uint256 fee0, uint256 fee1) = cumulativeFees(pool);\\n        (uint256 airdrop0, uint256 airdrop1) = cumulativeAirdrop(pool);\\n        // if the liquidity of pool is zero, airdrop can be greater than fee, but it's edge case\\n        tradingFee0 = fee0 >= airdrop0 ? fee0 - airdrop0 : 0;\\n        tradingFee1 = fee1 >= airdrop1 ? fee1 - airdrop1 : 0;\\n    }\\n\\n    /// @notice returns total airdrop earned so far from the pool\\n    /// @dev undistributed and deposited volumes are excluded\\n    function cumulativeAirdrop(address pool) public view verifyPool(pool) returns (uint256 airdrop0, uint256 airdrop1) {\\n        uint256 length = airdropDistributor.airdropSnapshotLength(pool);\\n        for (uint256 i = 0; i < length; i++) {\\n            // airdrop snapshot history\\n            IAirdropDistributorStruct.AirdropInfo memory snapshot = airdropDistributor.airdropSnapshot(pool, i);\\n\\n            if (snapshot.startTime + 1 weeks < block.timestamp) {\\n                // airdrop finished\\n                airdrop0 += snapshot.amount0;\\n                airdrop1 += snapshot.amount1;\\n            } else {\\n                // ongoing airdrop\\n                uint256 diff = block.timestamp > snapshot.startTime ? block.timestamp - snapshot.startTime : 0;\\n                if (diff >= 604800) {\\n                    // 1 weeks = 604800\\n                    airdrop0 += snapshot.amount0;\\n                    airdrop1 += snapshot.amount1;\\n                } else {\\n                    airdrop0 += FullMath.mulDiv(snapshot.amount0, diff, 1 weeks);\\n                    airdrop1 += FullMath.mulDiv(snapshot.amount1, diff, 1 weeks);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice returns cumulative trading volume from cumulative fees\\n    /// @dev The trading volume is calculated based on the swap output, not swap input\\n    function cumulativeTradingVolume(address pool) public view verifyPool(pool) returns (uint256 tradingVolume0, uint256 tradingVolume1) {\\n        (uint256 tradingFee0, uint256 tradingFee1) = cumulativeTradingFees(pool);\\n\\n        // fee rate of Liquidity Provider (1e6 = 100%)\\n        uint256 swapFee = uint256(IPoolFeeInfo(pool).swapFee());\\n        uint256 protocolFee = IPoolFeeInfo(pool).protocolFee();\\n        uint256 feeRate = FullMath.mulDiv(swapFee, 1e4 - protocolFee, 1e4);\\n\\n        tradingVolume0 = FullMath.mulDiv(FullMath.mulDiv(tradingFee0, 1e6, feeRate), 1e6 - swapFee, 1e6);\\n        tradingVolume1 = FullMath.mulDiv(FullMath.mulDiv(tradingFee1, 1e6, feeRate), 1e6 - swapFee, 1e6);\\n    }\\n\\n    function cumulativeFeesDownSide(address pool) private view returns (uint256 fee0, uint256 fee1) {\\n        int24 nearestTick = IConcentratedLiquidityPool(pool).nearestTick();\\n        uint128 liquidity = IConcentratedLiquidityPool(pool).liquidity();\\n\\n        uint24 tickSpacing = IConcentratedLiquidityPool(pool).tickSpacing();\\n        while (nearestTick != TickMath.MIN_TICK) {\\n            IConcentratedLiquidityPoolStruct.Tick memory tick = IConcentratedLiquidityPool(pool).ticks(nearestTick);\\n            if ((nearestTick / int24(tickSpacing)) % 2 == 0) {\\n                liquidity -= tick.liquidity;\\n            } else {\\n                liquidity += tick.liquidity;\\n            }\\n            (uint256 feeGrowthGlobal0, uint256 feeGrowthGlobal1) = IConcentratedLiquidityPool(pool).rangeFeeGrowth(\\n                tick.previousTick,\\n                nearestTick\\n            );\\n\\n            fee0 += FullMath.mulDiv(liquidity, feeGrowthGlobal0, FixedPoint.Q128);\\n            fee1 += FullMath.mulDiv(liquidity, feeGrowthGlobal1, FixedPoint.Q128);\\n\\n            nearestTick = tick.previousTick;\\n        }\\n    }\\n\\n    function cumulativeFeesUpSide(address pool) private view returns (uint256 fee0, uint256 fee1) {\\n        int24 nearestTick = IConcentratedLiquidityPool(pool).nearestTick();\\n        uint128 liquidity = IConcentratedLiquidityPool(pool).liquidity();\\n\\n        uint24 tickSpacing = IConcentratedLiquidityPool(pool).tickSpacing();\\n        while (nearestTick != TickMath.MAX_TICK) {\\n            IConcentratedLiquidityPoolStruct.Tick memory tick = IConcentratedLiquidityPool(pool).ticks(nearestTick);\\n            (uint256 feeGrowthGlobal0, uint256 feeGrowthGlobal1) = IConcentratedLiquidityPool(pool).rangeFeeGrowth(\\n                nearestTick,\\n                tick.nextTick\\n            );\\n\\n            fee0 += FullMath.mulDiv(liquidity, feeGrowthGlobal0, FixedPoint.Q128);\\n            fee1 += FullMath.mulDiv(liquidity, feeGrowthGlobal1, FixedPoint.Q128);\\n\\n            nearestTick = tick.nextTick;\\n            uint128 tickLiquidity = IConcentratedLiquidityPool(pool).ticks(nearestTick).liquidity;\\n            if ((nearestTick / int24(tickSpacing)) % 2 == 0) {\\n                liquidity += tickLiquidity;\\n            } else {\\n                liquidity -= tickLiquidity;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xefda994a4a1a7fb6c8e8b22cbcf5ed56961427e5030e5447c0bce18c9c5e25da\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAirdropDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IAirdropDistributorEvent {\\n    event Deposit(address indexed pool, address token, uint256 amount, address depositor);\\n\\n    event Airdrop(\\n        address indexed pool,\\n        address token0,\\n        address token1,\\n        uint128 amount0,\\n        uint128 amount1,\\n        uint256 startTime,\\n        uint256 period\\n    );\\n}\\n\\ninterface IAirdropDistributorError {\\n    error NotExists();\\n\\n    error NotPoolToken();\\n\\n    error NotYet();\\n\\n    error NotLPAirdropDistributor();\\n\\n    error Overflow();\\n}\\n\\ninterface IAirdropDistributorStruct {\\n    struct AirdropInfo {\\n        /// @dev the airdrop amount of `token0` for the pool\\n        uint256 amount0;\\n        /// @dev the airdrop amount of `token1` for the pool\\n        uint256 amount1;\\n        /// @dev start time to distribute airdrop\\n        uint256 startTime;\\n    }\\n}\\n\\ninterface IAirdropDistributor is IAirdropDistributorEvent, IAirdropDistributorStruct, IAirdropDistributorError {\\n    /// @notice Number of pools that have ever been deposited\\n    function airdropPoolLength() external view returns (uint256);\\n\\n    /// @notice record of past airdrop information distributed\\n    function airdropSnapshot(address pool, uint256 idx) external view returns (AirdropInfo memory snapshot);\\n\\n    /// @notice Number of airdrop action distributed to the pool\\n    function airdropSnapshotLength(address pool) external view returns (uint256 length);\\n\\n    /// @notice current deposited airdrop information in the pool. amount0 & amount1 will be zero after airdrop allocation\\n    function depositedAirdrop(address pool) external view returns (AirdropInfo memory);\\n\\n    /// @notice the address of airdrop pool\\n    function airdropPool(uint256 idx) external view returns (address);\\n\\n    /// @notice deposit klay to the pool. klay will be distributed to the next epoch\\n    /// @param pool the address of pangea pool to deposit\\n    /// @dev transaction will revert if the asset in the pool is not WKLAY\\n    function depositKlay(address pool) external payable;\\n\\n    /// @notice deposit token to the pool. the token will be distributed to the next epoch\\n    /// @param pool the address of pangea pool to deposit\\n    /// @param token token address to deposit. it must be one of the pools' tokens.\\n    /// @param amount amount of token to deposit\\n    /// @dev Approval (token.approve(airdropDistributor, amount)) must be performed before transaction\\n    function depositToken(\\n        address pool,\\n        address token,\\n        uint128 amount\\n    ) external;\\n\\n    /// @notice airdrop the deposited assets of pool\\n    /// @param pool the address of pangea pool\\n    function airdrop(address pool) external;\\n}\\n\",\"keccak256\":\"0x9f9ac2d26834c2f285386eb425463444c84f059be75cc0288c9c2245fc1b3b96\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAirdropPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IAirdropPool {\\n    function airdrop0PerSecond() external returns (uint256);\\n\\n    function airdrop1PerSecond() external returns (uint256);\\n\\n    function airdropStartTime() external returns (uint256);\\n\\n    function airdropPeriod() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x127717e4d8bd1b38c674e91f5a36d0b2d576e1f2d96eac28e92ddd40c74dade6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMasterDeployer.sol\\\";\\nimport \\\"../libraries/Ticks.sol\\\";\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice Number of ticks on Pool, starts with two ticks (MIN_TICK & MAX_TICK)\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0x1706aece79916f4110bd7575ea4e0f1dd746495be74f5bec8e4d2f2c45615425\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool deployer interface.\\ninterface IMasterDeployer {\\n    // ============ EVENTS ================\\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\\n    event AddToWhitelistFactory(address indexed factory);\\n    event RemoveFromWhitelistFactory(address indexed factory);\\n    event ProtocolFeeToUpdated(address protocolFeeTo);\\n\\n    /// @notice create pool through factory\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n\\n    /// @notice Return the address receiving protocol fees from Pool\\n    function protocolFeeTo() external view returns (address);\\n\\n    /// @notice Return whether the pool was deployed via a deployer\\n    function pools(address pool) external view returns (bool);\\n\\n    /// @notice LP Airdrop Distributor address\\n    function airdropDistributor() external returns (address);\\n\\n    /// @notice Return the number of pools deployed from masterDeployer\\n    function totalPoolsCount() external view returns (uint256 total);\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool);\\n\\n    /// @notice Return the address of Factory deployed pool\\n    function getFactoryAddress(address pool) external view returns (address factory);\\n}\\n\",\"keccak256\":\"0x78e000c156708cab98e97c281e357b4e5e000174f1b914ea5acdcd11181e4203\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolFeeInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPoolFeeInfo {\\n    function protocolFee() external view returns (uint256);\\n\\n    function swapFee() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x8fef4ac22a23159ed377ae5c9da7a73c01e444cee1d37bfc57616e24b99f89dd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary FixedPoint {\\n    uint8 internal constant Q128RES = 128;\\n    uint8 internal constant Q96RES = 96;\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x591a424ebe1e10342bf873b49a85989bcbca4b575846ed3d3f3a194f122fdbbd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\\n/// @dev Handles \\\"phantom overflow\\\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b.\\n            // Compute the product mod 2**256 and mod 2**256 - 1,\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product.\\n            uint256 prod1; // Most significant 256 bits of the product.\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n            // Make sure the result is less than 2**256 -\\n            // also prevents denominator == 0.\\n            require(denominator > prod1);\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n            // Make division exact by subtracting the remainder from [prod1 prod0] -\\n            // compute remainder using mulmod.\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number.\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n            // Factor powers of two out of denominator -\\n            // compute largest power of two divisor of denominator\\n            // (always >= 1).\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two.\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n            // Divide [prod1 prod0] by the factors of two.\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos -\\n            // if twos is zero, then it becomes one.\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256 -\\n            // now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // for four bits. That is, denominator * inv = 1 mod 2**4.\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**8.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**16.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**32.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**64.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**128.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**256.\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        unchecked {\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8211b004be6ff6be30b81fe484544d00c7bb467a4fd2a0d6c60114353e2300cf\",\"license\":\"MIT\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library for computing sqrt price for ticks of size 1.0001, i.e., sqrt(1.0001^tick) as fixed point Q64.96 numbers - supports\\n/// prices between 2**-128 and 2**128 - 1.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/TickMath.sol.\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MIN_TICK).\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MAX_TICK).\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    error TickOutOfBounds();\\n    error PriceOutOfBounds();\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96.\\n    /// @dev Throws if |tick| > max tick.\\n    /// @param tick The input tick for the above formula.\\n    /// @return sqrtPriceX96 Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick.\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        if (absTick > uint256(uint24(MAX_TICK))) revert TickOutOfBounds();\\n        unchecked {\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n            // This divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // We then downcast because we know the result always fits within 160 bits due to our tick input constraint.\\n            // We round up in the division so getTickAtSqrtRatio of the output price is always consistent.\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    function validatePrice(uint160 price) internal pure {\\n        if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio.\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96.\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio.\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // Second inequality must be < because the price can never reach the price at the max tick.\\n        if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n        unchecked {\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number.\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d20064b2a93ccddca358064e4843ebbe8c76fb75c85ce9c95d4050ee10d4ce5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Ticks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\n\\n/// @notice Tick management library for ranged liquidity.\\nlibrary Ticks {\\n    function getMaxLiquidity(uint24 _tickSpacing) internal pure returns (uint128) {\\n        return type(uint128).max / uint128(uint24(TickMath.MAX_TICK) / (2 * uint24(_tickSpacing)));\\n    }\\n\\n    function cross(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 nextTickToCross,\\n        uint160 secondsGrowthGlobal,\\n        uint256 currentLiquidity,\\n        uint256 feeGrowthGlobalA,\\n        uint256 feeGrowthGlobalB,\\n        bool zeroForOne,\\n        uint24 tickSpacing\\n    ) internal returns (uint256, int24) {\\n        ticks[nextTickToCross].secondsGrowthOutside = secondsGrowthGlobal - ticks[nextTickToCross].secondsGrowthOutside;\\n\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside0;\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside1;\\n            nextTickToCross = ticks[nextTickToCross].previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside1;\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside0;\\n            nextTickToCross = ticks[nextTickToCross].nextTick;\\n        }\\n        return (currentLiquidity, nextTickToCross);\\n    }\\n\\n    function insert(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        uint256 feeGrowthGlobal0,\\n        uint256 feeGrowthGlobal1,\\n        uint160 secondsGrowthGlobal,\\n        int24 lowerOld,\\n        int24 lower,\\n        int24 upperOld,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick,\\n        uint160 currentPrice\\n    ) public returns (int24, uint256 numOfInserted) {\\n        require(lower < upper, \\\"WRONG_ORDER\\\");\\n        require(TickMath.MIN_TICK <= lower, \\\"LOWER_RANGE\\\");\\n        require(upper <= TickMath.MAX_TICK, \\\"UPPER_RANGE\\\");\\n\\n        {\\n            // Stack overflow.\\n            uint128 currentLowerLiquidity = ticks[lower].liquidity;\\n            if (currentLowerLiquidity != 0 || lower == TickMath.MIN_TICK) {\\n                // We are adding liquidity to an existing tick.\\n                ticks[lower].liquidity = currentLowerLiquidity + amount;\\n            } else {\\n                // We are inserting a new tick.\\n                int24 oldNextTick;\\n                {\\n                    IConcentratedLiquidityPoolStruct.Tick storage old = ticks[lowerOld];\\n                    oldNextTick = old.nextTick;\\n                    old.nextTick = lower;\\n                    require(\\n                        (old.liquidity != 0 || lowerOld == TickMath.MIN_TICK) && lowerOld < lower && lower < oldNextTick,\\n                        \\\"LOWER_ORDER\\\"\\n                    );\\n                }\\n\\n                if (lower <= nearestTick) {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(\\n                        lowerOld,\\n                        oldNextTick,\\n                        amount,\\n                        feeGrowthGlobal0,\\n                        feeGrowthGlobal1,\\n                        secondsGrowthGlobal\\n                    );\\n                } else {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(lowerOld, oldNextTick, amount, 0, 0, 0);\\n                }\\n\\n                ticks[oldNextTick].previousTick = lower;\\n                numOfInserted += 1;\\n            }\\n        }\\n\\n        uint128 currentUpperLiquidity = ticks[upper].liquidity;\\n        if (currentUpperLiquidity != 0 || upper == TickMath.MAX_TICK) {\\n            // We are adding liquidity to an existing tick.\\n            ticks[upper].liquidity = currentUpperLiquidity + amount;\\n        } else {\\n            // Inserting a new tick.\\n            int24 oldNextTick;\\n            {\\n                IConcentratedLiquidityPoolStruct.Tick storage old = ticks[upperOld];\\n                oldNextTick = old.nextTick;\\n                old.nextTick = upper;\\n                require(old.liquidity != 0 && oldNextTick > upper && upperOld < upper, \\\"UPPER_ORDER\\\");\\n            }\\n\\n            if (upper <= nearestTick) {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(\\n                    upperOld,\\n                    oldNextTick,\\n                    amount,\\n                    feeGrowthGlobal0,\\n                    feeGrowthGlobal1,\\n                    secondsGrowthGlobal\\n                );\\n            } else {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(upperOld, oldNextTick, amount, 0, 0, 0);\\n            }\\n\\n            ticks[oldNextTick].previousTick = upper;\\n            numOfInserted += 1;\\n        }\\n\\n        int24 tickAtPrice = TickMath.getTickAtSqrtRatio(currentPrice);\\n\\n        if (nearestTick < upper && upper <= tickAtPrice) {\\n            nearestTick = upper;\\n        } else if (nearestTick < lower && lower <= tickAtPrice) {\\n            nearestTick = lower;\\n        }\\n\\n        return (nearestTick, numOfInserted);\\n    }\\n\\n    function remove(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick\\n    ) public returns (int24, uint256 numOfRemoved) {\\n        IConcentratedLiquidityPoolStruct.Tick storage current = ticks[lower];\\n\\n        if (lower != TickMath.MIN_TICK && current.liquidity == amount) {\\n            // Delete lower tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == lower) nearestTick = current.previousTick;\\n\\n            delete ticks[lower];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        current = ticks[upper];\\n\\n        if (upper != TickMath.MAX_TICK && current.liquidity == amount) {\\n            // Delete upper tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == upper) nearestTick = current.previousTick;\\n\\n            delete ticks[upper];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        return (nearestTick, numOfRemoved);\\n    }\\n}\\n\",\"keccak256\":\"0x90396c5753a84ef0fd776a206e927d1e4d504f1867fd38fe40d42c7eb8364c7a\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611905806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d0a931731161005b578063d0a931731461010f578063d29be0471461012f578063dbf1333314610142578063dc13fea61461015557600080fd5b80631792acb214610082578063485cc955146100af578063cf58879a146100c4575b600080fd5b61009561009036600461144b565b610168565b604080519283526020830191909152015b60405180910390f35b6100c26100bd366004611468565b6103c9565b005b6000546100ea9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a6565b6001546100ea9073ffffffffffffffffffffffffffffffffffffffff1681565b61009561013d36600461144b565b610567565b61009561015036600461144b565b610895565b61009561016336600461144b565b6109da565b600080546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808516600483015283928592620100009091049091169063a4063dbc9060240160206040518083038186803b1580156101df57600080fd5b505afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021791906114a1565b61024d576040517f6f61f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061025986610895565b9150915060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102a557600080fd5b505afa1580156102b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dd91906114c3565b62ffffff16905060008773ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032c57600080fd5b505afa158015610340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036491906114e8565b905060006103808361037884612710611530565b612710610af6565b90506103a961039386620f424084610af6565b6103a085620f4240611530565b620f4240610af6565b97506103bc61039385620f424084610af6565b9650505050505050915091565b600054610100900460ff166103e45760005460ff16156103e8565b303b155b610478576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840160405180910390fd5b600054610100900460ff161580156104b757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff8681169190910291909117909155600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016918416919091179055801561056257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b600080546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808516600483015283928592620100009091049091169063a4063dbc9060240160206040518083038186803b1580156105de57600080fd5b505afa1580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061691906114a1565b61064c576040517f6f61f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517fc0dcb4d200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152600092169063c0dcb4d29060240160206040518083038186803b1580156106b857600080fd5b505afa1580156106cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f091906114e8565b905060005b8181101561088d576001546040517fb9fc53fd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015260248201849052600092169063b9fc53fd9060440160606040518083038186803b15801561077057600080fd5b505afa158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a89190611547565b905042816040015162093a806107be91906115ca565b10156107e95780516107d090876115ca565b95508060200151856107e291906115ca565b945061087a565b6000816040015142116107fd57600061080c565b604082015161080c9042611530565b905062093a80811061083d57815161082490886115ca565b965081602001518661083691906115ca565b9550610878565b815161084d908262093a80610af6565b61085790886115ca565b965061086b82602001518262093a80610af6565b61087590876115ca565b95505b505b5080610885816115e2565b9150506106f5565b505050915091565b600080546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808516600483015283928592620100009091049091169063a4063dbc9060240160206040518083038186803b15801561090c57600080fd5b505afa158015610920573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094491906114a1565b61097a576040517f6f61f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610986866109da565b9150915060008061099688610567565b91509150818410156109a95760006109b3565b6109b38285611530565b9650808310156109c45760006109ce565b6109ce8184611530565b95505050505050915091565b600080546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808516600483015283928592620100009091049091169063a4063dbc9060240160206040518083038186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8991906114a1565b610abf576040517f6f61f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610acb86610bc8565b91509150600080610adb88610f9f565b9092509050610aea82856115ca565b96506109ce81846115ca565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415610b4e5760008411610b4357600080fd5b508290049050610bc1565b808411610b5a57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663a00e8f296040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1357600080fd5b505afa158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b9190611632565b905060008473ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd919061166d565b905060008573ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1757600080fd5b505afa158015610d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4f91906114c3565b90505b600283900b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276181461088d576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015260009073ffffffffffffffffffffffffffffffffffffffff88169063f30dba939060240160c06040518083038186803b158015610de957600080fd5b505afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e219190611688565b90506002610e2f8386611771565b610e3991906117e5565b60020b610e56576040810151610e4f9084611807565b9250610e68565b6040810151610e659084611838565b92505b80516040517facfe88f8000000000000000000000000000000000000000000000000000000008152600291820b60048201529085900b6024820152600090819073ffffffffffffffffffffffffffffffffffffffff8a169063acfe88f890604401604080518083038186803b158015610ee057600080fd5b505afa158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f18919061186c565b91509150610f4a856fffffffffffffffffffffffffffffffff1683700100000000000000000000000000000000610af6565b610f5490896115ca565b9750610f84856fffffffffffffffffffffffffffffffff1682700100000000000000000000000000000000610af6565b610f8e90886115ca565b965082600001519550505050610d52565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663a00e8f296040518163ffffffff1660e01b815260040160206040518083038186803b158015610fea57600080fd5b505afa158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190611632565b905060008473ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561106c57600080fd5b505afa158015611080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a4919061166d565b905060008573ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112691906114c3565b90505b6111527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618611890565b60020b8360020b1461088d576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015260009073ffffffffffffffffffffffffffffffffffffffff88169063f30dba939060240160c06040518083038186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112029190611688565b60208101516040517facfe88f8000000000000000000000000000000000000000000000000000000008152600287810b60048301529190910b6024820152909150600090819073ffffffffffffffffffffffffffffffffffffffff8a169063acfe88f890604401604080518083038186803b15801561128057600080fd5b505afa158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b8919061186c565b915091506112ea856fffffffffffffffffffffffffffffffff1683700100000000000000000000000000000000610af6565b6112f490896115ca565b9750611324856fffffffffffffffffffffffffffffffff1682700100000000000000000000000000000000610af6565b61132e90886115ca565b60208401516040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b6004820152919850965060009073ffffffffffffffffffffffffffffffffffffffff8b169063f30dba939060240160c06040518083038186803b1580156113a457600080fd5b505afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc9190611688565b60400151905060026113ee8689611771565b6113f891906117e5565b60020b611410576114098187611838565b955061141d565b61141a8187611807565b95505b50505050611129565b73ffffffffffffffffffffffffffffffffffffffff8116811461144857600080fd5b50565b60006020828403121561145d57600080fd5b8135610bc181611426565b6000806040838503121561147b57600080fd5b823561148681611426565b9150602083013561149681611426565b809150509250929050565b6000602082840312156114b357600080fd5b81518015158114610bc157600080fd5b6000602082840312156114d557600080fd5b815162ffffff81168114610bc157600080fd5b6000602082840312156114fa57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561154257611542611501565b500390565b60006060828403121561155957600080fd5b6040516060810181811067ffffffffffffffff821117156115a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b600082198211156115dd576115dd611501565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561161457611614611501565b5060010190565b8051600281900b811461162d57600080fd5b919050565b60006020828403121561164457600080fd5b610bc18261161b565b80516fffffffffffffffffffffffffffffffff8116811461162d57600080fd5b60006020828403121561167f57600080fd5b610bc18261164d565b600060c0828403121561169a57600080fd5b60405160c0810181811067ffffffffffffffff821117156116e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040526116f08361161b565b81526116fe6020840161161b565b602082015261170f6040840161164d565b6040820152606083015160608201526080830151608082015260a083015161173681611426565b60a08201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008160020b8360020b8061178857611788611742565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000831416156117dc576117dc611501565b90059392505050565b60008260020b806117f8576117f8611742565b808360020b0791505092915050565b60006fffffffffffffffffffffffffffffffff8381169083168181101561183057611830611501565b039392505050565b60006fffffffffffffffffffffffffffffffff80831681851680830382111561186357611863611501565b01949350505050565b6000806040838503121561187f57600080fd5b505080516020909101519092909150565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008114156118c6576118c6611501565b6000039291505056fea2646970667358221220acf36253f3aaf2712182dd8d01721fd05f9eccc5082b5853a13b6e36995c1a5564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d0a931731161005b578063d0a931731461010f578063d29be0471461012f578063dbf1333314610142578063dc13fea61461015557600080fd5b80631792acb214610082578063485cc955146100af578063cf58879a146100c4575b600080fd5b61009561009036600461144b565b610168565b604080519283526020830191909152015b60405180910390f35b6100c26100bd366004611468565b6103c9565b005b6000546100ea9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a6565b6001546100ea9073ffffffffffffffffffffffffffffffffffffffff1681565b61009561013d36600461144b565b610567565b61009561015036600461144b565b610895565b61009561016336600461144b565b6109da565b600080546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808516600483015283928592620100009091049091169063a4063dbc9060240160206040518083038186803b1580156101df57600080fd5b505afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021791906114a1565b61024d576040517f6f61f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061025986610895565b9150915060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102a557600080fd5b505afa1580156102b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dd91906114c3565b62ffffff16905060008773ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032c57600080fd5b505afa158015610340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036491906114e8565b905060006103808361037884612710611530565b612710610af6565b90506103a961039386620f424084610af6565b6103a085620f4240611530565b620f4240610af6565b97506103bc61039385620f424084610af6565b9650505050505050915091565b600054610100900460ff166103e45760005460ff16156103e8565b303b155b610478576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840160405180910390fd5b600054610100900460ff161580156104b757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff8681169190910291909117909155600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016918416919091179055801561056257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b600080546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808516600483015283928592620100009091049091169063a4063dbc9060240160206040518083038186803b1580156105de57600080fd5b505afa1580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061691906114a1565b61064c576040517f6f61f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517fc0dcb4d200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152600092169063c0dcb4d29060240160206040518083038186803b1580156106b857600080fd5b505afa1580156106cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f091906114e8565b905060005b8181101561088d576001546040517fb9fc53fd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015260248201849052600092169063b9fc53fd9060440160606040518083038186803b15801561077057600080fd5b505afa158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a89190611547565b905042816040015162093a806107be91906115ca565b10156107e95780516107d090876115ca565b95508060200151856107e291906115ca565b945061087a565b6000816040015142116107fd57600061080c565b604082015161080c9042611530565b905062093a80811061083d57815161082490886115ca565b965081602001518661083691906115ca565b9550610878565b815161084d908262093a80610af6565b61085790886115ca565b965061086b82602001518262093a80610af6565b61087590876115ca565b95505b505b5080610885816115e2565b9150506106f5565b505050915091565b600080546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808516600483015283928592620100009091049091169063a4063dbc9060240160206040518083038186803b15801561090c57600080fd5b505afa158015610920573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094491906114a1565b61097a576040517f6f61f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610986866109da565b9150915060008061099688610567565b91509150818410156109a95760006109b3565b6109b38285611530565b9650808310156109c45760006109ce565b6109ce8184611530565b95505050505050915091565b600080546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808516600483015283928592620100009091049091169063a4063dbc9060240160206040518083038186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8991906114a1565b610abf576040517f6f61f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610acb86610bc8565b91509150600080610adb88610f9f565b9092509050610aea82856115ca565b96506109ce81846115ca565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415610b4e5760008411610b4357600080fd5b508290049050610bc1565b808411610b5a57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663a00e8f296040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1357600080fd5b505afa158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b9190611632565b905060008473ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd919061166d565b905060008573ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1757600080fd5b505afa158015610d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4f91906114c3565b90505b600283900b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276181461088d576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015260009073ffffffffffffffffffffffffffffffffffffffff88169063f30dba939060240160c06040518083038186803b158015610de957600080fd5b505afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e219190611688565b90506002610e2f8386611771565b610e3991906117e5565b60020b610e56576040810151610e4f9084611807565b9250610e68565b6040810151610e659084611838565b92505b80516040517facfe88f8000000000000000000000000000000000000000000000000000000008152600291820b60048201529085900b6024820152600090819073ffffffffffffffffffffffffffffffffffffffff8a169063acfe88f890604401604080518083038186803b158015610ee057600080fd5b505afa158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f18919061186c565b91509150610f4a856fffffffffffffffffffffffffffffffff1683700100000000000000000000000000000000610af6565b610f5490896115ca565b9750610f84856fffffffffffffffffffffffffffffffff1682700100000000000000000000000000000000610af6565b610f8e90886115ca565b965082600001519550505050610d52565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663a00e8f296040518163ffffffff1660e01b815260040160206040518083038186803b158015610fea57600080fd5b505afa158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190611632565b905060008473ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561106c57600080fd5b505afa158015611080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a4919061166d565b905060008573ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112691906114c3565b90505b6111527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618611890565b60020b8360020b1461088d576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015260009073ffffffffffffffffffffffffffffffffffffffff88169063f30dba939060240160c06040518083038186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112029190611688565b60208101516040517facfe88f8000000000000000000000000000000000000000000000000000000008152600287810b60048301529190910b6024820152909150600090819073ffffffffffffffffffffffffffffffffffffffff8a169063acfe88f890604401604080518083038186803b15801561128057600080fd5b505afa158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b8919061186c565b915091506112ea856fffffffffffffffffffffffffffffffff1683700100000000000000000000000000000000610af6565b6112f490896115ca565b9750611324856fffffffffffffffffffffffffffffffff1682700100000000000000000000000000000000610af6565b61132e90886115ca565b60208401516040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b6004820152919850965060009073ffffffffffffffffffffffffffffffffffffffff8b169063f30dba939060240160c06040518083038186803b1580156113a457600080fd5b505afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc9190611688565b60400151905060026113ee8689611771565b6113f891906117e5565b60020b611410576114098187611838565b955061141d565b61141a8187611807565b95505b50505050611129565b73ffffffffffffffffffffffffffffffffffffffff8116811461144857600080fd5b50565b60006020828403121561145d57600080fd5b8135610bc181611426565b6000806040838503121561147b57600080fd5b823561148681611426565b9150602083013561149681611426565b809150509250929050565b6000602082840312156114b357600080fd5b81518015158114610bc157600080fd5b6000602082840312156114d557600080fd5b815162ffffff81168114610bc157600080fd5b6000602082840312156114fa57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561154257611542611501565b500390565b60006060828403121561155957600080fd5b6040516060810181811067ffffffffffffffff821117156115a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b600082198211156115dd576115dd611501565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561161457611614611501565b5060010190565b8051600281900b811461162d57600080fd5b919050565b60006020828403121561164457600080fd5b610bc18261161b565b80516fffffffffffffffffffffffffffffffff8116811461162d57600080fd5b60006020828403121561167f57600080fd5b610bc18261164d565b600060c0828403121561169a57600080fd5b60405160c0810181811067ffffffffffffffff821117156116e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040526116f08361161b565b81526116fe6020840161161b565b602082015261170f6040840161164d565b6040820152606083015160608201526080830151608082015260a083015161173681611426565b60a08201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008160020b8360020b8061178857611788611742565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000831416156117dc576117dc611501565b90059392505050565b60008260020b806117f8576117f8611742565b808360020b0791505092915050565b60006fffffffffffffffffffffffffffffffff8381169083168181101561183057611830611501565b039392505050565b60006fffffffffffffffffffffffffffffffff80831681851680830382111561186357611863611501565b01949350505050565b6000806040838503121561187f57600080fd5b505080516020909101519092909150565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008114156118c6576118c6611501565b6000039291505056fea2646970667358221220acf36253f3aaf2712182dd8d01721fd05f9eccc5082b5853a13b6e36995c1a5564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cumulativeAirdrop(address)": {
        "details": "undistributed and deposited volumes are excluded"
      },
      "cumulativeFees(address)": {
        "details": "fee = swap Fee + flash Fee + airdrop Reward"
      },
      "cumulativeTradingFees(address)": {
        "details": "trading fee = swap Fee + flash Fee"
      },
      "cumulativeTradingVolume(address)": {
        "details": "The trading volume is calculated based on the swap output, not swap input"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cumulativeAirdrop(address)": {
        "notice": "returns total airdrop earned so far from the pool"
      },
      "cumulativeFees(address)": {
        "notice": "returns cumulative fees earned so far from the pool"
      },
      "cumulativeTradingFees(address)": {
        "notice": "returns cumulative fees except airdrop earned so far from the pool"
      },
      "cumulativeTradingVolume(address)": {
        "notice": "returns cumulative trading volume from cumulative fees"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/dashboard/PoolDashboard.sol:PoolDashboard",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/dashboard/PoolDashboard.sol:PoolDashboard",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4270,
        "contract": "contracts/dashboard/PoolDashboard.sol:PoolDashboard",
        "label": "masterDeployer",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IMasterDeployer)6572"
      },
      {
        "astId": 4273,
        "contract": "contracts/dashboard/PoolDashboard.sol:PoolDashboard",
        "label": "airdropDistributor",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAirdropDistributor)5885"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAirdropDistributor)5885": {
        "encoding": "inplace",
        "label": "contract IAirdropDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterDeployer)6572": {
        "encoding": "inplace",
        "label": "contract IMasterDeployer",
        "numberOfBytes": "20"
      }
    }
  }
}