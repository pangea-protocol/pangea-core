{
  "address": "0x205f1095A77D9DDb8C4e708D11D126781506868e",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermitFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TickOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLittleAmountIn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLittleReceived",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolRouter.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolRouter.ExactOutputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolRouter.ExactOutputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactOutputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wETH",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "contract IMasterDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitThis",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitThisAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4da26f4a718bdb08dad11955cb142f9e1b70b06c57c01ac5c60fc4c7ac5b2b31",
  "receipt": {
    "to": null,
    "from": "0x23004B8aD485cEf5C15f8D2868049aB4b2788B0b",
    "contractAddress": "0x205f1095A77D9DDb8C4e708D11D126781506868e",
    "transactionIndex": 0,
    "gasUsed": "5601971",
    "logsBloom": "0x
    "blockHash": "0x8a440f4b1054ac23847df851f32ce00f6066b5891df077c2984991422a4250f8",
    "transactionHash": "0x4da26f4a718bdb08dad11955cb142f9e1b70b06c57c01ac5c60fc4c7ac5b2b31",
    "logs": [],
    "blockNumber": 97485046,
    "cumulativeGasUsed": "5601971",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f01f79503de73c61bcff4c4c934e6fda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TickOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLittleAmountIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"contract IMasterDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitThis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitThisAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((address,uint256,uint256,address[],address,bool))\":{\"params\":{\"params\":\"(uint256 amountIn,uint256 amountOutMinimum, address[] path, address tokenIn, address to, bool unwrap)\"}},\"exactInputSingle((address,uint256,uint256,address,address,bool))\":{\"params\":{\"params\":\"(uint256 amountIn,uint256 amountOutMinimum, address pool, address tokenIn, address to, bool unwrap)\"}},\"exactOutput((address,uint256,uint256,address[],address,bool))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as ExactOutputSingleParams in calldata\"}},\"exactOutputSingle((address,uint256,uint256,address,address,bool))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as ExactOutputSingleParams in calldata\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from this function.\",\"params\":{\"data\":\"ABI-encoded params for each of the calls to make to this contract.\"},\"returns\":{\"results\":\"The results from each of the calls passed in via `data`.\"}},\"permitThis(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Token amount to grant spending right over.\",\"deadline\":\"Termination for signed approval (UTC timestamp in seconds).\",\"r\":\"Half of the ECDSA signature pair.\",\"s\":\"Half of the ECDSA signature pair.\",\"token\":\"Address of ERC-20 token.\",\"v\":\"The recovery byte of the signature.\"}},\"permitThisAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"expiry\":\"Termination for signed approval - UTC timestamp in seconds.\",\"nonce\":\"Token owner's nonce - increases at each call to {permit}.\",\"r\":\"Half of the ECDSA signature pair.\",\"s\":\"Half of the ECDSA signature pair.\",\"token\":\"Address of ERC-20 token.\",\"v\":\"The recovery byte of the signature.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((address,uint256,uint256,address[],address,bool))\":{\"notice\":\"Swaps token A to token B indirectly by using multiple hops.\"},\"exactInputSingle((address,uint256,uint256,address,address,bool))\":{\"notice\":\"Swaps amountIn of one token for as much as possible of another token\"},\"exactOutput((address,uint256,uint256,address[],address,bool))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"exactOutputSingle((address,uint256,uint256,address,address,bool))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"masterDeployer()\":{\"notice\":\"master deployer contract.\"},\"multicall(bytes[])\":{\"notice\":\"Provides batch function calls for this contract and returns the data from all of them if they all succeed. Adapted from https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol, License-Identifier: GPL-2.0-or-later.\"},\"permitThis(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Provides EIP-2612 signed approval for this contract to spend user tokens.\"},\"permitThisAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Provides DAI-derived signed approval for this contract to spend user tokens.\"},\"sweep(address,uint256,address)\":{\"notice\":\"Recover mistakenly sent tokens.\"}},\"notice\":\"Router contract that helps in swapping across pools.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/PoolRouter.sol\":\"PoolRouter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/abstract/PangeaBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Generic contract exposing the batch call functionality.\\nabstract contract PangeaBatchable {\\n    /// @notice Provides batch function calls for this contract and returns the data from all of them if they all succeed.\\n    /// Adapted from https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol, License-Identifier: GPL-2.0-or-later.\\n    /// @dev The `msg.value` should not be trusted for any method callable from this function.\\n    /// @param data ABI-encoded params for each of the calls to make to this contract.\\n    /// @return results The results from each of the calls passed in via `data`.\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            // slither-disable-next-line delegatecall-loop\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b8c3edc07922055cfa812c7e8d47ea8927fc32ba591d2de437fad7218c3dfcd\",\"license\":\"GPL-3.0\"},\"contracts/abstract/PangeaPermit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Generic contract exposing the permit functionality.\\nabstract contract PangeaPermit {\\n    error PermitFailed();\\n\\n    /// @notice Provides EIP-2612 signed approval for this contract to spend user tokens.\\n    /// @param token Address of ERC-20 token.\\n    /// @param amount Token amount to grant spending right over.\\n    /// @param deadline Termination for signed approval (UTC timestamp in seconds).\\n    /// @param v The recovery byte of the signature.\\n    /// @param r Half of the ECDSA signature pair.\\n    /// @param s Half of the ECDSA signature pair.\\n    function permitThis(\\n        address token,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        (bool success, ) = token.call(abi.encodeWithSelector(0xd505accf, msg.sender, address(this), amount, deadline, v, r, s)); // permit(address,address,uint256,uint256,uint8,bytes32,bytes32).\\n        if (!success) revert PermitFailed();\\n    }\\n\\n    /// @notice Provides DAI-derived signed approval for this contract to spend user tokens.\\n    /// @param token Address of ERC-20 token.\\n    /// @param nonce Token owner's nonce - increases at each call to {permit}.\\n    /// @param expiry Termination for signed approval - UTC timestamp in seconds.\\n    /// @param v The recovery byte of the signature.\\n    /// @param r Half of the ECDSA signature pair.\\n    /// @param s Half of the ECDSA signature pair.\\n    function permitThisAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        (bool success, ) = token.call(abi.encodeWithSelector(0x8fcbaf0c, msg.sender, address(this), nonce, expiry, true, v, r, s)); // permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32).\\n        if (!success) revert PermitFailed();\\n    }\\n}\\n\",\"keccak256\":\"0x4b74b2bb723aefd06b064f16bcf714e0c1b92cb8f4ac213ad0db873664ee4421\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMasterDeployer.sol\\\";\\nimport \\\"../libraries/Ticks.sol\\\";\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice Number of ticks on Pool, starts with two ticks (MIN_TICK & MAX_TICK)\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0xb03df0ceac3b4385700afae66b72c99030843399c5efd1dfd2615d233f9facda\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool deployer interface.\\ninterface IMasterDeployer {\\n    // ============ EVENTS ================\\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\\n    event AddToWhitelistFactory(address indexed factory);\\n    event RemoveFromWhitelistFactory(address indexed factory);\\n    event ProtocolFeeToUpdated(address protocolFeeTo);\\n\\n    /// @notice create pool through factory\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n\\n    /// @notice Return the address receiving protocol fees from Pool\\n    function protocolFeeTo() external view returns (address);\\n\\n    /// @notice Return whether the pool was deployed via a deployer\\n    function pools(address pool) external view returns (bool);\\n\\n    /// @notice LP Airdrop Distributor address\\n    function airdropDistributor() external returns (address);\\n\\n    /// @notice Return the number of pools deployed from masterDeployer\\n    function totalPoolsCount() external view returns (uint256 total);\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool);\\n\\n    /// @notice Return the address of Factory deployed pool\\n    function getFactoryAddress(address pool) external view returns (address factory);\\n}\\n\",\"keccak256\":\"0x78e000c156708cab98e97c281e357b4e5e000174f1b914ea5acdcd11181e4203\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool router interface.\\ninterface IPoolRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn; /// @dev the input token address. If tokenIn is address(0), msg.value will be wrapped and used as input token\\n        uint256 amountIn; /// @dev The amount of input tokens to send\\n        uint256 amountOutMinimum; /// @dev minimum required amount of output token after swap\\n        address pool; /// @dev pool address to swap\\n        address to; /// @dev address to receive\\n        bool unwrap; /// @dev unwrap if output token is wrapped klay\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn; /// @dev the token address to swap-in. If tokenIn is address(0), msg.value will be wrapped and used as input token\\n        uint256 amountIn; /// @dev The amount of input tokens to send.\\n        uint256 amountOutMinimum; /// @dev minimum required amount of output token after swap\\n        address[] path; /// @dev An array of pool addresses to pass through\\n        address to; /// @dev recipient of the output tokens\\n        bool unwrap; /// @dev unwrap if output token is wrapped klay\\n    }\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn; /// @dev the input token address. If tokenIn is address(0), msg.value will be wrapped and used as input token\\n        uint256 amountOut; /// @dev The amount of output tokens to receive\\n        uint256 amountInMaximum; /// @dev maximum available amount of input token after swap\\n        address pool; /// @dev pool address to swap\\n        address to; /// @dev address to receive\\n        bool unwrap; /// @dev unwrap if output token is wrapped klay\\n    }\\n\\n    struct ExactOutputParams {\\n        address tokenIn; /// @dev the token address to swap-in. If tokenIn is address(0), msg.value will be wrapped and used as input token\\n        uint256 amountOut; /// @dev The amount of output tokens to receive\\n        uint256 amountInMaximum; /// @dev  maximum available amount of input token after swap\\n        address[] path; /// @dev An array of pool addresses to pass through\\n        address to; /// @dev recipient of the output tokens\\n        bool unwrap; /// @dev unwrap if output token is wrapped klay\\n    }\\n\\n    /// @notice Swap amountIn of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as ExactInputSingleParams in calldata\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swap amountIn of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as ExactInputParams in calldata\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as ExactOutputSingleParams in calldata\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as ExactOutputParams in calldata\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    /// @notice Recover mistakenly sent tokens\\n    function sweep(\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x320763d9437610ba1f89f9ba19cee26508488ad56c5afb5e500fb4dddaebc870\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function depositTo(address to) external payable;\\n\\n    function withdrawTo(address payable to, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x3df7d2d850b39e7532c1370d414ba6f225a07fa3d176cafcdb70f330e15a1c1b\",\"license\":\"GPL-3.0\"},\"contracts/libraries/DyDxMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n/// @notice Math library that facilitates ranged liquidity calculations.\\nlibrary DyDxMath {\\n    function getDy(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dy) {\\n        unchecked {\\n            if (roundUp) {\\n                dy = FullMath.mulDivRoundingUp(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            } else {\\n                dy = FullMath.mulDiv(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            }\\n        }\\n    }\\n\\n    function getDx(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dx) {\\n        unchecked {\\n            if (roundUp) {\\n                dx = UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper),\\n                    priceLower\\n                );\\n            } else {\\n                dx = FullMath.mulDiv(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper) / priceLower;\\n            }\\n        }\\n    }\\n\\n    function getLiquidityForAmounts(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 dy,\\n        uint256 dx\\n    ) internal pure returns (uint256 liquidity) {\\n        unchecked {\\n            if (priceUpper <= currentPrice) {\\n                liquidity = FullMath.mulDiv(dy, FixedPoint.Q96, priceUpper - priceLower);\\n            } else if (currentPrice <= priceLower) {\\n                liquidity = FullMath.mulDiv(dx, FullMath.mulDiv(priceLower, priceUpper, FixedPoint.Q96), priceUpper - priceLower);\\n            } else {\\n                uint256 liquidity0 = FullMath.mulDiv(\\n                    dx,\\n                    FullMath.mulDiv(priceUpper, currentPrice, FixedPoint.Q96),\\n                    priceUpper - currentPrice\\n                );\\n                uint256 liquidity1 = FullMath.mulDiv(dy, FixedPoint.Q96, currentPrice - priceLower);\\n                liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n            }\\n        }\\n    }\\n\\n    function getAmountsForLiquidity(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 liquidityAmount,\\n        bool roundUp\\n    ) internal pure returns (uint128 token0amount, uint128 token1amount) {\\n        if (priceUpper <= currentPrice) {\\n            // Only supply `token1` (`token1` is Y).\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else if (currentPrice <= priceLower) {\\n            // Only supply `token0` (`token0` is X).\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else {\\n            // Supply both tokens.\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, currentPrice, priceUpper, roundUp));\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, currentPrice, roundUp));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd7e93680c237fbda55c989b3bbf3dcd14c4df5d40a0a9a997325d8a539f80cc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary FixedPoint {\\n    uint8 internal constant Q128RES = 128;\\n    uint8 internal constant Q96RES = 96;\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x591a424ebe1e10342bf873b49a85989bcbca4b575846ed3d3f3a194f122fdbbd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\\n/// @dev Handles \\\"phantom overflow\\\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b.\\n            // Compute the product mod 2**256 and mod 2**256 - 1,\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product.\\n            uint256 prod1; // Most significant 256 bits of the product.\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n            // Make sure the result is less than 2**256 -\\n            // also prevents denominator == 0.\\n            require(denominator > prod1);\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n            // Make division exact by subtracting the remainder from [prod1 prod0] -\\n            // compute remainder using mulmod.\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number.\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n            // Factor powers of two out of denominator -\\n            // compute largest power of two divisor of denominator\\n            // (always >= 1).\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two.\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n            // Divide [prod1 prod0] by the factors of two.\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos -\\n            // if twos is zero, then it becomes one.\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256 -\\n            // now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // for four bits. That is, denominator * inv = 1 mod 2**4.\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**8.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**16.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**32.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**64.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**128.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**256.\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        unchecked {\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8211b004be6ff6be30b81fe484544d00c7bb467a4fd2a0d6c60114353e2300cf\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary SafeCast {\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        require((z = uint128(y)) == y);\\n    }\\n\\n    function toInt128(uint256 y) internal pure returns (int128 z) {\\n        require(y <= 2**127 - 1);\\n        return int128(int256(y));\\n    }\\n}\\n\",\"keccak256\":\"0x26f130f9e37749f36d7c61bb818227d0ef4e089695be0009e9b626e63c7753c3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/SwapHelperLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IConcentratedLiquidityPool as CLPool} from \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../libraries/DyDxMath.sol\\\";\\nimport \\\"../libraries/TickMath.sol\\\";\\nimport \\\"../libraries/FullMath.sol\\\";\\n\\nlibrary SwapHelperLib {\\n    struct SwapCache {\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        uint256 output;\\n        int24 nextTickToCross;\\n    }\\n\\n    function exactInput(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountIn\\n    ) internal view returns (uint256 amountOut, uint256 price) {\\n        bool zeroForOne = determineZeroForOne(pool, tokenIn);\\n        uint24 swapFee = CLPool(pool).swapFee();\\n        int24 iTickSpacing = int24(CLPool(pool).tickSpacing());\\n\\n        // initialize cache\\n        SwapCache memory cache;\\n        {\\n            (uint160 currentPrice, int24 nearestTick) = CLPool(pool).getPriceAndNearestTicks();\\n            cache = SwapCache({\\n                currentPrice: currentPrice,\\n                currentLiquidity: uint256(CLPool(pool).liquidity()),\\n                input: exactAmountIn,\\n                output: 0,\\n                nextTickToCross: zeroForOne ? nearestTick : CLPool(pool).ticks(nearestTick).nextTick\\n            });\\n        }\\n        if (zeroLiquidity(cache)) return (0, cache.currentPrice);\\n\\n        while (cache.input != 0) {\\n            uint256 nextTickPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n            uint256 output = 0;\\n            bool cross = false;\\n\\n            if (zeroForOne) {\\n                // Trading token 0 (x) for token 1 (y).\\n                // Price is decreasing.\\n                // Maximum input amount within current tick range: \\u0394x = \\u0394(1/\\u221a\\ud835\\udc43) \\u00b7 L.\\n                uint256 maxDx = DyDxMath.getDx(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n\\n                if (cache.input <= maxDx) {\\n                    // We can swap within the current range.\\n                    uint256 liquidityPadded = cache.currentLiquidity << FixedPoint.Q96RES;\\n                    // Calculate new price after swap: \\u221a\\ud835\\udc43[new] =  L \\u00b7 \\u221a\\ud835\\udc43 / (L + \\u0394x \\u00b7 \\u221a\\ud835\\udc43)\\n                    // This is derived from \\u0394(1/\\u221a\\ud835\\udc43) = \\u0394x/L\\n                    // where \\u0394(1/\\u221a\\ud835\\udc43) is 1/\\u221a\\ud835\\udc43[old] - 1/\\u221a\\ud835\\udc43[new] and we solve for \\u221a\\ud835\\udc43[new].\\n                    // In case of an overflow we can use: \\u221a\\ud835\\udc43[new] = L / (L / \\u221a\\ud835\\udc43 + \\u0394x).\\n                    // This is derived by dividing the original fraction by \\u221a\\ud835\\udc43 on both sides.\\n                    uint256 newPrice = uint256(\\n                        FullMath.mulDivRoundingUp(liquidityPadded, cache.currentPrice, liquidityPadded + cache.currentPrice * cache.input)\\n                    );\\n\\n                    if (!(nextTickPrice <= newPrice && newPrice < cache.currentPrice)) {\\n                        // Overflow. We use a modified version of the formula.\\n                        newPrice = uint160(UnsafeMath.divRoundingUp(liquidityPadded, liquidityPadded / cache.currentPrice + cache.input));\\n                    }\\n                    // Based on the price difference calculate the output of th swap: \\u0394y = \\u0394\\u221aP \\u00b7 L.\\n                    output = DyDxMath.getDy(cache.currentLiquidity, newPrice, cache.currentPrice, false);\\n                    cache.currentPrice = newPrice;\\n                    cache.input = 0;\\n                } else {\\n                    // Execute swap step and cross the tick.\\n                    output = DyDxMath.getDy(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n                    cache.currentPrice = nextTickPrice;\\n                    cross = true;\\n                    cache.input -= maxDx;\\n                }\\n            } else {\\n                // Price is increasing.\\n                // Maximum swap amount within the current tick range: \\u0394y = \\u0394\\u221aP \\u00b7 L.\\n                uint256 maxDy = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n\\n                if (cache.input <= maxDy) {\\n                    // We can swap within the current range.\\n                    // Calculate new price after swap: \\u0394P = \\u0394y/L.\\n                    uint256 newPrice = cache.currentPrice + FullMath.mulDiv(cache.input, FixedPoint.Q96, cache.currentLiquidity);\\n                    // Calculate output of swap\\n                    // - \\u0394x = \\u0394(1/\\u221aP) \\u00b7 L.\\n                    output = DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, newPrice, false);\\n                    cache.currentPrice = newPrice;\\n                    cache.input = 0;\\n                } else {\\n                    // Swap & cross the tick.\\n                    output = DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n                    cache.currentPrice = nextTickPrice;\\n                    cross = true;\\n                    cache.input -= maxDy;\\n                }\\n            }\\n\\n            amountOut += amountWithOutFee(output, swapFee);\\n\\n            if (cross) {\\n                (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n\\n                if (cache.currentLiquidity == 0) {\\n                    if (cache.nextTickToCross == TickMath.MAX_TICK || cache.nextTickToCross == TickMath.MIN_TICK) {\\n                        // In the case of the last tick, there is no next tick.\\n                        // price must be crossed because of rangeFeeGrowth\\n                        if (zeroForOne) {\\n                            cache.currentPrice = Math.max(cache.currentPrice - 1, TickMath.MIN_SQRT_RATIO);\\n                        } else {\\n                            cache.currentPrice = Math.min(cache.currentPrice + 1, TickMath.MAX_SQRT_RATIO - 1);\\n                        }\\n                        break;\\n                    }\\n                    cache.currentPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n                    (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n                }\\n            }\\n        }\\n\\n        price = cache.currentPrice;\\n    }\\n\\n    function exactOutput(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountOut\\n    ) internal view returns (uint256 amountIn, uint256 price) {\\n        bool zeroForOne = determineZeroForOne(pool, tokenIn);\\n        uint24 swapFee = CLPool(pool).swapFee();\\n        int24 iTickSpacing = int24(CLPool(pool).tickSpacing());\\n\\n        // initialize cache\\n        SwapCache memory cache;\\n        {\\n            (uint160 currentPrice, int24 nearestTick) = CLPool(pool).getPriceAndNearestTicks();\\n            cache = SwapCache({\\n                currentPrice: currentPrice,\\n                currentLiquidity: uint256(CLPool(pool).liquidity()),\\n                input: 0,\\n                output: exactAmountOut,\\n                nextTickToCross: zeroForOne ? nearestTick : CLPool(pool).ticks(nearestTick).nextTick\\n            });\\n        }\\n        if (zeroLiquidity(cache)) return (0, cache.currentPrice);\\n\\n        while (cache.output != 0) {\\n            uint256 nextTickPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n            uint256 input = 0;\\n            bool cross = false;\\n\\n            if (zeroForOne) {\\n                uint256 maxDy = amountWithOutFee(DyDxMath.getDy(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false), swapFee);\\n\\n                if (cache.output <= maxDy) {\\n                    uint256 newPrice = cache.currentPrice -\\n                        FullMath.mulDivRoundingUp(amountWithFee(cache.output, swapFee), FixedPoint.Q96, cache.currentLiquidity);\\n                    input = DyDxMath.getDx(cache.currentLiquidity, newPrice, cache.currentPrice, true);\\n\\n                    cache.currentPrice = newPrice;\\n                    cache.output = 0;\\n                } else {\\n                    input = DyDxMath.getDx(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n\\n                    cache.currentPrice = nextTickPrice;\\n                    cache.output -= maxDy;\\n                    cross = true;\\n                }\\n            } else {\\n                uint256 maxDx = amountWithOutFee(DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false), swapFee);\\n\\n                if (cache.output <= maxDx) {\\n                    uint256 liquidityPadded = cache.currentLiquidity << FixedPoint.Q96RES;\\n                    uint256 newPrice = uint256(\\n                        FullMath.mulDivRoundingUp(\\n                            liquidityPadded,\\n                            cache.currentPrice,\\n                            liquidityPadded - cache.currentPrice * amountWithFee(cache.output, swapFee)\\n                        )\\n                    );\\n\\n                    if (!(cache.currentPrice <= newPrice && newPrice < nextTickPrice)) {\\n                        // Overflow. We use a modified version of the formula.\\n                        newPrice = uint160(\\n                            UnsafeMath.divRoundingUp(\\n                                liquidityPadded,\\n                                liquidityPadded / cache.currentPrice - amountWithFee(cache.output, swapFee)\\n                            )\\n                        );\\n                    }\\n\\n                    input = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, newPrice, true);\\n\\n                    cache.currentPrice = newPrice;\\n                    cache.output = 0;\\n                } else {\\n                    input = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n\\n                    cache.currentPrice = nextTickPrice;\\n                    cache.output -= maxDx;\\n                    cross = true;\\n                }\\n            }\\n            amountIn += input;\\n\\n            if (cross) {\\n                (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n\\n                if (cache.currentLiquidity == 0) {\\n                    if (cache.nextTickToCross == TickMath.MAX_TICK || cache.nextTickToCross == TickMath.MIN_TICK) {\\n                        // In the case of the last tick, there is no next tick.\\n                        // price must be crossed because of rangeFeeGrowth\\n                        if (zeroForOne) {\\n                            cache.currentPrice = Math.max(cache.currentPrice - 1, TickMath.MIN_SQRT_RATIO);\\n                        } else {\\n                            cache.currentPrice = Math.min(cache.currentPrice + 1, TickMath.MAX_SQRT_RATIO - 1);\\n                        }\\n                        break;\\n                    }\\n                    cache.currentPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n                    (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n                }\\n            }\\n        }\\n        price = cache.currentPrice;\\n        require(cache.output == 0, \\\"INSUFFICIENT OUTPUT\\\");\\n    }\\n\\n    function crossTick(\\n        address pool,\\n        SwapCache memory cache,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) private view returns (uint256 currentLiquidity, int24 nextTickToCross) {\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n            unchecked {\\n                if ((cache.nextTickToCross / tickSpacing) % 2 == 0) {\\n                    currentLiquidity = cache.currentLiquidity - CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                } else {\\n                    currentLiquidity = cache.currentLiquidity + CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                }\\n            }\\n            nextTickToCross = CLPool(pool).ticks(cache.nextTickToCross).previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n            unchecked {\\n                if ((cache.nextTickToCross / tickSpacing) % 2 == 0) {\\n                    currentLiquidity = cache.currentLiquidity + CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                } else {\\n                    currentLiquidity = cache.currentLiquidity - CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                }\\n            }\\n            nextTickToCross = CLPool(pool).ticks(cache.nextTickToCross).nextTick;\\n        }\\n    }\\n\\n    function zeroLiquidity(SwapCache memory cache) internal pure returns (bool) {\\n        if (cache.currentLiquidity > 0) {\\n            return false;\\n        }\\n        return cache.nextTickToCross == TickMath.MIN_TICK || cache.nextTickToCross == TickMath.MAX_TICK;\\n    }\\n\\n    function amountWithFee(uint256 amount, uint256 swapFee) private pure returns (uint256) {\\n        return FullMath.mulDivRoundingUp(amount, 1e6, 1e6 - swapFee);\\n    }\\n\\n    function amountWithOutFee(uint256 amount, uint256 swapFee) private pure returns (uint256) {\\n        return amount - FullMath.mulDivRoundingUp(amount, swapFee, 1e6);\\n    }\\n\\n    function determineZeroForOne(address pool, address tokenIn) private view returns (bool) {\\n        return CLPool(pool).token0() == tokenIn;\\n    }\\n}\\n\",\"keccak256\":\"0xea8c2ca44a5dc4621a6c59f164ab756e05642c849840ebe9e8d075e8e74a40d4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library for computing sqrt price for ticks of size 1.0001, i.e., sqrt(1.0001^tick) as fixed point Q64.96 numbers - supports\\n/// prices between 2**-128 and 2**128 - 1.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/TickMath.sol.\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MIN_TICK).\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MAX_TICK).\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    error TickOutOfBounds();\\n    error PriceOutOfBounds();\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96.\\n    /// @dev Throws if |tick| > max tick.\\n    /// @param tick The input tick for the above formula.\\n    /// @return sqrtPriceX96 Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick.\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        if (absTick > uint256(uint24(MAX_TICK))) revert TickOutOfBounds();\\n        unchecked {\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n            // This divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // We then downcast because we know the result always fits within 160 bits due to our tick input constraint.\\n            // We round up in the division so getTickAtSqrtRatio of the output price is always consistent.\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    function validatePrice(uint160 price) internal pure {\\n        if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio.\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96.\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio.\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // Second inequality must be < because the price can never reach the price at the max tick.\\n        if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n        unchecked {\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number.\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d20064b2a93ccddca358064e4843ebbe8c76fb75c85ce9c95d4050ee10d4ce5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Ticks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\n\\n/// @notice Tick management library for ranged liquidity.\\nlibrary Ticks {\\n    function getMaxLiquidity(uint24 _tickSpacing) internal pure returns (uint128) {\\n        return type(uint128).max / uint128(uint24(TickMath.MAX_TICK) / (2 * uint24(_tickSpacing)));\\n    }\\n\\n    function cross(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 nextTickToCross,\\n        uint160 secondsGrowthGlobal,\\n        uint256 currentLiquidity,\\n        uint256 feeGrowthGlobalA,\\n        uint256 feeGrowthGlobalB,\\n        bool zeroForOne,\\n        uint24 tickSpacing\\n    ) internal returns (uint256, int24) {\\n        ticks[nextTickToCross].secondsGrowthOutside = secondsGrowthGlobal - ticks[nextTickToCross].secondsGrowthOutside;\\n\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside0;\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside1;\\n            nextTickToCross = ticks[nextTickToCross].previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside1;\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside0;\\n            nextTickToCross = ticks[nextTickToCross].nextTick;\\n        }\\n        return (currentLiquidity, nextTickToCross);\\n    }\\n\\n    function insert(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        uint256 feeGrowthGlobal0,\\n        uint256 feeGrowthGlobal1,\\n        uint160 secondsGrowthGlobal,\\n        int24 lowerOld,\\n        int24 lower,\\n        int24 upperOld,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick,\\n        uint160 currentPrice\\n    ) public returns (int24, uint256 numOfInserted) {\\n        require(lower < upper, \\\"WRONG_ORDER\\\");\\n        require(TickMath.MIN_TICK <= lower, \\\"LOWER_RANGE\\\");\\n        require(upper <= TickMath.MAX_TICK, \\\"UPPER_RANGE\\\");\\n\\n        {\\n            // Stack overflow.\\n            uint128 currentLowerLiquidity = ticks[lower].liquidity;\\n            if (currentLowerLiquidity != 0 || lower == TickMath.MIN_TICK) {\\n                // We are adding liquidity to an existing tick.\\n                ticks[lower].liquidity = currentLowerLiquidity + amount;\\n            } else {\\n                // We are inserting a new tick.\\n                int24 oldNextTick;\\n                {\\n                    IConcentratedLiquidityPoolStruct.Tick storage old = ticks[lowerOld];\\n                    oldNextTick = old.nextTick;\\n                    old.nextTick = lower;\\n                    require(\\n                        (old.liquidity != 0 || lowerOld == TickMath.MIN_TICK) && lowerOld < lower && lower < oldNextTick,\\n                        \\\"LOWER_ORDER\\\"\\n                    );\\n                }\\n\\n                if (lower <= nearestTick) {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(\\n                        lowerOld,\\n                        oldNextTick,\\n                        amount,\\n                        feeGrowthGlobal0,\\n                        feeGrowthGlobal1,\\n                        secondsGrowthGlobal\\n                    );\\n                } else {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(lowerOld, oldNextTick, amount, 0, 0, 0);\\n                }\\n\\n                ticks[oldNextTick].previousTick = lower;\\n                numOfInserted += 1;\\n            }\\n        }\\n\\n        uint128 currentUpperLiquidity = ticks[upper].liquidity;\\n        if (currentUpperLiquidity != 0 || upper == TickMath.MAX_TICK) {\\n            // We are adding liquidity to an existing tick.\\n            ticks[upper].liquidity = currentUpperLiquidity + amount;\\n        } else {\\n            // Inserting a new tick.\\n            int24 oldNextTick;\\n            {\\n                IConcentratedLiquidityPoolStruct.Tick storage old = ticks[upperOld];\\n                oldNextTick = old.nextTick;\\n                old.nextTick = upper;\\n                require(old.liquidity != 0 && oldNextTick > upper && upperOld < upper, \\\"UPPER_ORDER\\\");\\n            }\\n\\n            if (upper <= nearestTick) {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(\\n                    upperOld,\\n                    oldNextTick,\\n                    amount,\\n                    feeGrowthGlobal0,\\n                    feeGrowthGlobal1,\\n                    secondsGrowthGlobal\\n                );\\n            } else {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(upperOld, oldNextTick, amount, 0, 0, 0);\\n            }\\n\\n            ticks[oldNextTick].previousTick = upper;\\n            numOfInserted += 1;\\n        }\\n\\n        int24 tickAtPrice = TickMath.getTickAtSqrtRatio(currentPrice);\\n\\n        if (nearestTick < upper && upper <= tickAtPrice) {\\n            nearestTick = upper;\\n        } else if (nearestTick < lower && lower <= tickAtPrice) {\\n            nearestTick = lower;\\n        }\\n\\n        return (nearestTick, numOfInserted);\\n    }\\n\\n    function remove(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick\\n    ) public returns (int24, uint256 numOfRemoved) {\\n        IConcentratedLiquidityPoolStruct.Tick storage current = ticks[lower];\\n\\n        if (lower != TickMath.MIN_TICK && current.liquidity == amount) {\\n            // Delete lower tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == lower) nearestTick = current.previousTick;\\n\\n            delete ticks[lower];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        current = ticks[upper];\\n\\n        if (upper != TickMath.MAX_TICK && current.liquidity == amount) {\\n            // Delete upper tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == upper) nearestTick = current.previousTick;\\n\\n            delete ticks[upper];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        return (nearestTick, numOfRemoved);\\n    }\\n}\\n\",\"keccak256\":\"0x90396c5753a84ef0fd776a206e927d1e4d504f1867fd38fe40d42c7eb8364c7a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that contains methods that perform common math functions but do not do any overflow or underflow checks.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/UnsafeMath.sol.\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y).\\n    /// @dev Division by 0 has unspecified behavior, and must be checked externally.\\n    /// @param x The dividend.\\n    /// @param y The divisor.\\n    /// @return z The quotient, ceil(x / y).\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea315497f3b3f0dcf40535dd8a130e3615ffaaa18a735eb6ec48f990fac148a0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/pool/PoolRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPoolRouter.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../abstract/PangeaBatchable.sol\\\";\\nimport \\\"../abstract/PangeaPermit.sol\\\";\\nimport \\\"../libraries/SwapHelperLib.sol\\\";\\n\\n/// @notice Router contract that helps in swapping across pools.\\ncontract PoolRouter is PangeaPermit, PangeaBatchable, IPoolRouter, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice master deployer contract.\\n    IMasterDeployer public masterDeployer;\\n    /// @notice ERC-20 token for wrapped KLAY (v10).\\n    address payable internal wETH;\\n    /// @notice The user should use 0x0 if they want to deposit KLAY\\n    address constant USE_KLAY = address(0);\\n\\n    mapping(address => bool) internal whitelistedPools;\\n\\n    // Custom Errors\\n    error TooLittleReceived();\\n    error TooLittleAmountIn();\\n    error InvalidPool();\\n\\n    function initialize(address _masterDeployer, address _wETH) external initializer {\\n        masterDeployer = IMasterDeployer(_masterDeployer);\\n        wETH = payable(_wETH);\\n    }\\n\\n    /// @notice Swaps amountIn of one token for as much as possible of another token\\n    /// @param params (uint256 amountIn,uint256 amountOutMinimum, address pool, address tokenIn, address to, bool unwrap)\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut) {\\n        _transfer(params.tokenIn, msg.sender, params.pool, params.amountIn);\\n\\n        IConcentratedLiquidityPool pool = IConcentratedLiquidityPool(params.pool);\\n        isWhiteListed(address(pool));\\n        address tokenIn = params.tokenIn == USE_KLAY ? wETH : params.tokenIn;\\n\\n        bool zeroForOne = pool.token0() == tokenIn;\\n\\n        if (params.unwrap) {\\n            amountOut = pool.swap(abi.encode(zeroForOne, address(this)));\\n            IWETH(wETH).withdrawTo(payable(params.to), amountOut);\\n        } else {\\n            amountOut = pool.swap(abi.encode(zeroForOne, params.to));\\n        }\\n\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps token A to token B indirectly by using multiple hops.\\n    /// @param params (uint256 amountIn,uint256 amountOutMinimum, address[] path, address tokenIn, address to, bool unwrap)\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut) {\\n        _transfer(params.tokenIn, msg.sender, params.path[0], params.amountIn);\\n\\n        address tokenIn = params.tokenIn == USE_KLAY ? wETH : params.tokenIn;\\n        uint256 pathLength = params.path.length;\\n        IConcentratedLiquidityPool pool;\\n        bool zeroForOne;\\n        for (uint256 i = 0; i < pathLength - 1; i = _increment(i)) {\\n            pool = IConcentratedLiquidityPool(params.path[i]);\\n            isWhiteListed(address(pool));\\n\\n            zeroForOne = pool.token0() == tokenIn;\\n            amountOut = pool.swap(abi.encode(zeroForOne, params.path[i + 1]));\\n            tokenIn = zeroForOne ? pool.token1() : pool.token0(); // nextTokenIn\\n        }\\n\\n        pool = IConcentratedLiquidityPool(params.path[pathLength - 1]);\\n        isWhiteListed(address(pool));\\n\\n        zeroForOne = pool.token0() == tokenIn;\\n        if (params.unwrap) {\\n            amountOut = pool.swap(abi.encode(zeroForOne, address(this)));\\n            IWETH(wETH).withdrawTo(payable(params.to), amountOut);\\n        } else {\\n            amountOut = pool.swap(abi.encode(zeroForOne, params.to));\\n        }\\n\\n        // @dev Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as ExactOutputSingleParams in calldata\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn) {\\n        address tokenIn = params.tokenIn == USE_KLAY ? wETH : params.tokenIn;\\n        (amountIn, ) = SwapHelperLib.exactOutput(params.pool, tokenIn, params.amountOut);\\n        if (params.amountInMaximum < amountIn) revert TooLittleAmountIn();\\n        if (params.tokenIn == USE_KLAY) {\\n            if (msg.value < amountIn) revert TooLittleAmountIn();\\n            IWETH(wETH).depositTo{value: (msg.value - amountIn)}(msg.sender);\\n        }\\n\\n        _transfer(params.tokenIn, msg.sender, params.pool, amountIn);\\n\\n        IConcentratedLiquidityPool pool = IConcentratedLiquidityPool(params.pool);\\n        isWhiteListed(address(pool));\\n\\n        bool zeroForOne = pool.token0() == tokenIn;\\n\\n        uint256 amountOut;\\n        if (params.unwrap) {\\n            amountOut = pool.swap(abi.encode(zeroForOne, address(this)));\\n            IWETH(wETH).withdrawTo(payable(params.to), amountOut);\\n        } else {\\n            amountOut = pool.swap(abi.encode(zeroForOne, params.to));\\n        }\\n\\n        /// @dev it won't happen, but for safety\\n        if (amountOut < params.amountOut) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as ExactOutputSingleParams in calldata\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn) {\\n        amountIn = calculateAmountIn(params.path, params.tokenIn, params.amountOut);\\n        if (params.amountInMaximum < amountIn) revert TooLittleAmountIn();\\n\\n        bool needToWrap = params.tokenIn == USE_KLAY;\\n        if (needToWrap) {\\n            if (msg.value < amountIn) revert TooLittleAmountIn();\\n            safeTransferETH(msg.sender, msg.value - amountIn);\\n        }\\n        _transfer(params.tokenIn, msg.sender, params.path[0], amountIn);\\n\\n        address tokenIn = needToWrap ? wETH : params.tokenIn;\\n        uint256 pathLength = params.path.length;\\n        uint256 amountOut;\\n        bool zeroForOne;\\n        IConcentratedLiquidityPool pool;\\n        for (uint256 i = 0; i < pathLength - 1; i = _increment(i)) {\\n            pool = IConcentratedLiquidityPool(params.path[i]);\\n            isWhiteListed(address(pool));\\n\\n            zeroForOne = pool.token0() == tokenIn;\\n            amountOut = pool.swap(abi.encode(zeroForOne, params.path[i + 1]));\\n            tokenIn = zeroForOne ? pool.token1() : pool.token0(); // nextTokenIn\\n        }\\n\\n        pool = IConcentratedLiquidityPool(params.path[pathLength - 1]);\\n        isWhiteListed(address(pool));\\n\\n        zeroForOne = pool.token0() == tokenIn;\\n        if (params.unwrap) {\\n            amountOut = pool.swap(abi.encode(zeroForOne, address(this)));\\n            IWETH(wETH).withdrawTo(payable(params.to), amountOut);\\n        } else {\\n            amountOut = pool.swap(abi.encode(zeroForOne, params.to));\\n        }\\n\\n        /// @dev it won't happen, but for safety\\n        if (amountOut < params.amountOut) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Recover mistakenly sent tokens.\\n    function sweep(\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external payable {\\n        if (token == USE_KLAY) {\\n            // slither-disable-next-line arbitrary-send\\n            IWETH(wETH).depositTo{value: amount}(recipient);\\n        } else {\\n            IERC20(token).safeTransfer(recipient, amount);\\n        }\\n    }\\n\\n    function _transfer(\\n        address token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        if (token == USE_KLAY) {\\n            // slither-disable-next-line arbitrary-send\\n            IWETH(wETH).depositTo{value: amount}(recipient);\\n        } else {\\n            IERC20(token).safeTransferFrom(sender, recipient, amount);\\n        }\\n    }\\n\\n    function calculateAmountIn(\\n        address[] calldata path,\\n        address tokenIn,\\n        uint256 amountOut\\n    ) internal view returns (uint256 amountIn) {\\n        address tokenOut = findTokenOut(path, tokenIn);\\n        IConcentratedLiquidityPool pool;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            pool = IConcentratedLiquidityPool(path[i - 1]);\\n            tokenOut = pool.token0() == tokenOut ? pool.token1() : pool.token0();\\n            (amountOut, ) = SwapHelperLib.exactOutput(address(pool), tokenOut, amountOut);\\n        }\\n        amountIn = amountOut;\\n    }\\n\\n    function findTokenOut(address[] calldata path, address tokenIn) internal view returns (address tokenOut) {\\n        tokenOut = tokenIn == address(0) ? wETH : tokenIn;\\n        IConcentratedLiquidityPool pool;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            pool = IConcentratedLiquidityPool(path[i]);\\n            tokenOut = pool.token0() == tokenOut ? pool.token1() : pool.token0();\\n        }\\n        return tokenOut;\\n    }\\n\\n    function isWhiteListed(address pool) internal {\\n        if (!whitelistedPools[pool]) {\\n            if (!masterDeployer.pools(pool)) revert InvalidPool();\\n            whitelistedPools[pool] = true;\\n        }\\n    }\\n\\n    /// @dev increment helper\\n    function _increment(uint256 x) private pure returns (uint256) {\\n        // Cannot realistically overflow\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n\\n    function safeTransferETH(address recipient, uint256 amount) internal {\\n        if (amount == 0) return;\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x19016e07413862d2af3aa248a5678c3582901b35ea407cb7e170f1862f0fbced\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614828806100206000396000f3fe6080604052600436106100b15760003560e01c8063ac9650d811610069578063c07f5c321161004e578063c07f5c3214610184578063cf58879a14610197578063dc2c256f146101ef57600080fd5b8063ac9650d814610151578063bee20e051461017157600080fd5b806354c1b6501161009a57806354c1b650146100fe5780637763198114610111578063a9b62c231461013157600080fd5b8063363a9dba146100b6578063485cc955146100dc575b600080fd5b6100c96100c4366004613f0c565b610202565b6040519081526020015b60405180910390f35b3480156100e857600080fd5b506100fc6100f7366004613f63565b61097f565b005b6100c961010c366004613f9c565b610b1e565b34801561011d57600080fd5b506100fc61012c366004613fb8565b61106b565b34801561013d57600080fd5b506100fc61014c366004613fb8565b6111a1565b61016461015f36600461401a565b6111ff565b6040516100d39190614105565b6100c961017f366004613f0c565b611371565b6100c9610192366004613f9c565b611ba5565b3480156101a357600080fd5b506000546101ca9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d3565b6100fc6101fd366004614185565b611f9f565b600061025261021460208401846141c7565b3361022260608601866141e4565b600081811061023357610233614253565b905060200201602081019061024891906141c7565b8560200135612067565b60008061026260208501856141c7565b73ffffffffffffffffffffffffffffffffffffffff161461028f5761028a60208401846141c7565b6102a9565b60015473ffffffffffffffffffffffffffffffffffffffff165b905060006102ba60608501856141e4565b9050905060008060005b6102cf6001856142b1565b8110156105d7576102e360608801886141e4565b828181106102f3576102f3614253565b905060200201602081019061030891906141c7565b925061031383612136565b8473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561037057600080fd5b505afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a891906142c8565b73ffffffffffffffffffffffffffffffffffffffff161491508273ffffffffffffffffffffffffffffffffffffffff1663627dd56a838980606001906103ee91906141e4565b6103f98660016142e5565b81811061040857610408614253565b905060200201602081019061041d91906141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b815260040161047391906142fd565b602060405180830381600087803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190614310565b95508161054f578273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561051257600080fd5b505afa158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a91906142c8565b6105cd565b8273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561059557600080fd5b505afa1580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd91906142c8565b94506001016102c4565b506105e560608701876141e4565b6105f06001866142b1565b8181106105ff576105ff614253565b905060200201602081019061061491906141c7565b915061061f82612136565b8373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561067c57600080fd5b505afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b491906142c8565b73ffffffffffffffffffffffffffffffffffffffff161490506106dd60c0870160a08801614337565b1561086057604080518215156020820152308183015281518082038301815260608201928390527f627dd56a0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff84169163627dd56a9161075391906064016142fd565b602060405180830381600087803b15801561076d57600080fd5b505af1158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190614310565b60015490955073ffffffffffffffffffffffffffffffffffffffff1663205c28786107d660a0890160808a016141c7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101889052604401600060405180830381600087803b15801561084357600080fd5b505af1158015610857573d6000803e3d6000fd5b50505050610938565b73ffffffffffffffffffffffffffffffffffffffff821663627dd56a8261088d60a08a0160808b016141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b81526004016108e391906142fd565b602060405180830381600087803b1580156108fd57600080fd5b505af1158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190614310565b94505b8560400135851015610976576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050919050565b600054610100900460ff1661099a5760005460ff161561099e565b303b155b610a2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff16158015610a6e57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff8681169190910291909117909155600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169184169190911790558015610b1957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b60008080610b2f60208501856141c7565b73ffffffffffffffffffffffffffffffffffffffff1614610b5c57610b5760208401846141c7565b610b76565b60015473ffffffffffffffffffffffffffffffffffffffff165b9050610b96610b8b60808501606086016141c7565b828560200135612295565b5091506040830135821115610bd7576040517f197464f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610be660208501856141c7565b73ffffffffffffffffffffffffffffffffffffffff161415610ccc5781341015610c3c576040517f197464f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015473ffffffffffffffffffffffffffffffffffffffff1663b760faf9610c6484346142b1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681523360048201526024016000604051808303818588803b158015610cb257600080fd5b505af1158015610cc6573d6000803e3d6000fd5b50505050505b610cf3610cdc60208501856141c7565b33610ced60808701606088016141c7565b85612067565b6000610d0560808501606086016141c7565b9050610d1081612136565b60008273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6f57600080fd5b505afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da791906142c8565b73ffffffffffffffffffffffffffffffffffffffff161490506000610dd260c0870160a08801614337565b15610f5557604080518315156020820152308183015281518082038301815260608201928390527f627dd56a0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff85169163627dd56a91610e4891906064016142fd565b602060405180830381600087803b158015610e6257600080fd5b505af1158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a9190614310565b60015490915073ffffffffffffffffffffffffffffffffffffffff1663205c2878610ecb60a0890160808a016141c7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101849052604401600060405180830381600087803b158015610f3857600080fd5b505af1158015610f4c573d6000803e3d6000fd5b5050505061102d565b73ffffffffffffffffffffffffffffffffffffffff831663627dd56a83610f8260a08a0160808b016141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b8152600401610fd891906142fd565b602060405180830381600087803b158015610ff257600080fd5b505af1158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a9190614310565b90505b8560200135811015610976576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040513360248201523060448201526064810186905260848101859052600160a482015260ff841660c482015260e48101839052610104810182905260009073ffffffffffffffffffffffffffffffffffffffff881690638fcbaf0c90610124015b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161111b9190614354565b6000604051808303816000865af19150503d8060008114611158576040519150601f19603f3d011682016040523d82523d6000602084013e61115d565b606091505b5050905080611198576040517fb78cb0dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b604051336024820152306044820152606481018690526084810185905260ff841660a482015260c4810183905260e4810182905260009073ffffffffffffffffffffffffffffffffffffffff88169063d505accf90610104016110cd565b60608167ffffffffffffffff81111561121a5761121a614370565b60405190808252806020026020018201604052801561124d57816020015b60608152602001906001900390816112385790505b50905060005b8281101561136a576000803086868581811061127157611271614253565b9050602002810190611283919061439f565b604051611291929190614404565b600060405180830381855af49150503d80600081146112cc576040519150601f19603f3d011682016040523d82523d6000602084013e6112d1565b606091505b509150915081611337576044815110156112ea57600080fd5b600481019050808060200190518101906113049190614414565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2691906142fd565b8084848151811061134a5761134a614253565b602002602001018190525050508080611362906144d4565b915050611253565b5092915050565b600061139a61138360608401846141e4565b61139060208601866141c7565b8560200135612a2c565b905080826040013510156113da576040517f197464f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806113ea60208501856141c7565b73ffffffffffffffffffffffffffffffffffffffff1614905080156114565781341015611443576040517f197464f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114563361145184346142b1565b612c58565b61149a61146660208501856141c7565b3361147460608701876141e4565b600081811061148557611485614253565b9050602002016020810190610ced91906141c7565b6000816114b3576114ae60208501856141c7565b6114cd565b60015473ffffffffffffffffffffffffffffffffffffffff165b905060006114de60608601866141e4565b9150600090508080805b6114f36001866142b1565b8110156117fb5761150760608a018a6141e4565b8281811061151757611517614253565b905060200201602081019061152c91906141c7565b915061153782612136565b8573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561159457600080fd5b505afa1580156115a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cc91906142c8565b73ffffffffffffffffffffffffffffffffffffffff161492508173ffffffffffffffffffffffffffffffffffffffff1663627dd56a848b806060019061161291906141e4565b61161d8660016142e5565b81811061162c5761162c614253565b905060200201602081019061164191906141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b815260040161169791906142fd565b602060405180830381600087803b1580156116b157600080fd5b505af11580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190614310565b935082611773578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561173657600080fd5b505afa15801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e91906142c8565b6117f1565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156117b957600080fd5b505afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f191906142c8565b95506001016114e8565b5061180960608901896141e4565b6118146001876142b1565b81811061182357611823614253565b905060200201602081019061183891906141c7565b905061184381612136565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156118a057600080fd5b505afa1580156118b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d891906142c8565b73ffffffffffffffffffffffffffffffffffffffff1614915061190160c0890160a08a01614337565b15611a8457604080518315156020820152308183015281518082038301815260608201928390527f627dd56a0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff83169163627dd56a9161197791906064016142fd565b602060405180830381600087803b15801561199157600080fd5b505af11580156119a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c99190614310565b60015490935073ffffffffffffffffffffffffffffffffffffffff1663205c28786119fa60a08b0160808c016141c7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101869052604401600060405180830381600087803b158015611a6757600080fd5b505af1158015611a7b573d6000803e3d6000fd5b50505050611b5c565b73ffffffffffffffffffffffffffffffffffffffff811663627dd56a83611ab160a08c0160808d016141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b8152600401611b0791906142fd565b602060405180830381600087803b158015611b2157600080fd5b505af1158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b599190614310565b92505b8760200135831015611b9a576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050919050565b6000611bc8611bb760208401846141c7565b3361024860808601606087016141c7565b6000611bda60808401606085016141c7565b9050611be581612136565b600080611bf560208601866141c7565b73ffffffffffffffffffffffffffffffffffffffff1614611c2257611c1d60208501856141c7565b611c3c565b60015473ffffffffffffffffffffffffffffffffffffffff165b905060008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611c9d57600080fd5b505afa158015611cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd591906142c8565b73ffffffffffffffffffffffffffffffffffffffff16149050611cfe60c0860160a08701614337565b15611e8157604080518215156020820152308183015281518082038301815260608201928390527f627dd56a0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff85169163627dd56a91611d7491906064016142fd565b602060405180830381600087803b158015611d8e57600080fd5b505af1158015611da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc69190614310565b60015490945073ffffffffffffffffffffffffffffffffffffffff1663205c2878611df760a08801608089016141c7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101879052604401600060405180830381600087803b158015611e6457600080fd5b505af1158015611e78573d6000803e3d6000fd5b50505050611f59565b73ffffffffffffffffffffffffffffffffffffffff831663627dd56a82611eae60a0890160808a016141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b8152600401611f0491906142fd565b602060405180830381600087803b158015611f1e57600080fd5b505af1158015611f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f569190614310565b93505b8460400135841015611f97576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050919050565b73ffffffffffffffffffffffffffffffffffffffff8316612046576001546040517fb760faf900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063b760faf99084906024016000604051808303818588803b15801561202857600080fd5b505af115801561203c573d6000803e3d6000fd5b5050505050505050565b610b1973ffffffffffffffffffffffffffffffffffffffff84168284612d2b565b73ffffffffffffffffffffffffffffffffffffffff841661210e576001546040517fb760faf900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063b760faf99083906024016000604051808303818588803b1580156120f057600080fd5b505af1158015612104573d6000803e3d6000fd5b5050505050612130565b61213073ffffffffffffffffffffffffffffffffffffffff8516848484612dff565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff16612292576000546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152620100009092049091169063a4063dbc9060240160206040518083038186803b1580156121d557600080fd5b505afa1580156121e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220d919061450d565b612243576040517f2083cd4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b50565b60008060006122a48686612e5d565b905060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ee57600080fd5b505afa158015612302573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612326919061452a565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561237057600080fd5b505afa158015612384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a8919061452a565b90506123df6040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808a73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561242757600080fd5b505afa15801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f9190614566565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156124d057600080fd5b505afa1580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250891906145bb565b6fffffffffffffffffffffffffffffffff168152602001600081526020018a8152602001876125db576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8e169063f30dba939060240160c06040518083038186803b15801561259a57600080fd5b505afa1580156125ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d291906145d6565b602001516125dd565b825b60020b815250925050506125f081612f12565b156126055751600095509350612a2492505050565b6060810151156129ae57600061261e8260800151612f93565b73ffffffffffffffffffffffffffffffffffffffff169050600080861561271157600061266461265986602001518688600001516000613326565b8862ffffff16613374565b9050808560600151116126d55760006126a161268987606001518a62ffffff16613395565b6c0100000000000000000000000088602001516133a9565b86516126ad91906142b1565b90506126c486602001518288600001516001613404565b90865260006060870152925061270b565b6126ea85602001518587600001516000613404565b84865260608601805191945082916127039083906142b1565b905250600191505b5061284b565b600061272b61265986602001518760000151876000613404565b905080856060015111612813576000606060ff168660200151901b905060006127818288600001516127668a606001518d62ffffff16613395565b8a516127729190614669565b61277c90866142b1565b6133a9565b90508087600001511115801561279657508581105b6127eb576127d2826127b189606001518c62ffffff16613395565b89516127bd90866146d5565b6127c791906142b1565b808204910615150190565b73ffffffffffffffffffffffffffffffffffffffff1690505b61280087602001518860000151836001613326565b9087526000606088015293506128499050565b61282885602001518660000151866000613326565b84865260608601805191945082916128419083906142b1565b905250600191505b505b612855828a6142e5565b985080156129a6576128698c85878a613455565b60020b6080860152602085018190526129a6576128a57ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618614710565b60020b846080015160020b14806128e25750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b1561296757861561291157835161290a906128ff906001906142b1565b6401000276a361394c565b845261295f565b835161295c906129229060016142e5565b612941600173fffd8963efd1fc6a506488495d951d5263988d2661474f565b73ffffffffffffffffffffffffffffffffffffffff16613963565b84525b5050506129ae565b6129748460800151612f93565b73ffffffffffffffffffffffffffffffffffffffff1684526129988c85878a613455565b60020b608086015260208501525b505050612605565b8051606082015190955015612a1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e54204f5554505554000000000000000000000000006044820152606401610a26565b505050505b935093915050565b600080612a3a868686613972565b90506000855b8015612c4c578787612a536001846142b1565b818110612a6257612a62614253565b9050602002016020810190612a7791906141c7565b91508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612ad657600080fd5b505afa158015612aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0e91906142c8565b73ffffffffffffffffffffffffffffffffffffffff1614612bac578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612b6f57600080fd5b505afa158015612b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba791906142c8565b612c2a565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612bf257600080fd5b505afa158015612c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2a91906142c8565b9250612c37828487612295565b50945080612c4481614784565b915050612a40565b50929695505050505050565b80612c61575050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114612cbb576040519150601f19603f3d011682016040523d82523d6000602084013e612cc0565b606091505b5050905080610b19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610a26565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610b199084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613bb5565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526121309085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612d7d565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612ebc57600080fd5b505afa158015612ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef491906142c8565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b602081015160009015612f2757506000919050565b608082015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276181480612f8d5750612f807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618614710565b60020b826080015160020b145b92915050565b60008060008360020b12612faa578260020b612fb7565b8260020b612fb7906147b9565b9050612fe27ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618614710565b62ffffff16811115613020576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001821661304157700100000000000000000000000000000000613053565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613087576ffff97272373d413259a46990580e213a0260801c5b60048216156130a6576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156130c5576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156130e4576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615613103576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615613122576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615613141576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615613161576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615613181576ff987a7253ac413176f2b074cf7815e540260801c5b6104008216156131a1576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156131c1576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156131e1576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615613201576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615613221576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615613241576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615613262576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615613282576e5d6af8dedb81196699c329225ee6040260801c5b620400008216156132a1576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156132be576b048a170391f7dc42444e8fa20260801c5b60008460020b13156132fd57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816132f9576132f96146a6565b0490505b640100000000810615613311576001613314565b60005b60ff16602082901c0192505050919050565b6000811561334f57613348858585036c010000000000000000000000006133a9565b905061336c565b613369858585036c01000000000000000000000000613cc1565b90505b949350505050565b60006133848383620f42406133a9565b61338e90846142b1565b9392505050565b600061338e83620f424061277c85826142b1565b60006133b6848484613cc1565b905081806133c6576133c66146a6565b8385091561338e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81106133fa57600080fd5b6001019392505050565b6000811561342c57613348613420606087901b868603866133a9565b85808204910615150190565b8361343e606087901b82860386613cc1565b8161344b5761344b6146a6565b0495945050505050565b60008082156136d15760028460020b866080015160020b81613479576134796146a6565b0560020b8161348a5761348a6146a6565b0760020b61355c5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561350157600080fd5b505afa158015613515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353991906145d6565b604001516fffffffffffffffffffffffffffffffff168560200151039150613622565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b1580156135cb57600080fd5b505afa1580156135df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360391906145d6565b604001516fffffffffffffffffffffffffffffffff1685602001510191505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561369157600080fd5b505afa1580156136a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c991906145d6565b519050613943565b60028460020b866080015160020b816136ec576136ec6146a6565b0560020b816136fd576136fd6146a6565b0760020b6137cf5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561377457600080fd5b505afa158015613788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ac91906145d6565b604001516fffffffffffffffffffffffffffffffff168560200151019150613895565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561383e57600080fd5b505afa158015613852573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387691906145d6565b604001516fffffffffffffffffffffffffffffffff1685602001510391505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561390457600080fd5b505afa158015613918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393c91906145d6565b6020015190505b94509492505050565b60008183101561395c578161338e565b5090919050565b600081831061395c578161338e565b600073ffffffffffffffffffffffffffffffffffffffff82161561399657816139b0565b60015473ffffffffffffffffffffffffffffffffffffffff165b90506000805b84811015613bac578585828181106139d0576139d0614253565b90506020020160208101906139e591906141c7565b91508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613a4457600080fd5b505afa158015613a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a7c91906142c8565b73ffffffffffffffffffffffffffffffffffffffff1614613b1a578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613add57600080fd5b505afa158015613af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b1591906142c8565b613b98565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613b6057600080fd5b505afa158015613b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9891906142c8565b925080613ba4816144d4565b9150506139b6565b50509392505050565b6000613c17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613d929092919063ffffffff16565b805190915015610b195780806020019051810190613c35919061450d565b610b19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a26565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415613d195760008411613d0e57600080fd5b50829004905061338e565b808411613d2557600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b606061336c84846000858573ffffffffffffffffffffffffffffffffffffffff85163b613e1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a26565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613e449190614354565b60006040518083038185875af1925050503d8060008114613e81576040519150601f19603f3d011682016040523d82523d6000602084013e613e86565b606091505b5091509150613e96828286613ea1565b979650505050505050565b60608315613eb057508161338e565b825115613ec05782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2691906142fd565b600060c08284031215613f0657600080fd5b50919050565b600060208284031215613f1e57600080fd5b813567ffffffffffffffff811115613f3557600080fd5b61336c84828501613ef4565b73ffffffffffffffffffffffffffffffffffffffff8116811461229257600080fd5b60008060408385031215613f7657600080fd5b8235613f8181613f41565b91506020830135613f9181613f41565b809150509250929050565b600060c08284031215613fae57600080fd5b61338e8383613ef4565b60008060008060008060c08789031215613fd157600080fd5b8635613fdc81613f41565b95506020870135945060408701359350606087013560ff8116811461400057600080fd5b9598949750929560808101359460a0909101359350915050565b6000806020838503121561402d57600080fd5b823567ffffffffffffffff8082111561404557600080fd5b818501915085601f83011261405957600080fd5b81358181111561406857600080fd5b8660208260051b850101111561407d57600080fd5b60209290920196919550909350505050565b60005b838110156140aa578181015183820152602001614092565b838111156121305750506000910152565b600081518084526140d381602086016020860161408f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614178577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526141668583516140bb565b9450928501929085019060010161412c565b5092979650505050505050565b60008060006060848603121561419a57600080fd5b83356141a581613f41565b92506020840135915060408401356141bc81613f41565b809150509250925092565b6000602082840312156141d957600080fd5b813561338e81613f41565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261421957600080fd5b83018035915067ffffffffffffffff82111561423457600080fd5b6020019150600581901b360382131561424c57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156142c3576142c3614282565b500390565b6000602082840312156142da57600080fd5b815161338e81613f41565b600082198211156142f8576142f8614282565b500190565b60208152600061338e60208301846140bb565b60006020828403121561432257600080fd5b5051919050565b801515811461229257600080fd5b60006020828403121561434957600080fd5b813561338e81614329565b6000825161436681846020870161408f565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126143d457600080fd5b83018035915067ffffffffffffffff8211156143ef57600080fd5b60200191503681900382131561424c57600080fd5b8183823760009101908152919050565b60006020828403121561442657600080fd5b815167ffffffffffffffff8082111561443e57600080fd5b818401915084601f83011261445257600080fd5b81518181111561446457614464614370565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156144aa576144aa614370565b816040528281528760208487010111156144c357600080fd5b613e9683602083016020880161408f565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561450657614506614282565b5060010190565b60006020828403121561451f57600080fd5b815161338e81614329565b60006020828403121561453c57600080fd5b815162ffffff8116811461338e57600080fd5b8051600281900b811461456157600080fd5b919050565b6000806040838503121561457957600080fd5b825161458481613f41565b91506145926020840161454f565b90509250929050565b80516fffffffffffffffffffffffffffffffff8116811461456157600080fd5b6000602082840312156145cd57600080fd5b61338e8261459b565b600060c082840312156145e857600080fd5b60405160c0810181811067ffffffffffffffff8211171561460b5761460b614370565b6040526146178361454f565b81526146256020840161454f565b60208201526146366040840161459b565b6040820152606083015160608201526080830151608082015260a083015161465d81613f41565b60a08201529392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146a1576146a1614282565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261470b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000081141561474657614746614282565b60000392915050565b600073ffffffffffffffffffffffffffffffffffffffff8381169083168181101561477c5761477c614282565b039392505050565b60008161479357614793614282565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007f80000000000000000000000000000000000000000000000000000000000000008214156147eb576147eb614282565b506000039056fea2646970667358221220c0d6888d5a65000985f5113825481f32e48be8baaedcd2cac0453ad0a47c50ea64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100b15760003560e01c8063ac9650d811610069578063c07f5c321161004e578063c07f5c3214610184578063cf58879a14610197578063dc2c256f146101ef57600080fd5b8063ac9650d814610151578063bee20e051461017157600080fd5b806354c1b6501161009a57806354c1b650146100fe5780637763198114610111578063a9b62c231461013157600080fd5b8063363a9dba146100b6578063485cc955146100dc575b600080fd5b6100c96100c4366004613f0c565b610202565b6040519081526020015b60405180910390f35b3480156100e857600080fd5b506100fc6100f7366004613f63565b61097f565b005b6100c961010c366004613f9c565b610b1e565b34801561011d57600080fd5b506100fc61012c366004613fb8565b61106b565b34801561013d57600080fd5b506100fc61014c366004613fb8565b6111a1565b61016461015f36600461401a565b6111ff565b6040516100d39190614105565b6100c961017f366004613f0c565b611371565b6100c9610192366004613f9c565b611ba5565b3480156101a357600080fd5b506000546101ca9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d3565b6100fc6101fd366004614185565b611f9f565b600061025261021460208401846141c7565b3361022260608601866141e4565b600081811061023357610233614253565b905060200201602081019061024891906141c7565b8560200135612067565b60008061026260208501856141c7565b73ffffffffffffffffffffffffffffffffffffffff161461028f5761028a60208401846141c7565b6102a9565b60015473ffffffffffffffffffffffffffffffffffffffff165b905060006102ba60608501856141e4565b9050905060008060005b6102cf6001856142b1565b8110156105d7576102e360608801886141e4565b828181106102f3576102f3614253565b905060200201602081019061030891906141c7565b925061031383612136565b8473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561037057600080fd5b505afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a891906142c8565b73ffffffffffffffffffffffffffffffffffffffff161491508273ffffffffffffffffffffffffffffffffffffffff1663627dd56a838980606001906103ee91906141e4565b6103f98660016142e5565b81811061040857610408614253565b905060200201602081019061041d91906141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b815260040161047391906142fd565b602060405180830381600087803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190614310565b95508161054f578273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561051257600080fd5b505afa158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a91906142c8565b6105cd565b8273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561059557600080fd5b505afa1580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd91906142c8565b94506001016102c4565b506105e560608701876141e4565b6105f06001866142b1565b8181106105ff576105ff614253565b905060200201602081019061061491906141c7565b915061061f82612136565b8373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561067c57600080fd5b505afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b491906142c8565b73ffffffffffffffffffffffffffffffffffffffff161490506106dd60c0870160a08801614337565b1561086057604080518215156020820152308183015281518082038301815260608201928390527f627dd56a0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff84169163627dd56a9161075391906064016142fd565b602060405180830381600087803b15801561076d57600080fd5b505af1158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190614310565b60015490955073ffffffffffffffffffffffffffffffffffffffff1663205c28786107d660a0890160808a016141c7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101889052604401600060405180830381600087803b15801561084357600080fd5b505af1158015610857573d6000803e3d6000fd5b50505050610938565b73ffffffffffffffffffffffffffffffffffffffff821663627dd56a8261088d60a08a0160808b016141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b81526004016108e391906142fd565b602060405180830381600087803b1580156108fd57600080fd5b505af1158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190614310565b94505b8560400135851015610976576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050919050565b600054610100900460ff1661099a5760005460ff161561099e565b303b155b610a2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff16158015610a6e57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff8681169190910291909117909155600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169184169190911790558015610b1957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b60008080610b2f60208501856141c7565b73ffffffffffffffffffffffffffffffffffffffff1614610b5c57610b5760208401846141c7565b610b76565b60015473ffffffffffffffffffffffffffffffffffffffff165b9050610b96610b8b60808501606086016141c7565b828560200135612295565b5091506040830135821115610bd7576040517f197464f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610be660208501856141c7565b73ffffffffffffffffffffffffffffffffffffffff161415610ccc5781341015610c3c576040517f197464f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015473ffffffffffffffffffffffffffffffffffffffff1663b760faf9610c6484346142b1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681523360048201526024016000604051808303818588803b158015610cb257600080fd5b505af1158015610cc6573d6000803e3d6000fd5b50505050505b610cf3610cdc60208501856141c7565b33610ced60808701606088016141c7565b85612067565b6000610d0560808501606086016141c7565b9050610d1081612136565b60008273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6f57600080fd5b505afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da791906142c8565b73ffffffffffffffffffffffffffffffffffffffff161490506000610dd260c0870160a08801614337565b15610f5557604080518315156020820152308183015281518082038301815260608201928390527f627dd56a0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff85169163627dd56a91610e4891906064016142fd565b602060405180830381600087803b158015610e6257600080fd5b505af1158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a9190614310565b60015490915073ffffffffffffffffffffffffffffffffffffffff1663205c2878610ecb60a0890160808a016141c7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101849052604401600060405180830381600087803b158015610f3857600080fd5b505af1158015610f4c573d6000803e3d6000fd5b5050505061102d565b73ffffffffffffffffffffffffffffffffffffffff831663627dd56a83610f8260a08a0160808b016141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b8152600401610fd891906142fd565b602060405180830381600087803b158015610ff257600080fd5b505af1158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a9190614310565b90505b8560200135811015610976576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040513360248201523060448201526064810186905260848101859052600160a482015260ff841660c482015260e48101839052610104810182905260009073ffffffffffffffffffffffffffffffffffffffff881690638fcbaf0c90610124015b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161111b9190614354565b6000604051808303816000865af19150503d8060008114611158576040519150601f19603f3d011682016040523d82523d6000602084013e61115d565b606091505b5050905080611198576040517fb78cb0dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b604051336024820152306044820152606481018690526084810185905260ff841660a482015260c4810183905260e4810182905260009073ffffffffffffffffffffffffffffffffffffffff88169063d505accf90610104016110cd565b60608167ffffffffffffffff81111561121a5761121a614370565b60405190808252806020026020018201604052801561124d57816020015b60608152602001906001900390816112385790505b50905060005b8281101561136a576000803086868581811061127157611271614253565b9050602002810190611283919061439f565b604051611291929190614404565b600060405180830381855af49150503d80600081146112cc576040519150601f19603f3d011682016040523d82523d6000602084013e6112d1565b606091505b509150915081611337576044815110156112ea57600080fd5b600481019050808060200190518101906113049190614414565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2691906142fd565b8084848151811061134a5761134a614253565b602002602001018190525050508080611362906144d4565b915050611253565b5092915050565b600061139a61138360608401846141e4565b61139060208601866141c7565b8560200135612a2c565b905080826040013510156113da576040517f197464f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806113ea60208501856141c7565b73ffffffffffffffffffffffffffffffffffffffff1614905080156114565781341015611443576040517f197464f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114563361145184346142b1565b612c58565b61149a61146660208501856141c7565b3361147460608701876141e4565b600081811061148557611485614253565b9050602002016020810190610ced91906141c7565b6000816114b3576114ae60208501856141c7565b6114cd565b60015473ffffffffffffffffffffffffffffffffffffffff165b905060006114de60608601866141e4565b9150600090508080805b6114f36001866142b1565b8110156117fb5761150760608a018a6141e4565b8281811061151757611517614253565b905060200201602081019061152c91906141c7565b915061153782612136565b8573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561159457600080fd5b505afa1580156115a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cc91906142c8565b73ffffffffffffffffffffffffffffffffffffffff161492508173ffffffffffffffffffffffffffffffffffffffff1663627dd56a848b806060019061161291906141e4565b61161d8660016142e5565b81811061162c5761162c614253565b905060200201602081019061164191906141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b815260040161169791906142fd565b602060405180830381600087803b1580156116b157600080fd5b505af11580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190614310565b935082611773578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561173657600080fd5b505afa15801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e91906142c8565b6117f1565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156117b957600080fd5b505afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f191906142c8565b95506001016114e8565b5061180960608901896141e4565b6118146001876142b1565b81811061182357611823614253565b905060200201602081019061183891906141c7565b905061184381612136565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156118a057600080fd5b505afa1580156118b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d891906142c8565b73ffffffffffffffffffffffffffffffffffffffff1614915061190160c0890160a08a01614337565b15611a8457604080518315156020820152308183015281518082038301815260608201928390527f627dd56a0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff83169163627dd56a9161197791906064016142fd565b602060405180830381600087803b15801561199157600080fd5b505af11580156119a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c99190614310565b60015490935073ffffffffffffffffffffffffffffffffffffffff1663205c28786119fa60a08b0160808c016141c7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101869052604401600060405180830381600087803b158015611a6757600080fd5b505af1158015611a7b573d6000803e3d6000fd5b50505050611b5c565b73ffffffffffffffffffffffffffffffffffffffff811663627dd56a83611ab160a08c0160808d016141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b8152600401611b0791906142fd565b602060405180830381600087803b158015611b2157600080fd5b505af1158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b599190614310565b92505b8760200135831015611b9a576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050919050565b6000611bc8611bb760208401846141c7565b3361024860808601606087016141c7565b6000611bda60808401606085016141c7565b9050611be581612136565b600080611bf560208601866141c7565b73ffffffffffffffffffffffffffffffffffffffff1614611c2257611c1d60208501856141c7565b611c3c565b60015473ffffffffffffffffffffffffffffffffffffffff165b905060008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611c9d57600080fd5b505afa158015611cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd591906142c8565b73ffffffffffffffffffffffffffffffffffffffff16149050611cfe60c0860160a08701614337565b15611e8157604080518215156020820152308183015281518082038301815260608201928390527f627dd56a0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff85169163627dd56a91611d7491906064016142fd565b602060405180830381600087803b158015611d8e57600080fd5b505af1158015611da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc69190614310565b60015490945073ffffffffffffffffffffffffffffffffffffffff1663205c2878611df760a08801608089016141c7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101879052604401600060405180830381600087803b158015611e6457600080fd5b505af1158015611e78573d6000803e3d6000fd5b50505050611f59565b73ffffffffffffffffffffffffffffffffffffffff831663627dd56a82611eae60a0890160808a016141c7565b60408051921515602084015273ffffffffffffffffffffffffffffffffffffffff909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b8152600401611f0491906142fd565b602060405180830381600087803b158015611f1e57600080fd5b505af1158015611f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f569190614310565b93505b8460400135841015611f97576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050919050565b73ffffffffffffffffffffffffffffffffffffffff8316612046576001546040517fb760faf900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063b760faf99084906024016000604051808303818588803b15801561202857600080fd5b505af115801561203c573d6000803e3d6000fd5b5050505050505050565b610b1973ffffffffffffffffffffffffffffffffffffffff84168284612d2b565b73ffffffffffffffffffffffffffffffffffffffff841661210e576001546040517fb760faf900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063b760faf99083906024016000604051808303818588803b1580156120f057600080fd5b505af1158015612104573d6000803e3d6000fd5b5050505050612130565b61213073ffffffffffffffffffffffffffffffffffffffff8516848484612dff565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff16612292576000546040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152620100009092049091169063a4063dbc9060240160206040518083038186803b1580156121d557600080fd5b505afa1580156121e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220d919061450d565b612243576040517f2083cd4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b50565b60008060006122a48686612e5d565b905060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ee57600080fd5b505afa158015612302573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612326919061452a565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561237057600080fd5b505afa158015612384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a8919061452a565b90506123df6040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808a73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561242757600080fd5b505afa15801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f9190614566565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156124d057600080fd5b505afa1580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250891906145bb565b6fffffffffffffffffffffffffffffffff168152602001600081526020018a8152602001876125db576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8e169063f30dba939060240160c06040518083038186803b15801561259a57600080fd5b505afa1580156125ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d291906145d6565b602001516125dd565b825b60020b815250925050506125f081612f12565b156126055751600095509350612a2492505050565b6060810151156129ae57600061261e8260800151612f93565b73ffffffffffffffffffffffffffffffffffffffff169050600080861561271157600061266461265986602001518688600001516000613326565b8862ffffff16613374565b9050808560600151116126d55760006126a161268987606001518a62ffffff16613395565b6c0100000000000000000000000088602001516133a9565b86516126ad91906142b1565b90506126c486602001518288600001516001613404565b90865260006060870152925061270b565b6126ea85602001518587600001516000613404565b84865260608601805191945082916127039083906142b1565b905250600191505b5061284b565b600061272b61265986602001518760000151876000613404565b905080856060015111612813576000606060ff168660200151901b905060006127818288600001516127668a606001518d62ffffff16613395565b8a516127729190614669565b61277c90866142b1565b6133a9565b90508087600001511115801561279657508581105b6127eb576127d2826127b189606001518c62ffffff16613395565b89516127bd90866146d5565b6127c791906142b1565b808204910615150190565b73ffffffffffffffffffffffffffffffffffffffff1690505b61280087602001518860000151836001613326565b9087526000606088015293506128499050565b61282885602001518660000151866000613326565b84865260608601805191945082916128419083906142b1565b905250600191505b505b612855828a6142e5565b985080156129a6576128698c85878a613455565b60020b6080860152602085018190526129a6576128a57ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618614710565b60020b846080015160020b14806128e25750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b1561296757861561291157835161290a906128ff906001906142b1565b6401000276a361394c565b845261295f565b835161295c906129229060016142e5565b612941600173fffd8963efd1fc6a506488495d951d5263988d2661474f565b73ffffffffffffffffffffffffffffffffffffffff16613963565b84525b5050506129ae565b6129748460800151612f93565b73ffffffffffffffffffffffffffffffffffffffff1684526129988c85878a613455565b60020b608086015260208501525b505050612605565b8051606082015190955015612a1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e54204f5554505554000000000000000000000000006044820152606401610a26565b505050505b935093915050565b600080612a3a868686613972565b90506000855b8015612c4c578787612a536001846142b1565b818110612a6257612a62614253565b9050602002016020810190612a7791906141c7565b91508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612ad657600080fd5b505afa158015612aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0e91906142c8565b73ffffffffffffffffffffffffffffffffffffffff1614612bac578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612b6f57600080fd5b505afa158015612b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba791906142c8565b612c2a565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612bf257600080fd5b505afa158015612c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2a91906142c8565b9250612c37828487612295565b50945080612c4481614784565b915050612a40565b50929695505050505050565b80612c61575050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114612cbb576040519150601f19603f3d011682016040523d82523d6000602084013e612cc0565b606091505b5050905080610b19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610a26565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610b199084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613bb5565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526121309085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612d7d565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612ebc57600080fd5b505afa158015612ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef491906142c8565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b602081015160009015612f2757506000919050565b608082015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276181480612f8d5750612f807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618614710565b60020b826080015160020b145b92915050565b60008060008360020b12612faa578260020b612fb7565b8260020b612fb7906147b9565b9050612fe27ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618614710565b62ffffff16811115613020576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001821661304157700100000000000000000000000000000000613053565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613087576ffff97272373d413259a46990580e213a0260801c5b60048216156130a6576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156130c5576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156130e4576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615613103576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615613122576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615613141576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615613161576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615613181576ff987a7253ac413176f2b074cf7815e540260801c5b6104008216156131a1576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156131c1576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156131e1576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615613201576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615613221576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615613241576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615613262576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615613282576e5d6af8dedb81196699c329225ee6040260801c5b620400008216156132a1576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156132be576b048a170391f7dc42444e8fa20260801c5b60008460020b13156132fd57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816132f9576132f96146a6565b0490505b640100000000810615613311576001613314565b60005b60ff16602082901c0192505050919050565b6000811561334f57613348858585036c010000000000000000000000006133a9565b905061336c565b613369858585036c01000000000000000000000000613cc1565b90505b949350505050565b60006133848383620f42406133a9565b61338e90846142b1565b9392505050565b600061338e83620f424061277c85826142b1565b60006133b6848484613cc1565b905081806133c6576133c66146a6565b8385091561338e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81106133fa57600080fd5b6001019392505050565b6000811561342c57613348613420606087901b868603866133a9565b85808204910615150190565b8361343e606087901b82860386613cc1565b8161344b5761344b6146a6565b0495945050505050565b60008082156136d15760028460020b866080015160020b81613479576134796146a6565b0560020b8161348a5761348a6146a6565b0760020b61355c5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561350157600080fd5b505afa158015613515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353991906145d6565b604001516fffffffffffffffffffffffffffffffff168560200151039150613622565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b1580156135cb57600080fd5b505afa1580156135df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360391906145d6565b604001516fffffffffffffffffffffffffffffffff1685602001510191505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561369157600080fd5b505afa1580156136a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c991906145d6565b519050613943565b60028460020b866080015160020b816136ec576136ec6146a6565b0560020b816136fd576136fd6146a6565b0760020b6137cf5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561377457600080fd5b505afa158015613788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ac91906145d6565b604001516fffffffffffffffffffffffffffffffff168560200151019150613895565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561383e57600080fd5b505afa158015613852573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387691906145d6565b604001516fffffffffffffffffffffffffffffffff1685602001510391505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561390457600080fd5b505afa158015613918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393c91906145d6565b6020015190505b94509492505050565b60008183101561395c578161338e565b5090919050565b600081831061395c578161338e565b600073ffffffffffffffffffffffffffffffffffffffff82161561399657816139b0565b60015473ffffffffffffffffffffffffffffffffffffffff165b90506000805b84811015613bac578585828181106139d0576139d0614253565b90506020020160208101906139e591906141c7565b91508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613a4457600080fd5b505afa158015613a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a7c91906142c8565b73ffffffffffffffffffffffffffffffffffffffff1614613b1a578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613add57600080fd5b505afa158015613af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b1591906142c8565b613b98565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613b6057600080fd5b505afa158015613b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9891906142c8565b925080613ba4816144d4565b9150506139b6565b50509392505050565b6000613c17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613d929092919063ffffffff16565b805190915015610b195780806020019051810190613c35919061450d565b610b19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a26565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415613d195760008411613d0e57600080fd5b50829004905061338e565b808411613d2557600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b606061336c84846000858573ffffffffffffffffffffffffffffffffffffffff85163b613e1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a26565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613e449190614354565b60006040518083038185875af1925050503d8060008114613e81576040519150601f19603f3d011682016040523d82523d6000602084013e613e86565b606091505b5091509150613e96828286613ea1565b979650505050505050565b60608315613eb057508161338e565b825115613ec05782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2691906142fd565b600060c08284031215613f0657600080fd5b50919050565b600060208284031215613f1e57600080fd5b813567ffffffffffffffff811115613f3557600080fd5b61336c84828501613ef4565b73ffffffffffffffffffffffffffffffffffffffff8116811461229257600080fd5b60008060408385031215613f7657600080fd5b8235613f8181613f41565b91506020830135613f9181613f41565b809150509250929050565b600060c08284031215613fae57600080fd5b61338e8383613ef4565b60008060008060008060c08789031215613fd157600080fd5b8635613fdc81613f41565b95506020870135945060408701359350606087013560ff8116811461400057600080fd5b9598949750929560808101359460a0909101359350915050565b6000806020838503121561402d57600080fd5b823567ffffffffffffffff8082111561404557600080fd5b818501915085601f83011261405957600080fd5b81358181111561406857600080fd5b8660208260051b850101111561407d57600080fd5b60209290920196919550909350505050565b60005b838110156140aa578181015183820152602001614092565b838111156121305750506000910152565b600081518084526140d381602086016020860161408f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614178577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526141668583516140bb565b9450928501929085019060010161412c565b5092979650505050505050565b60008060006060848603121561419a57600080fd5b83356141a581613f41565b92506020840135915060408401356141bc81613f41565b809150509250925092565b6000602082840312156141d957600080fd5b813561338e81613f41565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261421957600080fd5b83018035915067ffffffffffffffff82111561423457600080fd5b6020019150600581901b360382131561424c57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156142c3576142c3614282565b500390565b6000602082840312156142da57600080fd5b815161338e81613f41565b600082198211156142f8576142f8614282565b500190565b60208152600061338e60208301846140bb565b60006020828403121561432257600080fd5b5051919050565b801515811461229257600080fd5b60006020828403121561434957600080fd5b813561338e81614329565b6000825161436681846020870161408f565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126143d457600080fd5b83018035915067ffffffffffffffff8211156143ef57600080fd5b60200191503681900382131561424c57600080fd5b8183823760009101908152919050565b60006020828403121561442657600080fd5b815167ffffffffffffffff8082111561443e57600080fd5b818401915084601f83011261445257600080fd5b81518181111561446457614464614370565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156144aa576144aa614370565b816040528281528760208487010111156144c357600080fd5b613e9683602083016020880161408f565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561450657614506614282565b5060010190565b60006020828403121561451f57600080fd5b815161338e81614329565b60006020828403121561453c57600080fd5b815162ffffff8116811461338e57600080fd5b8051600281900b811461456157600080fd5b919050565b6000806040838503121561457957600080fd5b825161458481613f41565b91506145926020840161454f565b90509250929050565b80516fffffffffffffffffffffffffffffffff8116811461456157600080fd5b6000602082840312156145cd57600080fd5b61338e8261459b565b600060c082840312156145e857600080fd5b60405160c0810181811067ffffffffffffffff8211171561460b5761460b614370565b6040526146178361454f565b81526146256020840161454f565b60208201526146366040840161459b565b6040820152606083015160608201526080830151608082015260a083015161465d81613f41565b60a08201529392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146a1576146a1614282565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261470b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000081141561474657614746614282565b60000392915050565b600073ffffffffffffffffffffffffffffffffffffffff8381169083168181101561477c5761477c614282565b039392505050565b60008161479357614793614282565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007f80000000000000000000000000000000000000000000000000000000000000008214156147eb576147eb614282565b506000039056fea2646970667358221220c0d6888d5a65000985f5113825481f32e48be8baaedcd2cac0453ad0a47c50ea64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "exactInput((address,uint256,uint256,address[],address,bool))": {
        "params": {
          "params": "(uint256 amountIn,uint256 amountOutMinimum, address[] path, address tokenIn, address to, bool unwrap)"
        }
      },
      "exactInputSingle((address,uint256,uint256,address,address,bool))": {
        "params": {
          "params": "(uint256 amountIn,uint256 amountOutMinimum, address pool, address tokenIn, address to, bool unwrap)"
        }
      },
      "exactOutput((address,uint256,uint256,address[],address,bool))": {
        "params": {
          "params": "The parameters necessary for the swap, encoded as ExactOutputSingleParams in calldata"
        }
      },
      "exactOutputSingle((address,uint256,uint256,address,address,bool))": {
        "params": {
          "params": "The parameters necessary for the swap, encoded as ExactOutputSingleParams in calldata"
        }
      },
      "multicall(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from this function.",
        "params": {
          "data": "ABI-encoded params for each of the calls to make to this contract."
        },
        "returns": {
          "results": "The results from each of the calls passed in via `data`."
        }
      },
      "permitThis(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Token amount to grant spending right over.",
          "deadline": "Termination for signed approval (UTC timestamp in seconds).",
          "r": "Half of the ECDSA signature pair.",
          "s": "Half of the ECDSA signature pair.",
          "token": "Address of ERC-20 token.",
          "v": "The recovery byte of the signature."
        }
      },
      "permitThisAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "expiry": "Termination for signed approval - UTC timestamp in seconds.",
          "nonce": "Token owner's nonce - increases at each call to {permit}.",
          "r": "Half of the ECDSA signature pair.",
          "s": "Half of the ECDSA signature pair.",
          "token": "Address of ERC-20 token.",
          "v": "The recovery byte of the signature."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exactInput((address,uint256,uint256,address[],address,bool))": {
        "notice": "Swaps token A to token B indirectly by using multiple hops."
      },
      "exactInputSingle((address,uint256,uint256,address,address,bool))": {
        "notice": "Swaps amountIn of one token for as much as possible of another token"
      },
      "exactOutput((address,uint256,uint256,address[],address,bool))": {
        "notice": "Swaps as little as possible of one token for `amountOut` of another token"
      },
      "exactOutputSingle((address,uint256,uint256,address,address,bool))": {
        "notice": "Swaps as little as possible of one token for `amountOut` of another token"
      },
      "masterDeployer()": {
        "notice": "master deployer contract."
      },
      "multicall(bytes[])": {
        "notice": "Provides batch function calls for this contract and returns the data from all of them if they all succeed. Adapted from https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol, License-Identifier: GPL-2.0-or-later."
      },
      "permitThis(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Provides EIP-2612 signed approval for this contract to spend user tokens."
      },
      "permitThisAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Provides DAI-derived signed approval for this contract to spend user tokens."
      },
      "sweep(address,uint256,address)": {
        "notice": "Recover mistakenly sent tokens."
      }
    },
    "notice": "Router contract that helps in swapping across pools.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/pool/PoolRouter.sol:PoolRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/pool/PoolRouter.sol:PoolRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16442,
        "contract": "contracts/pool/PoolRouter.sol:PoolRouter",
        "label": "masterDeployer",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IMasterDeployer)6584"
      },
      {
        "astId": 16445,
        "contract": "contracts/pool/PoolRouter.sol:PoolRouter",
        "label": "wETH",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 16456,
        "contract": "contracts/pool/PoolRouter.sol:PoolRouter",
        "label": "whitelistedPools",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMasterDeployer)6584": {
        "encoding": "inplace",
        "label": "contract IMasterDeployer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}