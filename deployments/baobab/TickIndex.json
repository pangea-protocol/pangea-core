{
  "address": "0x25df6A0cb4506305a58e523E556Ed1e75B33dCC3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConcentratedLiquidityPool",
          "name": "pool",
          "type": "IConcentratedLiquidityPool"
        },
        {
          "internalType": "int24",
          "name": "lowerOld",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "lower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "upperOld",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "upper",
          "type": "int24"
        }
      ],
      "name": "adjust",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fccf2f9099002bcea44e451f5a9784d4c7b7accde0758a623256400ff5f73d0",
  "receipt": {
    "to": null,
    "from": "0x23004B8aD485cEf5C15f8D2868049aB4b2788B0b",
    "contractAddress": "0x25df6A0cb4506305a58e523E556Ed1e75B33dCC3",
    "transactionIndex": 0,
    "gasUsed": "1327808",
    "logsBloom": "0x
    "blockHash": "0x2dbf520dffbd2921a105cc464c113a4f3b794874eafb17f982b11ebe2570e2a2",
    "transactionHash": "0x5fccf2f9099002bcea44e451f5a9784d4c7b7accde0758a623256400ff5f73d0",
    "logs": [],
    "blockNumber": 97484976,
    "cumulativeGasUsed": "1327808",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f01f79503de73c61bcff4c4c934e6fda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConcentratedLiquidityPool\",\"name\":\"pool\",\"type\":\"IConcentratedLiquidityPool\"},{\"internalType\":\"int24\",\"name\":\"lowerOld\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"lower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperOld\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upper\",\"type\":\"int24\"}],\"name\":\"adjust\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TickIndex.sol\":\"TickIndex\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMasterDeployer.sol\\\";\\nimport \\\"../libraries/Ticks.sol\\\";\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice Number of ticks on Pool, starts with two ticks (MIN_TICK & MAX_TICK)\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0xb03df0ceac3b4385700afae66b72c99030843399c5efd1dfd2615d233f9facda\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool deployer interface.\\ninterface IMasterDeployer {\\n    // ============ EVENTS ================\\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\\n    event AddToWhitelistFactory(address indexed factory);\\n    event RemoveFromWhitelistFactory(address indexed factory);\\n    event ProtocolFeeToUpdated(address protocolFeeTo);\\n\\n    /// @notice create pool through factory\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n\\n    /// @notice Return the address receiving protocol fees from Pool\\n    function protocolFeeTo() external view returns (address);\\n\\n    /// @notice Return whether the pool was deployed via a deployer\\n    function pools(address pool) external view returns (bool);\\n\\n    /// @notice LP Airdrop Distributor address\\n    function airdropDistributor() external returns (address);\\n\\n    /// @notice Return the number of pools deployed from masterDeployer\\n    function totalPoolsCount() external view returns (uint256 total);\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool);\\n\\n    /// @notice Return the address of Factory deployed pool\\n    function getFactoryAddress(address pool) external view returns (address factory);\\n}\\n\",\"keccak256\":\"0x78e000c156708cab98e97c281e357b4e5e000174f1b914ea5acdcd11181e4203\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TickIndex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\n\\nlibrary TickIndex {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    function adjust(\\n        IConcentratedLiquidityPool pool,\\n        int24 lowerOld,\\n        int24 lower,\\n        int24 upperOld,\\n        int24 upper\\n    )\\n        external\\n        view\\n        returns (\\n            int24,\\n            int24,\\n            int24,\\n            int24\\n        )\\n    {\\n        (lower, upper) = _adjustLowerAndUpper(pool, lower, upper);\\n        bool needToInitLower = needToInitialize(pool, lower);\\n\\n        if (!needToInitLower) {\\n            lowerOld = pool.ticks(lower).previousTick;\\n        } else if (atWrongPlace(pool, lower, lowerOld)) {\\n            lowerOld = findIndex(pool, lower, lowerOld);\\n        }\\n\\n        if (atUpperNext(pool, lowerOld, upper)) {\\n            return (lowerOld, lower, lower, upper);\\n        }\\n\\n        bool needToInitUpper = needToInitialize(pool, upper);\\n\\n        if (!needToInitUpper) {\\n            upperOld = pool.ticks(upper).previousTick;\\n        } else if (atWrongPlace(pool, upper, upperOld)) {\\n            upperOld = findIndex(pool, upper, upperOld);\\n        }\\n\\n        return (lowerOld, lower, upperOld, upper);\\n    }\\n\\n    function _adjustLowerAndUpper(\\n        IConcentratedLiquidityPool pool,\\n        int24 lower,\\n        int24 upper\\n    ) private view returns (int24 adjustedLower, int24 adjustedUpper) {\\n        // read tick spacing\\n        int24 tickSpacing = int24(pool.tickSpacing());\\n\\n        // lower & upper tick cap\\n        {\\n            (int24 maxLower, int24 maxUpper) = maximumLowerAndUpper(tickSpacing);\\n            lower = lower < maxLower ? maxLower : lower;\\n            upper = upper > maxUpper ? maxUpper : upper;\\n        }\\n\\n        // lower tick should be even & upper tick should be odd\\n        int24 unitLower = lower / tickSpacing;\\n        adjustedLower = unitLower % 2 == 0 ? unitLower * tickSpacing : (unitLower - 1) * tickSpacing;\\n        int24 unitUpper = upper / tickSpacing;\\n        adjustedUpper = unitUpper % 2 == 0 ? (unitUpper + 1) * tickSpacing : unitUpper * tickSpacing;\\n    }\\n\\n    function maximumLowerAndUpper(int24 tickSpacing) private pure returns (int24 minLower, int24 maxUpper) {\\n        int24 unitLower = (MIN_TICK / tickSpacing);\\n        minLower = unitLower % 2 == 0 ? (unitLower + 2) * tickSpacing : (unitLower + 1) * tickSpacing;\\n        int24 unitUpper = (MAX_TICK / tickSpacing);\\n        maxUpper = unitUpper % 2 == 0 ? (unitUpper - 1) * tickSpacing : (unitUpper - 2) * tickSpacing;\\n    }\\n\\n    function needToInitialize(IConcentratedLiquidityPool pool, int24 index) private view returns (bool) {\\n        if (index == MIN_TICK || index == MAX_TICK) return false;\\n        return pool.ticks(index).liquidity == 0;\\n    }\\n\\n    function atWrongPlace(\\n        IConcentratedLiquidityPool pool,\\n        int24 index,\\n        int24 indexOld\\n    ) private view returns (bool) {\\n        if (indexOld >= index) return true;\\n        IConcentratedLiquidityPoolStruct.Tick memory old = pool.ticks(indexOld);\\n        return old.liquidity == 0 || index >= old.nextTick;\\n    }\\n\\n    function atUpperNext(\\n        IConcentratedLiquidityPool pool,\\n        int24 lowerOld,\\n        int24 upper\\n    ) private view returns (bool) {\\n        IConcentratedLiquidityPoolStruct.Tick memory old = pool.ticks(lowerOld);\\n        return upper <= old.nextTick;\\n    }\\n\\n    function atWrongPlace(\\n        int24 tick0,\\n        int24 tick1,\\n        int24 tick2\\n    ) private pure returns (bool) {\\n        return tick0 > tick1 || tick1 > tick2;\\n    }\\n\\n    function findIndex(\\n        IConcentratedLiquidityPool pool,\\n        int24 index,\\n        int24 indexOld\\n    ) private view returns (int24) {\\n        int24 targetIndex = findStartIndex(pool, index, indexOld);\\n\\n        IConcentratedLiquidityPoolStruct.Tick memory targetTick = pool.ticks(targetIndex);\\n\\n        while (atWrongPlace(targetIndex, index, targetTick.nextTick)) {\\n            targetIndex = index < targetIndex ? targetTick.previousTick : targetTick.nextTick;\\n            targetTick = pool.ticks(targetIndex);\\n        }\\n\\n        return targetIndex;\\n    }\\n\\n    function findStartIndex(\\n        IConcentratedLiquidityPool pool,\\n        int24 index,\\n        int24 indexOld\\n    ) private view returns (int24) {\\n        IConcentratedLiquidityPoolStruct.Tick memory old = pool.ticks(indexOld);\\n\\n        if (old.liquidity != 0) {\\n            return indexOld;\\n        }\\n\\n        int24 currTick = pool.nearestTick();\\n        if (index > currTick) {\\n            if (MAX_TICK - index < index - currTick) {\\n                return MAX_TICK;\\n            } else {\\n                return currTick;\\n            }\\n        } else {\\n            if (index - MIN_TICK < currTick - index) {\\n                return MIN_TICK;\\n            } else {\\n                return currTick;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60062ffe3ddce5ccc209114705eae6b538eb7019b8f1e4d1464496010c79083d\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library for computing sqrt price for ticks of size 1.0001, i.e., sqrt(1.0001^tick) as fixed point Q64.96 numbers - supports\\n/// prices between 2**-128 and 2**128 - 1.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/TickMath.sol.\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MIN_TICK).\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MAX_TICK).\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    error TickOutOfBounds();\\n    error PriceOutOfBounds();\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96.\\n    /// @dev Throws if |tick| > max tick.\\n    /// @param tick The input tick for the above formula.\\n    /// @return sqrtPriceX96 Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick.\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        if (absTick > uint256(uint24(MAX_TICK))) revert TickOutOfBounds();\\n        unchecked {\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n            // This divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // We then downcast because we know the result always fits within 160 bits due to our tick input constraint.\\n            // We round up in the division so getTickAtSqrtRatio of the output price is always consistent.\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    function validatePrice(uint160 price) internal pure {\\n        if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio.\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96.\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio.\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // Second inequality must be < because the price can never reach the price at the max tick.\\n        if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n        unchecked {\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number.\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d20064b2a93ccddca358064e4843ebbe8c76fb75c85ce9c95d4050ee10d4ce5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Ticks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\n\\n/// @notice Tick management library for ranged liquidity.\\nlibrary Ticks {\\n    function getMaxLiquidity(uint24 _tickSpacing) internal pure returns (uint128) {\\n        return type(uint128).max / uint128(uint24(TickMath.MAX_TICK) / (2 * uint24(_tickSpacing)));\\n    }\\n\\n    function cross(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 nextTickToCross,\\n        uint160 secondsGrowthGlobal,\\n        uint256 currentLiquidity,\\n        uint256 feeGrowthGlobalA,\\n        uint256 feeGrowthGlobalB,\\n        bool zeroForOne,\\n        uint24 tickSpacing\\n    ) internal returns (uint256, int24) {\\n        ticks[nextTickToCross].secondsGrowthOutside = secondsGrowthGlobal - ticks[nextTickToCross].secondsGrowthOutside;\\n\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside0;\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside1;\\n            nextTickToCross = ticks[nextTickToCross].previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside1;\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside0;\\n            nextTickToCross = ticks[nextTickToCross].nextTick;\\n        }\\n        return (currentLiquidity, nextTickToCross);\\n    }\\n\\n    function insert(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        uint256 feeGrowthGlobal0,\\n        uint256 feeGrowthGlobal1,\\n        uint160 secondsGrowthGlobal,\\n        int24 lowerOld,\\n        int24 lower,\\n        int24 upperOld,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick,\\n        uint160 currentPrice\\n    ) public returns (int24, uint256 numOfInserted) {\\n        require(lower < upper, \\\"WRONG_ORDER\\\");\\n        require(TickMath.MIN_TICK <= lower, \\\"LOWER_RANGE\\\");\\n        require(upper <= TickMath.MAX_TICK, \\\"UPPER_RANGE\\\");\\n\\n        {\\n            // Stack overflow.\\n            uint128 currentLowerLiquidity = ticks[lower].liquidity;\\n            if (currentLowerLiquidity != 0 || lower == TickMath.MIN_TICK) {\\n                // We are adding liquidity to an existing tick.\\n                ticks[lower].liquidity = currentLowerLiquidity + amount;\\n            } else {\\n                // We are inserting a new tick.\\n                int24 oldNextTick;\\n                {\\n                    IConcentratedLiquidityPoolStruct.Tick storage old = ticks[lowerOld];\\n                    oldNextTick = old.nextTick;\\n                    old.nextTick = lower;\\n                    require(\\n                        (old.liquidity != 0 || lowerOld == TickMath.MIN_TICK) && lowerOld < lower && lower < oldNextTick,\\n                        \\\"LOWER_ORDER\\\"\\n                    );\\n                }\\n\\n                if (lower <= nearestTick) {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(\\n                        lowerOld,\\n                        oldNextTick,\\n                        amount,\\n                        feeGrowthGlobal0,\\n                        feeGrowthGlobal1,\\n                        secondsGrowthGlobal\\n                    );\\n                } else {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(lowerOld, oldNextTick, amount, 0, 0, 0);\\n                }\\n\\n                ticks[oldNextTick].previousTick = lower;\\n                numOfInserted += 1;\\n            }\\n        }\\n\\n        uint128 currentUpperLiquidity = ticks[upper].liquidity;\\n        if (currentUpperLiquidity != 0 || upper == TickMath.MAX_TICK) {\\n            // We are adding liquidity to an existing tick.\\n            ticks[upper].liquidity = currentUpperLiquidity + amount;\\n        } else {\\n            // Inserting a new tick.\\n            int24 oldNextTick;\\n            {\\n                IConcentratedLiquidityPoolStruct.Tick storage old = ticks[upperOld];\\n                oldNextTick = old.nextTick;\\n                old.nextTick = upper;\\n                require(old.liquidity != 0 && oldNextTick > upper && upperOld < upper, \\\"UPPER_ORDER\\\");\\n            }\\n\\n            if (upper <= nearestTick) {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(\\n                    upperOld,\\n                    oldNextTick,\\n                    amount,\\n                    feeGrowthGlobal0,\\n                    feeGrowthGlobal1,\\n                    secondsGrowthGlobal\\n                );\\n            } else {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(upperOld, oldNextTick, amount, 0, 0, 0);\\n            }\\n\\n            ticks[oldNextTick].previousTick = upper;\\n            numOfInserted += 1;\\n        }\\n\\n        int24 tickAtPrice = TickMath.getTickAtSqrtRatio(currentPrice);\\n\\n        if (nearestTick < upper && upper <= tickAtPrice) {\\n            nearestTick = upper;\\n        } else if (nearestTick < lower && lower <= tickAtPrice) {\\n            nearestTick = lower;\\n        }\\n\\n        return (nearestTick, numOfInserted);\\n    }\\n\\n    function remove(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick\\n    ) public returns (int24, uint256 numOfRemoved) {\\n        IConcentratedLiquidityPoolStruct.Tick storage current = ticks[lower];\\n\\n        if (lower != TickMath.MIN_TICK && current.liquidity == amount) {\\n            // Delete lower tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == lower) nearestTick = current.previousTick;\\n\\n            delete ticks[lower];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        current = ticks[upper];\\n\\n        if (upper != TickMath.MAX_TICK && current.liquidity == amount) {\\n            // Delete upper tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == upper) nearestTick = current.previousTick;\\n\\n            delete ticks[upper];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        return (nearestTick, numOfRemoved);\\n    }\\n}\\n\",\"keccak256\":\"0x90396c5753a84ef0fd776a206e927d1e4d504f1867fd38fe40d42c7eb8364c7a\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x61108361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063af605c881461003a575b600080fd5b61004d610048366004610c04565b61007b565b60408051600295860b815293850b602085015291840b8383015290920b606082015290519081900360800190f35b60008060008061008c898887610282565b9097509450600061009d8a896103e4565b90508061014d576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600289900b600482015273ffffffffffffffffffffffffffffffffffffffff8b169063f30dba939060240160c06040518083038186803b15801561010d57600080fd5b505afa158015610121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101459190610cb0565b51985061016b565b6101588a898b610513565b1561016b576101688a898b61060a565b98505b6101768a8a886107a4565b1561018d5788888988945094509450945050610276565b60006101998b886103e4565b905080610249576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600288900b600482015273ffffffffffffffffffffffffffffffffffffffff8c169063f30dba939060240160c06040518083038186803b15801561020957600080fd5b505afa15801561021d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102419190610cb0565b519750610267565b6102548b888a610513565b15610267576102648b888a61060a565b97505b89898989955095509550955050505b95509550955095915050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102cd57600080fd5b505afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190610d68565b905060008061031383610864565b915091508160020b8760020b1261032a578661032c565b815b96508060020b8660020b136103415785610343565b805b95505050600081866103559190610deb565b9050610362600282610e5f565b60020b156103855781610376600183610e81565b6103809190610ee5565b61038f565b61038f8282610ee5565b9350600061039d8387610deb565b90506103aa600282610e5f565b60020b156103c1576103bc8382610ee5565b6103d7565b826103cd826001610f8e565b6103d79190610ee5565b9350505050935093915050565b6000600282900b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276181480610445575061043c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ff1565b60020b8260020b145b156104525750600061050d565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600283900b600482015273ffffffffffffffffffffffffffffffffffffffff84169063f30dba939060240160c06040518083038186803b1580156104bb57600080fd5b505afa1580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190610cb0565b604001516fffffffffffffffffffffffffffffffff161590505b92915050565b60008260020b8260020b1261052a57506001610603565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600283900b600482015260009073ffffffffffffffffffffffffffffffffffffffff86169063f30dba939060240160c06040518083038186803b15801561059657600080fd5b505afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce9190610cb0565b905080604001516fffffffffffffffffffffffffffffffff16600014806105ff5750806020015160020b8460020b12155b9150505b9392505050565b60008061061885858561095f565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015290915060009073ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561068757600080fd5b505afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190610cb0565b90505b6106d182868360200151610bad565b1561079b578160020b8560020b126106ed5780602001516106f0565b80515b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015290925073ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190610cb0565b90506106c2565b50949350505050565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600283900b6004820152600090819073ffffffffffffffffffffffffffffffffffffffff86169063f30dba939060240160c06040518083038186803b15801561081257600080fd5b505afa158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a9190610cb0565b9050806020015160020b8360020b13159150509392505050565b60008080610892847ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610deb565b905061089f600282610e5f565b60020b156108c257836108b3826001610f8e565b6108bd9190610ee5565b6108d8565b836108ce826002610f8e565b6108d89190610ee5565b92506000846109067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ff1565b6109109190610deb565b905061091d600282610e5f565b60020b156109405784610931600283610e81565b61093b9190610ee5565b610956565b8461094c600183610e81565b6109569190610ee5565b92505050915091565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b6004820152600090819073ffffffffffffffffffffffffffffffffffffffff86169063f30dba939060240160c06040518083038186803b1580156109cd57600080fd5b505afa1580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190610cb0565b905080604001516fffffffffffffffffffffffffffffffff16600014610a2e5782915050610603565b60008573ffffffffffffffffffffffffffffffffffffffff1663a00e8f296040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190611030565b90508060020b8560020b1315610b4357610ac88186610e81565b60020b85610af57ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ff1565b610aff9190610e81565b60020b1215610b3a57610b317ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ff1565b92505050610603565b91506106039050565b610b4d8582610e81565b60020b610b7a7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761887610e81565b60020b1215610b3a577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761892505050610603565b60008260020b8460020b1380610bc857508160020b8360020b135b949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610bf257600080fd5b50565b8060020b8114610bf257600080fd5b600080600080600060a08688031215610c1c57600080fd5b8535610c2781610bd0565b94506020860135610c3781610bf5565b93506040860135610c4781610bf5565b92506060860135610c5781610bf5565b91506080860135610c6781610bf5565b809150509295509295909350565b8051610c8081610bf5565b919050565b80516fffffffffffffffffffffffffffffffff81168114610c8057600080fd5b8051610c8081610bd0565b600060c08284031215610cc257600080fd5b60405160c0810181811067ffffffffffffffff82111715610d0c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052610d1883610c75565b8152610d2660208401610c75565b6020820152610d3760408401610c85565b60408201526060830151606082015260808301516080820152610d5c60a08401610ca5565b60a08201529392505050565b600060208284031215610d7a57600080fd5b815162ffffff8116811461060357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160020b8360020b80610e0257610e02610d8d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083141615610e5657610e56610dbc565b90059392505050565b60008260020b80610e7257610e72610d8d565b808360020b0791505092915050565b60008160020b8360020b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000001831281151615610ec457610ec4610dbc565b81627fffff018313811615610edb57610edb610dbc565b5090039392505050565b60008160020b8360020b627fffff600082136000841383830485118282161615610f1157610f11610dbc565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000006000851286820586128184161615610f4c57610f4c610dbc565b60008712925085820587128484161615610f6857610f68610dbc565b85850587128184161615610f7e57610f7e610dbc565b5050509290910295945050505050565b60008160020b8360020b6000821282627fffff03821381151615610fb457610fb4610dbc565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000038212811615610fe857610fe8610dbc565b50019392505050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000081141561102757611027610dbc565b60000392915050565b60006020828403121561104257600080fd5b815161060381610bf556fea2646970667358221220f00475c4bcd14ce96321f57b7e763f6d968537da7199f058f19ba8e7c823416264736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063af605c881461003a575b600080fd5b61004d610048366004610c04565b61007b565b60408051600295860b815293850b602085015291840b8383015290920b606082015290519081900360800190f35b60008060008061008c898887610282565b9097509450600061009d8a896103e4565b90508061014d576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600289900b600482015273ffffffffffffffffffffffffffffffffffffffff8b169063f30dba939060240160c06040518083038186803b15801561010d57600080fd5b505afa158015610121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101459190610cb0565b51985061016b565b6101588a898b610513565b1561016b576101688a898b61060a565b98505b6101768a8a886107a4565b1561018d5788888988945094509450945050610276565b60006101998b886103e4565b905080610249576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600288900b600482015273ffffffffffffffffffffffffffffffffffffffff8c169063f30dba939060240160c06040518083038186803b15801561020957600080fd5b505afa15801561021d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102419190610cb0565b519750610267565b6102548b888a610513565b15610267576102648b888a61060a565b97505b89898989955095509550955050505b95509550955095915050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102cd57600080fd5b505afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190610d68565b905060008061031383610864565b915091508160020b8760020b1261032a578661032c565b815b96508060020b8660020b136103415785610343565b805b95505050600081866103559190610deb565b9050610362600282610e5f565b60020b156103855781610376600183610e81565b6103809190610ee5565b61038f565b61038f8282610ee5565b9350600061039d8387610deb565b90506103aa600282610e5f565b60020b156103c1576103bc8382610ee5565b6103d7565b826103cd826001610f8e565b6103d79190610ee5565b9350505050935093915050565b6000600282900b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276181480610445575061043c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ff1565b60020b8260020b145b156104525750600061050d565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600283900b600482015273ffffffffffffffffffffffffffffffffffffffff84169063f30dba939060240160c06040518083038186803b1580156104bb57600080fd5b505afa1580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190610cb0565b604001516fffffffffffffffffffffffffffffffff161590505b92915050565b60008260020b8260020b1261052a57506001610603565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600283900b600482015260009073ffffffffffffffffffffffffffffffffffffffff86169063f30dba939060240160c06040518083038186803b15801561059657600080fd5b505afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce9190610cb0565b905080604001516fffffffffffffffffffffffffffffffff16600014806105ff5750806020015160020b8460020b12155b9150505b9392505050565b60008061061885858561095f565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015290915060009073ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561068757600080fd5b505afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190610cb0565b90505b6106d182868360200151610bad565b1561079b578160020b8560020b126106ed5780602001516106f0565b80515b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015290925073ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190610cb0565b90506106c2565b50949350505050565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600283900b6004820152600090819073ffffffffffffffffffffffffffffffffffffffff86169063f30dba939060240160c06040518083038186803b15801561081257600080fd5b505afa158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a9190610cb0565b9050806020015160020b8360020b13159150509392505050565b60008080610892847ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610deb565b905061089f600282610e5f565b60020b156108c257836108b3826001610f8e565b6108bd9190610ee5565b6108d8565b836108ce826002610f8e565b6108d89190610ee5565b92506000846109067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ff1565b6109109190610deb565b905061091d600282610e5f565b60020b156109405784610931600283610e81565b61093b9190610ee5565b610956565b8461094c600183610e81565b6109569190610ee5565b92505050915091565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b6004820152600090819073ffffffffffffffffffffffffffffffffffffffff86169063f30dba939060240160c06040518083038186803b1580156109cd57600080fd5b505afa1580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190610cb0565b905080604001516fffffffffffffffffffffffffffffffff16600014610a2e5782915050610603565b60008573ffffffffffffffffffffffffffffffffffffffff1663a00e8f296040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190611030565b90508060020b8560020b1315610b4357610ac88186610e81565b60020b85610af57ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ff1565b610aff9190610e81565b60020b1215610b3a57610b317ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ff1565b92505050610603565b91506106039050565b610b4d8582610e81565b60020b610b7a7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761887610e81565b60020b1215610b3a577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761892505050610603565b60008260020b8460020b1380610bc857508160020b8360020b135b949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610bf257600080fd5b50565b8060020b8114610bf257600080fd5b600080600080600060a08688031215610c1c57600080fd5b8535610c2781610bd0565b94506020860135610c3781610bf5565b93506040860135610c4781610bf5565b92506060860135610c5781610bf5565b91506080860135610c6781610bf5565b809150509295509295909350565b8051610c8081610bf5565b919050565b80516fffffffffffffffffffffffffffffffff81168114610c8057600080fd5b8051610c8081610bd0565b600060c08284031215610cc257600080fd5b60405160c0810181811067ffffffffffffffff82111715610d0c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052610d1883610c75565b8152610d2660208401610c75565b6020820152610d3760408401610c85565b60408201526060830151606082015260808301516080820152610d5c60a08401610ca5565b60a08201529392505050565b600060208284031215610d7a57600080fd5b815162ffffff8116811461060357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160020b8360020b80610e0257610e02610d8d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083141615610e5657610e56610dbc565b90059392505050565b60008260020b80610e7257610e72610d8d565b808360020b0791505092915050565b60008160020b8360020b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000001831281151615610ec457610ec4610dbc565b81627fffff018313811615610edb57610edb610dbc565b5090039392505050565b60008160020b8360020b627fffff600082136000841383830485118282161615610f1157610f11610dbc565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000006000851286820586128184161615610f4c57610f4c610dbc565b60008712925085820587128484161615610f6857610f68610dbc565b85850587128184161615610f7e57610f7e610dbc565b5050509290910295945050505050565b60008160020b8360020b6000821282627fffff03821381151615610fb457610fb4610dbc565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000038212811615610fe857610fe8610dbc565b50019392505050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000081141561102757611027610dbc565b60000392915050565b60006020828403121561104257600080fd5b815161060381610bf556fea2646970667358221220f00475c4bcd14ce96321f57b7e763f6d968537da7199f058f19ba8e7c823416264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "MAX_TICK": {
        "details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1."
      },
      "MIN_TICK": {
        "details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}