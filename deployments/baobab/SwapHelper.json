{
  "address": "0x9E2fFC3414e0b98d3c985924dE51c6a35D47795E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TickOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountIn",
          "type": "uint256"
        }
      ],
      "name": "calculateExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountIn",
          "type": "uint256"
        }
      ],
      "name": "calculateExactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountOut",
          "type": "uint256"
        }
      ],
      "name": "calculateExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exactAmountOut",
          "type": "uint256"
        }
      ],
      "name": "calculateExactOutputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x084ba56ce4f13830ac8360605901f055422ac54b1bf7c1ea83dffc9d44ce432c",
  "receipt": {
    "to": null,
    "from": "0x23004B8aD485cEf5C15f8D2868049aB4b2788B0b",
    "contractAddress": "0x9E2fFC3414e0b98d3c985924dE51c6a35D47795E",
    "transactionIndex": 1,
    "gasUsed": "3148112",
    "logsBloom": "0x
    "blockHash": "0x898a743485e0f97a31044209e308cdf32290753a5e2351e37445c5f4098c701c",
    "transactionHash": "0x084ba56ce4f13830ac8360605901f055422ac54b1bf7c1ea83dffc9d44ce432c",
    "logs": [],
    "blockNumber": 96729594,
    "cumulativeGasUsed": "3179021",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3e825cbA8d59Eb0E62A24Db1A8F85158d30A26c3"
  ],
  "numDeployments": 1,
  "solcInputHash": "f775cf71cf3afe8bafbf3e3b34605380",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TickOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountIn\",\"type\":\"uint256\"}],\"name\":\"calculateExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountIn\",\"type\":\"uint256\"}],\"name\":\"calculateExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"}],\"name\":\"calculateExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"}],\"name\":\"calculateExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/SwapHelper.sol\":\"SwapHelper\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMasterDeployer.sol\\\";\\nimport \\\"../libraries/Ticks.sol\\\";\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice Number of ticks on Pool, starts with two ticks (MIN_TICK & MAX_TICK)\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0x1706aece79916f4110bd7575ea4e0f1dd746495be74f5bec8e4d2f2c45615425\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool deployer interface.\\ninterface IMasterDeployer {\\n    // ============ EVENTS ================\\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\\n    event AddToWhitelistFactory(address indexed factory);\\n    event RemoveFromWhitelistFactory(address indexed factory);\\n    event ProtocolFeeToUpdated(address protocolFeeTo);\\n\\n    /// @notice create pool through factory\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n\\n    /// @notice Return the address receiving protocol fees from Pool\\n    function protocolFeeTo() external view returns (address);\\n\\n    /// @notice Return whether the pool was deployed via a deployer\\n    function pools(address pool) external view returns (bool);\\n\\n    /// @notice LP Airdrop Distributor address\\n    function airdropDistributor() external returns (address);\\n\\n    /// @notice Return the number of pools deployed from masterDeployer\\n    function totalPoolsCount() external view returns (uint256 total);\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool);\\n\\n    /// @notice Return the address of Factory deployed pool\\n    function getFactoryAddress(address pool) external view returns (address factory);\\n}\\n\",\"keccak256\":\"0x78e000c156708cab98e97c281e357b4e5e000174f1b914ea5acdcd11181e4203\",\"license\":\"GPL-3.0\"},\"contracts/libraries/DyDxMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n/// @notice Math library that facilitates ranged liquidity calculations.\\nlibrary DyDxMath {\\n    function getDy(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dy) {\\n        unchecked {\\n            if (roundUp) {\\n                dy = FullMath.mulDivRoundingUp(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            } else {\\n                dy = FullMath.mulDiv(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            }\\n        }\\n    }\\n\\n    function getDx(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dx) {\\n        unchecked {\\n            if (roundUp) {\\n                dx = UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper),\\n                    priceLower\\n                );\\n            } else {\\n                dx = FullMath.mulDiv(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper) / priceLower;\\n            }\\n        }\\n    }\\n\\n    function getLiquidityForAmounts(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 dy,\\n        uint256 dx\\n    ) internal pure returns (uint256 liquidity) {\\n        unchecked {\\n            if (priceUpper <= currentPrice) {\\n                liquidity = FullMath.mulDiv(dy, FixedPoint.Q96, priceUpper - priceLower);\\n            } else if (currentPrice <= priceLower) {\\n                liquidity = FullMath.mulDiv(dx, FullMath.mulDiv(priceLower, priceUpper, FixedPoint.Q96), priceUpper - priceLower);\\n            } else {\\n                uint256 liquidity0 = FullMath.mulDiv(\\n                    dx,\\n                    FullMath.mulDiv(priceUpper, currentPrice, FixedPoint.Q96),\\n                    priceUpper - currentPrice\\n                );\\n                uint256 liquidity1 = FullMath.mulDiv(dy, FixedPoint.Q96, currentPrice - priceLower);\\n                liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n            }\\n        }\\n    }\\n\\n    function getAmountsForLiquidity(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 liquidityAmount,\\n        bool roundUp\\n    ) internal pure returns (uint128 token0amount, uint128 token1amount) {\\n        if (priceUpper <= currentPrice) {\\n            // Only supply `token1` (`token1` is Y).\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else if (currentPrice <= priceLower) {\\n            // Only supply `token0` (`token0` is X).\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else {\\n            // Supply both tokens.\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, currentPrice, priceUpper, roundUp));\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, currentPrice, roundUp));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd7e93680c237fbda55c989b3bbf3dcd14c4df5d40a0a9a997325d8a539f80cc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary FixedPoint {\\n    uint8 internal constant Q128RES = 128;\\n    uint8 internal constant Q96RES = 96;\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x591a424ebe1e10342bf873b49a85989bcbca4b575846ed3d3f3a194f122fdbbd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\\n/// @dev Handles \\\"phantom overflow\\\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b.\\n            // Compute the product mod 2**256 and mod 2**256 - 1,\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product.\\n            uint256 prod1; // Most significant 256 bits of the product.\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n            // Make sure the result is less than 2**256 -\\n            // also prevents denominator == 0.\\n            require(denominator > prod1);\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n            // Make division exact by subtracting the remainder from [prod1 prod0] -\\n            // compute remainder using mulmod.\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number.\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n            // Factor powers of two out of denominator -\\n            // compute largest power of two divisor of denominator\\n            // (always >= 1).\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two.\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n            // Divide [prod1 prod0] by the factors of two.\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos -\\n            // if twos is zero, then it becomes one.\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256 -\\n            // now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // for four bits. That is, denominator * inv = 1 mod 2**4.\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**8.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**16.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**32.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**64.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**128.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**256.\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        unchecked {\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8211b004be6ff6be30b81fe484544d00c7bb467a4fd2a0d6c60114353e2300cf\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary SafeCast {\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        require((z = uint128(y)) == y);\\n    }\\n\\n    function toInt128(uint256 y) internal pure returns (int128 z) {\\n        require(y <= 2**127 - 1);\\n        return int128(int256(y));\\n    }\\n}\\n\",\"keccak256\":\"0x26f130f9e37749f36d7c61bb818227d0ef4e089695be0009e9b626e63c7753c3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/SwapHelperLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IConcentratedLiquidityPool as CLPool} from \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../libraries/DyDxMath.sol\\\";\\nimport \\\"../libraries/TickMath.sol\\\";\\nimport \\\"../libraries/FullMath.sol\\\";\\n\\nlibrary SwapHelperLib {\\n    struct SwapCache {\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        uint256 output;\\n        int24 nextTickToCross;\\n    }\\n\\n    function exactInput(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountIn\\n    ) internal view returns (uint256 amountOut, uint256 price) {\\n        bool zeroForOne = determineZeroForOne(pool, tokenIn);\\n        uint24 swapFee = CLPool(pool).swapFee();\\n        int24 iTickSpacing = int24(CLPool(pool).tickSpacing());\\n\\n        // initialize cache\\n        SwapCache memory cache;\\n        {\\n            (uint160 currentPrice, int24 nearestTick) = CLPool(pool).getPriceAndNearestTicks();\\n            cache = SwapCache({\\n                currentPrice: currentPrice,\\n                currentLiquidity: uint256(CLPool(pool).liquidity()),\\n                input: exactAmountIn,\\n                output: 0,\\n                nextTickToCross: zeroForOne ? nearestTick : CLPool(pool).ticks(nearestTick).nextTick\\n            });\\n        }\\n        if (zeroLiquidity(cache)) return (0, cache.currentPrice);\\n\\n        while (cache.input != 0) {\\n            uint256 nextTickPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n            uint256 output = 0;\\n            bool cross = false;\\n\\n            if (zeroForOne) {\\n                // Trading token 0 (x) for token 1 (y).\\n                // Price is decreasing.\\n                // Maximum input amount within current tick range: \\u0394x = \\u0394(1/\\u221a\\ud835\\udc43) \\u00b7 L.\\n                uint256 maxDx = DyDxMath.getDx(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n\\n                if (cache.input <= maxDx) {\\n                    // We can swap within the current range.\\n                    uint256 liquidityPadded = cache.currentLiquidity << FixedPoint.Q96RES;\\n                    // Calculate new price after swap: \\u221a\\ud835\\udc43[new] =  L \\u00b7 \\u221a\\ud835\\udc43 / (L + \\u0394x \\u00b7 \\u221a\\ud835\\udc43)\\n                    // This is derived from \\u0394(1/\\u221a\\ud835\\udc43) = \\u0394x/L\\n                    // where \\u0394(1/\\u221a\\ud835\\udc43) is 1/\\u221a\\ud835\\udc43[old] - 1/\\u221a\\ud835\\udc43[new] and we solve for \\u221a\\ud835\\udc43[new].\\n                    // In case of an overflow we can use: \\u221a\\ud835\\udc43[new] = L / (L / \\u221a\\ud835\\udc43 + \\u0394x).\\n                    // This is derived by dividing the original fraction by \\u221a\\ud835\\udc43 on both sides.\\n                    uint256 newPrice = uint256(\\n                        FullMath.mulDivRoundingUp(liquidityPadded, cache.currentPrice, liquidityPadded + cache.currentPrice * cache.input)\\n                    );\\n\\n                    if (!(nextTickPrice <= newPrice && newPrice < cache.currentPrice)) {\\n                        // Overflow. We use a modified version of the formula.\\n                        newPrice = uint160(UnsafeMath.divRoundingUp(liquidityPadded, liquidityPadded / cache.currentPrice + cache.input));\\n                    }\\n                    // Based on the price difference calculate the output of th swap: \\u0394y = \\u0394\\u221aP \\u00b7 L.\\n                    output = DyDxMath.getDy(cache.currentLiquidity, newPrice, cache.currentPrice, false);\\n                    cache.currentPrice = newPrice;\\n                    cache.input = 0;\\n                } else {\\n                    // Execute swap step and cross the tick.\\n                    output = DyDxMath.getDy(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n                    cache.currentPrice = nextTickPrice;\\n                    cross = true;\\n                    cache.input -= maxDx;\\n                }\\n            } else {\\n                // Price is increasing.\\n                // Maximum swap amount within the current tick range: \\u0394y = \\u0394\\u221aP \\u00b7 L.\\n                uint256 maxDy = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n\\n                if (cache.input <= maxDy) {\\n                    // We can swap within the current range.\\n                    // Calculate new price after swap: \\u0394P = \\u0394y/L.\\n                    uint256 newPrice = cache.currentPrice + FullMath.mulDiv(cache.input, FixedPoint.Q96, cache.currentLiquidity);\\n                    // Calculate output of swap\\n                    // - \\u0394x = \\u0394(1/\\u221aP) \\u00b7 L.\\n                    output = DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, newPrice, false);\\n                    cache.currentPrice = newPrice;\\n                    cache.input = 0;\\n                } else {\\n                    // Swap & cross the tick.\\n                    output = DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n                    cache.currentPrice = nextTickPrice;\\n                    cross = true;\\n                    cache.input -= maxDy;\\n                }\\n            }\\n\\n            amountOut += amountWithOutFee(output, swapFee);\\n\\n            if (cross) {\\n                (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n\\n                if (cache.currentLiquidity == 0) {\\n                    if (cache.nextTickToCross == TickMath.MAX_TICK || cache.nextTickToCross == TickMath.MIN_TICK) {\\n                        // In the case of the last tick, there is no next tick.\\n                        // price must be crossed because of rangeFeeGrowth\\n                        if (zeroForOne) {\\n                            cache.currentPrice = Math.max(cache.currentPrice - 1, TickMath.MIN_SQRT_RATIO);\\n                        } else {\\n                            cache.currentPrice = Math.min(cache.currentPrice + 1, TickMath.MAX_SQRT_RATIO - 1);\\n                        }\\n                        break;\\n                    }\\n                    cache.currentPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n                    (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n                }\\n            }\\n        }\\n\\n        price = cache.currentPrice;\\n    }\\n\\n    function exactOutput(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountOut\\n    ) internal view returns (uint256 amountIn, uint256 price) {\\n        bool zeroForOne = determineZeroForOne(pool, tokenIn);\\n        uint24 swapFee = CLPool(pool).swapFee();\\n        int24 iTickSpacing = int24(CLPool(pool).tickSpacing());\\n\\n        // initialize cache\\n        SwapCache memory cache;\\n        {\\n            (uint160 currentPrice, int24 nearestTick) = CLPool(pool).getPriceAndNearestTicks();\\n            cache = SwapCache({\\n                currentPrice: currentPrice,\\n                currentLiquidity: uint256(CLPool(pool).liquidity()),\\n                input: 0,\\n                output: exactAmountOut,\\n                nextTickToCross: zeroForOne ? nearestTick : CLPool(pool).ticks(nearestTick).nextTick\\n            });\\n        }\\n        if (zeroLiquidity(cache)) return (0, cache.currentPrice);\\n\\n        while (cache.output != 0) {\\n            uint256 nextTickPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n            uint256 input = 0;\\n            bool cross = false;\\n\\n            if (zeroForOne) {\\n                uint256 maxDy = amountWithOutFee(DyDxMath.getDy(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false), swapFee);\\n\\n                if (cache.output <= maxDy) {\\n                    uint256 newPrice = cache.currentPrice -\\n                        FullMath.mulDivRoundingUp(amountWithFee(cache.output, swapFee), FixedPoint.Q96, cache.currentLiquidity);\\n                    input = DyDxMath.getDx(cache.currentLiquidity, newPrice, cache.currentPrice, true);\\n\\n                    cache.currentPrice = newPrice;\\n                    cache.output = 0;\\n                } else {\\n                    input = DyDxMath.getDx(cache.currentLiquidity, nextTickPrice, cache.currentPrice, false);\\n\\n                    cache.currentPrice = nextTickPrice;\\n                    cache.output -= maxDy;\\n                    cross = true;\\n                }\\n            } else {\\n                uint256 maxDx = amountWithOutFee(DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false), swapFee);\\n\\n                if (cache.output <= maxDx) {\\n                    uint256 liquidityPadded = cache.currentLiquidity << FixedPoint.Q96RES;\\n                    uint256 newPrice = uint256(\\n                        FullMath.mulDivRoundingUp(\\n                            liquidityPadded,\\n                            cache.currentPrice,\\n                            liquidityPadded - cache.currentPrice * amountWithFee(cache.output, swapFee)\\n                        )\\n                    );\\n\\n                    if (!(cache.currentPrice <= newPrice && newPrice < nextTickPrice)) {\\n                        // Overflow. We use a modified version of the formula.\\n                        newPrice = uint160(\\n                            UnsafeMath.divRoundingUp(\\n                                liquidityPadded,\\n                                liquidityPadded / cache.currentPrice - amountWithFee(cache.output, swapFee)\\n                            )\\n                        );\\n                    }\\n\\n                    input = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, newPrice, true);\\n\\n                    cache.currentPrice = newPrice;\\n                    cache.output = 0;\\n                } else {\\n                    input = DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, nextTickPrice, false);\\n\\n                    cache.currentPrice = nextTickPrice;\\n                    cache.output -= maxDx;\\n                    cross = true;\\n                }\\n            }\\n            amountIn += input;\\n\\n            if (cross) {\\n                (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n\\n                if (cache.currentLiquidity == 0) {\\n                    if (cache.nextTickToCross == TickMath.MAX_TICK || cache.nextTickToCross == TickMath.MIN_TICK) {\\n                        // In the case of the last tick, there is no next tick.\\n                        // price must be crossed because of rangeFeeGrowth\\n                        if (zeroForOne) {\\n                            cache.currentPrice = Math.max(cache.currentPrice - 1, TickMath.MIN_SQRT_RATIO);\\n                        } else {\\n                            cache.currentPrice = Math.min(cache.currentPrice + 1, TickMath.MAX_SQRT_RATIO - 1);\\n                        }\\n                        break;\\n                    }\\n                    cache.currentPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n                    (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n                }\\n            }\\n        }\\n        price = cache.currentPrice;\\n        require(cache.output == 0, \\\"INSUFFICIENT OUTPUT\\\");\\n    }\\n\\n    function crossTick(\\n        address pool,\\n        SwapCache memory cache,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) private view returns (uint256 currentLiquidity, int24 nextTickToCross) {\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n            unchecked {\\n                if ((cache.nextTickToCross / tickSpacing) % 2 == 0) {\\n                    currentLiquidity = cache.currentLiquidity - CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                } else {\\n                    currentLiquidity = cache.currentLiquidity + CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                }\\n            }\\n            nextTickToCross = CLPool(pool).ticks(cache.nextTickToCross).previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n            unchecked {\\n                if ((cache.nextTickToCross / tickSpacing) % 2 == 0) {\\n                    currentLiquidity = cache.currentLiquidity + CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                } else {\\n                    currentLiquidity = cache.currentLiquidity - CLPool(pool).ticks(cache.nextTickToCross).liquidity;\\n                }\\n            }\\n            nextTickToCross = CLPool(pool).ticks(cache.nextTickToCross).nextTick;\\n        }\\n    }\\n\\n    function zeroLiquidity(SwapCache memory cache) internal pure returns (bool) {\\n        if (cache.currentLiquidity > 0) {\\n            return false;\\n        }\\n        return cache.nextTickToCross == TickMath.MIN_TICK || cache.nextTickToCross == TickMath.MAX_TICK;\\n    }\\n\\n    function amountWithFee(uint256 amount, uint256 swapFee) private pure returns (uint256) {\\n        return FullMath.mulDivRoundingUp(amount, 1e6, 1e6 - swapFee);\\n    }\\n\\n    function amountWithOutFee(uint256 amount, uint256 swapFee) private pure returns (uint256) {\\n        return amount - FullMath.mulDivRoundingUp(amount, swapFee, 1e6);\\n    }\\n\\n    function determineZeroForOne(address pool, address tokenIn) private view returns (bool) {\\n        return CLPool(pool).token0() == tokenIn;\\n    }\\n}\\n\",\"keccak256\":\"0xea8c2ca44a5dc4621a6c59f164ab756e05642c849840ebe9e8d075e8e74a40d4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library for computing sqrt price for ticks of size 1.0001, i.e., sqrt(1.0001^tick) as fixed point Q64.96 numbers - supports\\n/// prices between 2**-128 and 2**128 - 1.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/TickMath.sol.\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MIN_TICK).\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MAX_TICK).\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    error TickOutOfBounds();\\n    error PriceOutOfBounds();\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96.\\n    /// @dev Throws if |tick| > max tick.\\n    /// @param tick The input tick for the above formula.\\n    /// @return sqrtPriceX96 Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick.\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        if (absTick > uint256(uint24(MAX_TICK))) revert TickOutOfBounds();\\n        unchecked {\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n            // This divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // We then downcast because we know the result always fits within 160 bits due to our tick input constraint.\\n            // We round up in the division so getTickAtSqrtRatio of the output price is always consistent.\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    function validatePrice(uint160 price) internal pure {\\n        if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio.\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96.\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio.\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // Second inequality must be < because the price can never reach the price at the max tick.\\n        if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n        unchecked {\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number.\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d20064b2a93ccddca358064e4843ebbe8c76fb75c85ce9c95d4050ee10d4ce5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Ticks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\n\\n/// @notice Tick management library for ranged liquidity.\\nlibrary Ticks {\\n    function getMaxLiquidity(uint24 _tickSpacing) internal pure returns (uint128) {\\n        return type(uint128).max / uint128(uint24(TickMath.MAX_TICK) / (2 * uint24(_tickSpacing)));\\n    }\\n\\n    function cross(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 nextTickToCross,\\n        uint160 secondsGrowthGlobal,\\n        uint256 currentLiquidity,\\n        uint256 feeGrowthGlobalA,\\n        uint256 feeGrowthGlobalB,\\n        bool zeroForOne,\\n        uint24 tickSpacing\\n    ) internal returns (uint256, int24) {\\n        ticks[nextTickToCross].secondsGrowthOutside = secondsGrowthGlobal - ticks[nextTickToCross].secondsGrowthOutside;\\n\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside0;\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside1;\\n            nextTickToCross = ticks[nextTickToCross].previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside1;\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside0;\\n            nextTickToCross = ticks[nextTickToCross].nextTick;\\n        }\\n        return (currentLiquidity, nextTickToCross);\\n    }\\n\\n    function insert(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        uint256 feeGrowthGlobal0,\\n        uint256 feeGrowthGlobal1,\\n        uint160 secondsGrowthGlobal,\\n        int24 lowerOld,\\n        int24 lower,\\n        int24 upperOld,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick,\\n        uint160 currentPrice\\n    ) public returns (int24, uint256 numOfInserted) {\\n        require(lower < upper, \\\"WRONG_ORDER\\\");\\n        require(TickMath.MIN_TICK <= lower, \\\"LOWER_RANGE\\\");\\n        require(upper <= TickMath.MAX_TICK, \\\"UPPER_RANGE\\\");\\n\\n        {\\n            // Stack overflow.\\n            uint128 currentLowerLiquidity = ticks[lower].liquidity;\\n            if (currentLowerLiquidity != 0 || lower == TickMath.MIN_TICK) {\\n                // We are adding liquidity to an existing tick.\\n                ticks[lower].liquidity = currentLowerLiquidity + amount;\\n            } else {\\n                // We are inserting a new tick.\\n                int24 oldNextTick;\\n                {\\n                    IConcentratedLiquidityPoolStruct.Tick storage old = ticks[lowerOld];\\n                    oldNextTick = old.nextTick;\\n                    old.nextTick = lower;\\n                    require(\\n                        (old.liquidity != 0 || lowerOld == TickMath.MIN_TICK) && lowerOld < lower && lower < oldNextTick,\\n                        \\\"LOWER_ORDER\\\"\\n                    );\\n                }\\n\\n                if (lower <= nearestTick) {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(\\n                        lowerOld,\\n                        oldNextTick,\\n                        amount,\\n                        feeGrowthGlobal0,\\n                        feeGrowthGlobal1,\\n                        secondsGrowthGlobal\\n                    );\\n                } else {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(lowerOld, oldNextTick, amount, 0, 0, 0);\\n                }\\n\\n                ticks[oldNextTick].previousTick = lower;\\n                numOfInserted += 1;\\n            }\\n        }\\n\\n        uint128 currentUpperLiquidity = ticks[upper].liquidity;\\n        if (currentUpperLiquidity != 0 || upper == TickMath.MAX_TICK) {\\n            // We are adding liquidity to an existing tick.\\n            ticks[upper].liquidity = currentUpperLiquidity + amount;\\n        } else {\\n            // Inserting a new tick.\\n            int24 oldNextTick;\\n            {\\n                IConcentratedLiquidityPoolStruct.Tick storage old = ticks[upperOld];\\n                oldNextTick = old.nextTick;\\n                old.nextTick = upper;\\n                require(old.liquidity != 0 && oldNextTick > upper && upperOld < upper, \\\"UPPER_ORDER\\\");\\n            }\\n\\n            if (upper <= nearestTick) {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(\\n                    upperOld,\\n                    oldNextTick,\\n                    amount,\\n                    feeGrowthGlobal0,\\n                    feeGrowthGlobal1,\\n                    secondsGrowthGlobal\\n                );\\n            } else {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(upperOld, oldNextTick, amount, 0, 0, 0);\\n            }\\n\\n            ticks[oldNextTick].previousTick = upper;\\n            numOfInserted += 1;\\n        }\\n\\n        int24 tickAtPrice = TickMath.getTickAtSqrtRatio(currentPrice);\\n\\n        if (nearestTick < upper && upper <= tickAtPrice) {\\n            nearestTick = upper;\\n        } else if (nearestTick < lower && lower <= tickAtPrice) {\\n            nearestTick = lower;\\n        }\\n\\n        return (nearestTick, numOfInserted);\\n    }\\n\\n    function remove(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick\\n    ) public returns (int24, uint256 numOfRemoved) {\\n        IConcentratedLiquidityPoolStruct.Tick storage current = ticks[lower];\\n\\n        if (lower != TickMath.MIN_TICK && current.liquidity == amount) {\\n            // Delete lower tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == lower) nearestTick = current.previousTick;\\n\\n            delete ticks[lower];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        current = ticks[upper];\\n\\n        if (upper != TickMath.MAX_TICK && current.liquidity == amount) {\\n            // Delete upper tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == upper) nearestTick = current.previousTick;\\n\\n            delete ticks[upper];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        return (nearestTick, numOfRemoved);\\n    }\\n}\\n\",\"keccak256\":\"0x90396c5753a84ef0fd776a206e927d1e4d504f1867fd38fe40d42c7eb8364c7a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that contains methods that perform common math functions but do not do any overflow or underflow checks.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/UnsafeMath.sol.\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y).\\n    /// @dev Division by 0 has unspecified behavior, and must be checked externally.\\n    /// @param x The dividend.\\n    /// @param y The divisor.\\n    /// @return z The quotient, ceil(x / y).\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea315497f3b3f0dcf40535dd8a130e3615ffaaa18a735eb6ec48f990fac148a0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/misc/SwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../libraries/DyDxMath.sol\\\";\\nimport \\\"../libraries/TickMath.sol\\\";\\nimport \\\"../libraries/FullMath.sol\\\";\\nimport \\\"../libraries/SwapHelperLib.sol\\\";\\n\\ncontract SwapHelper {\\n    address public wETH;\\n\\n    constructor(address _wETH) {\\n        wETH = _wETH;\\n    }\\n\\n    function calculateExactInput(\\n        address[] calldata path,\\n        address tokenIn,\\n        uint256 exactAmountIn\\n    ) external view returns (uint256 amountOut, uint256 price) {\\n        tokenIn = tokenIn == address(0) ? wETH : tokenIn;\\n\\n        amountOut = exactAmountIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            address pool = path[i];\\n\\n            (amountOut, price) = SwapHelperLib.exactInput(pool, tokenIn, amountOut);\\n\\n            tokenIn = IConcentratedLiquidityPool(pool).token0() == tokenIn\\n                ? IConcentratedLiquidityPool(pool).token1()\\n                : IConcentratedLiquidityPool(pool).token0();\\n        }\\n    }\\n\\n    function calculateExactInputSingle(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountIn\\n    ) external view returns (uint256 amountOut, uint256 price) {\\n        return SwapHelperLib.exactInput(pool, tokenIn == address(0) ? wETH : tokenIn, exactAmountIn);\\n    }\\n\\n    function calculateExactOutput(\\n        address[] calldata path,\\n        address tokenIn,\\n        uint256 exactAmountOut\\n    ) external view returns (uint256 amountIn, uint256 price) {\\n        address tokenOut = findTokenOut(path, tokenIn);\\n\\n        uint256 amountOut = exactAmountOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            address pool = path[i - 1];\\n\\n            tokenOut = IConcentratedLiquidityPool(pool).token0() == tokenOut\\n                ? IConcentratedLiquidityPool(pool).token1()\\n                : IConcentratedLiquidityPool(pool).token0();\\n\\n            (amountOut, price) = SwapHelperLib.exactOutput(pool, tokenOut, amountOut);\\n        }\\n        amountIn = amountOut;\\n    }\\n\\n    function findTokenOut(address[] calldata path, address tokenIn) internal view returns (address tokenOut) {\\n        tokenOut = tokenIn == address(0) ? wETH : tokenIn;\\n        IConcentratedLiquidityPool pool;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            pool = IConcentratedLiquidityPool(path[i]);\\n            tokenOut = pool.token0() == tokenOut ? pool.token1() : pool.token0();\\n        }\\n        return tokenOut;\\n    }\\n\\n    function calculateExactOutputSingle(\\n        address pool,\\n        address tokenIn,\\n        uint256 exactAmountOut\\n    ) external view returns (uint256 amountIn, uint256 price) {\\n        return SwapHelperLib.exactOutput(pool, tokenIn == address(0) ? wETH : tokenIn, exactAmountOut);\\n    }\\n}\\n\",\"keccak256\":\"0xc16a116c03747fc99c6024ee4f02203d603a7ee283797cc1a837cdcb3f57babe\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200285d3803806200285d83398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b6127c1806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806375a844a01161005057806375a844a0146100ac578063beba5d3f146100bf578063f2428621146100d257600080fd5b80635213f13b1461006c5780636ecc579414610099575b600080fd5b61007f61007a3660046122c6565b610117565b604080519283526020830191909152015b60405180910390f35b61007f6100a7366004612352565b610375565b61007f6100ba3660046122c6565b6103cb565b61007f6100cd366004612352565b6105ff565b6000546100f29073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610090565b60008073ffffffffffffffffffffffffffffffffffffffff84161561013c5783610156565b60005473ffffffffffffffffffffffffffffffffffffffff165b935082915060005b8581101561036b57600087878381811061017a5761017a612393565b905060200201602081019061018f91906123c2565b905061019c818786610644565b80945081955050508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561020157600080fd5b505afa158015610215573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023991906123df565b73ffffffffffffffffffffffffffffffffffffffff16146102d7578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561029a57600080fd5b505afa1580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d291906123df565b610355565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561031d57600080fd5b505afa158015610331573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035591906123df565b95505080806103639061242b565b91505061015e565b5094509492505050565b6000806103be8573ffffffffffffffffffffffffffffffffffffffff86161561039e57856103b8565b60005473ffffffffffffffffffffffffffffffffffffffff165b85610d39565b915091505b935093915050565b60008060006103db87878761147e565b905083865b80156105f157600089896103f5600185612464565b81811061040457610404612393565b905060200201602081019061041991906123c2565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561047857600080fd5b505afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b091906123df565b73ffffffffffffffffffffffffffffffffffffffff161461054e578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561051157600080fd5b505afa158015610525573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054991906123df565b6105cc565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561059457600080fd5b505afa1580156105a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cc91906123df565b93506105d9818585610d39565b955092508190506105e98161247b565b9150506103e0565b509791965090945050505050565b6000806103be8573ffffffffffffffffffffffffffffffffffffffff8616156106285785610642565b60005473ffffffffffffffffffffffffffffffffffffffff165b855b600080600061065386866116c2565b905060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d591906124b0565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071f57600080fd5b505afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075791906124b0565b905061078e6040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808a73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b1580156107d657600080fd5b505afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e91906124f7565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561087f57600080fd5b505afa158015610893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b7919061254c565b6fffffffffffffffffffffffffffffffff1681526020018a8152602001600081526020018761098a576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8e169063f30dba939060240160c06040518083038186803b15801561094957600080fd5b505afa15801561095d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109819190612567565b6020015161098c565b825b60020b8152509250505061099f81611777565b156109b457516000955093506103c392505050565b604081015115610d2b5760006109cd82608001516117f8565b73ffffffffffffffffffffffffffffffffffffffff1690506000808615610b07576000610a0585602001518587600001516000611b8b565b905080856040015111610acb5760208501518551604087015160609290921b91600091610a4891849190610a39908261261f565b610a43908661265c565b611be5565b9050808611158015610a5a5750865181105b610aa35760408701518751610a8a918491610a7590836126a3565b610a7f919061265c565b808204910615150190565b73ffffffffffffffffffffffffffffffffffffffff1690505b610ab887602001518289600001516000611c40565b908752600060408801529350610b019050565b610ae085602001518587600001516000611c40565b848652604086018051919450600193508291610afd908390612464565b9052505b50610bb9565b6000610b1e85602001518660000151866000611c40565b905080856040015111610b81576000610b4d86604001516c010000000000000000000000008860200151611c85565b8651610b59919061265c565b9050610b7086602001518760000151836000611b8b565b908652600060408701529250610bb7565b610b9685602001518660000151866000611b8b565b848652604086018051919450600193508291610bb3908390612464565b9052505b505b610bc8828762ffffff16611d56565b610bd2908a61265c565b98508015610d2357610be68c85878a611d70565b60020b608086015260208501819052610d2357610c227ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186126de565b60020b846080015160020b1480610c5f5750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b15610ce4578615610c8e578351610c8790610c7c90600190612464565b6401000276a3612267565b8452610cdc565b8351610cd990610c9f90600161265c565b610cbe600173fffd8963efd1fc6a506488495d951d5263988d2661271d565b73ffffffffffffffffffffffffffffffffffffffff1661227e565b84525b505050610d2b565b610cf184608001516117f8565b73ffffffffffffffffffffffffffffffffffffffff168452610d158c85878a611d70565b60020b608086015260208501525b5050506109b4565b519350505050935093915050565b6000806000610d4886866116c2565b905060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca91906124b0565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1457600080fd5b505afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c91906124b0565b9050610e836040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808a73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b158015610ecb57600080fd5b505afa158015610edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0391906124f7565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7457600080fd5b505afa158015610f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fac919061254c565b6fffffffffffffffffffffffffffffffff168152602001600081526020018a81526020018761107f576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8e169063f30dba939060240160c06040518083038186803b15801561103e57600080fd5b505afa158015611052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110769190612567565b60200151611081565b825b60020b8152509250505061109481611777565b156110a957516000955093506103c392505050565b6060810151156113fd5760006110c282608001516117f8565b73ffffffffffffffffffffffffffffffffffffffff16905060008086156111b55760006111086110fd86602001518688600001516000611c40565b8862ffffff16611d56565b90508085606001511161117957600061114561112d87606001518a62ffffff1661228d565b6c010000000000000000000000008860200151611be5565b86516111519190612464565b905061116886602001518288600001516001611b8b565b9086526000606087015292506111af565b61118e85602001518587600001516000611b8b565b84865260608601805191945082916111a7908390612464565b905250600191505b506112df565b60006111cf6110fd86602001518760000151876000611b8b565b9050808560600151116112a7576000606060ff168660200151901b9050600061122082886000015161120a8a606001518d62ffffff1661228d565b8a51611216919061261f565b610a439086612464565b90508087600001511115801561123557508581105b61127f576112668261125089606001518c62ffffff1661228d565b895161125c90866126a3565b610a7f9190612464565b73ffffffffffffffffffffffffffffffffffffffff1690505b61129487602001518860000151836001611c40565b9087526000606088015293506112dd9050565b6112bc85602001518660000151866000611c40565b84865260608601805191945082916112d5908390612464565b905250600191505b505b6112e9828a61265c565b985080156113f5576112fd8c85878a611d70565b60020b6080860152602085018190526113f5576113397ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186126de565b60020b846080015160020b14806113765750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b156113b657861561139a57835161139390610c7c90600190612464565b84526113ae565b83516113ab90610c9f90600161265c565b84525b5050506113fd565b6113c384608001516117f8565b73ffffffffffffffffffffffffffffffffffffffff1684526113e78c85878a611d70565b60020b608086015260208501525b5050506110a9565b8051606082015190955015611472576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e54204f555450555400000000000000000000000000604482015260640160405180910390fd5b50505050935093915050565b600073ffffffffffffffffffffffffffffffffffffffff8216156114a257816114bc565b60005473ffffffffffffffffffffffffffffffffffffffff165b90506000805b848110156116b8578585828181106114dc576114dc612393565b90506020020160208101906114f191906123c2565b91508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561155057600080fd5b505afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158891906123df565b73ffffffffffffffffffffffffffffffffffffffff1614611626578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e957600080fd5b505afa1580156115fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162191906123df565b6116a4565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561166c57600080fd5b505afa158015611680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a491906123df565b9250806116b08161242b565b9150506114c2565b50505b9392505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561172157600080fd5b505afa158015611735573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175991906123df565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b60208101516000901561178c57506000919050565b608082015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761814806117f257506117e57ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186126de565b60020b826080015160020b145b92915050565b60008060008360020b1261180f578260020b61181c565b8260020b61181c90612752565b90506118477ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186126de565b62ffffff16811115611885576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600182166118a6577001000000000000000000000000000000006118b8565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156118ec576ffff97272373d413259a46990580e213a0260801c5b600482161561190b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561192a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611949576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611968576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611987576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156119a6576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156119c6576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156119e6576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611a06576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611a26576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611a46576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611a66576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611a86576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611aa6576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611ac7576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611ae7576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611b06576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611b23576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611b6257807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81611b5e57611b5e612674565b0490505b640100000000810615611b76576001611b79565b60005b60ff16602082901c0192505050919050565b60008115611bba57611bb3611ba7606087901b86860386611be5565b85808204910615150190565b9050611bdd565b83611bcc606087901b82860386611c85565b81611bd957611bd9612674565b0490505b949350505050565b6000611bf2848484611c85565b90508180611c0257611c02612674565b838509156116bb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110611c3657600080fd5b6001019392505050565b60008115611c6257611bb3858585036c01000000000000000000000000611be5565b611c7c858585036c01000000000000000000000000611c85565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611cdd5760008411611cd257600080fd5b5082900490506116bb565b808411611ce957600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000611d668383620f4240611be5565b6116bb9084612464565b6000808215611fec5760028460020b866080015160020b81611d9457611d94612674565b0560020b81611da557611da5612674565b0760020b611e775760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015611e1c57600080fd5b505afa158015611e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e549190612567565b604001516fffffffffffffffffffffffffffffffff168560200151039150611f3d565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015611ee657600080fd5b505afa158015611efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1e9190612567565b604001516fffffffffffffffffffffffffffffffff1685602001510191505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015611fac57600080fd5b505afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe49190612567565b51905061225e565b60028460020b866080015160020b8161200757612007612674565b0560020b8161201857612018612674565b0760020b6120ea5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561208f57600080fd5b505afa1580156120a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c79190612567565b604001516fffffffffffffffffffffffffffffffff1685602001510191506121b0565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561215957600080fd5b505afa15801561216d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121919190612567565b604001516fffffffffffffffffffffffffffffffff1685602001510391505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561221f57600080fd5b505afa158015612233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122579190612567565b6020015190505b94509492505050565b60008183101561227757816116bb565b5090919050565b600081831061227757816116bb565b60006116bb83620f4240610a438582612464565b73ffffffffffffffffffffffffffffffffffffffff811681146122c357600080fd5b50565b600080600080606085870312156122dc57600080fd5b843567ffffffffffffffff808211156122f457600080fd5b818701915087601f83011261230857600080fd5b81358181111561231757600080fd5b8860208260051b850101111561232c57600080fd5b60209283019650945050850135612342816122a1565b9396929550929360400135925050565b60008060006060848603121561236757600080fd5b8335612372816122a1565b92506020840135612382816122a1565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156123d457600080fd5b81356116bb816122a1565b6000602082840312156123f157600080fd5b81516116bb816122a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561245d5761245d6123fc565b5060010190565b600082821015612476576124766123fc565b500390565b60008161248a5761248a6123fc565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000602082840312156124c257600080fd5b815162ffffff811681146116bb57600080fd5b80516124e0816122a1565b919050565b8051600281900b81146124e057600080fd5b6000806040838503121561250a57600080fd5b8251612515816122a1565b9150612523602084016124e5565b90509250929050565b80516fffffffffffffffffffffffffffffffff811681146124e057600080fd5b60006020828403121561255e57600080fd5b6116bb8261252c565b600060c0828403121561257957600080fd5b60405160c0810181811067ffffffffffffffff821117156125c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040526125cf836124e5565b81526125dd602084016124e5565b60208201526125ee6040840161252c565b6040820152606083015160608201526080830151608082015261261360a084016124d5565b60a08201529392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612657576126576123fc565b500290565b6000821982111561266f5761266f6123fc565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826126d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000811415612714576127146123fc565b60000392915050565b600073ffffffffffffffffffffffffffffffffffffffff8381169083168181101561274a5761274a6123fc565b039392505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821415612784576127846123fc565b506000039056fea2646970667358221220502cd937f8622156aae0a202352e9ceb8ce911582f6ea958318dffa7b142676864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806375a844a01161005057806375a844a0146100ac578063beba5d3f146100bf578063f2428621146100d257600080fd5b80635213f13b1461006c5780636ecc579414610099575b600080fd5b61007f61007a3660046122c6565b610117565b604080519283526020830191909152015b60405180910390f35b61007f6100a7366004612352565b610375565b61007f6100ba3660046122c6565b6103cb565b61007f6100cd366004612352565b6105ff565b6000546100f29073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610090565b60008073ffffffffffffffffffffffffffffffffffffffff84161561013c5783610156565b60005473ffffffffffffffffffffffffffffffffffffffff165b935082915060005b8581101561036b57600087878381811061017a5761017a612393565b905060200201602081019061018f91906123c2565b905061019c818786610644565b80945081955050508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561020157600080fd5b505afa158015610215573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023991906123df565b73ffffffffffffffffffffffffffffffffffffffff16146102d7578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561029a57600080fd5b505afa1580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d291906123df565b610355565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561031d57600080fd5b505afa158015610331573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035591906123df565b95505080806103639061242b565b91505061015e565b5094509492505050565b6000806103be8573ffffffffffffffffffffffffffffffffffffffff86161561039e57856103b8565b60005473ffffffffffffffffffffffffffffffffffffffff165b85610d39565b915091505b935093915050565b60008060006103db87878761147e565b905083865b80156105f157600089896103f5600185612464565b81811061040457610404612393565b905060200201602081019061041991906123c2565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561047857600080fd5b505afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b091906123df565b73ffffffffffffffffffffffffffffffffffffffff161461054e578073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561051157600080fd5b505afa158015610525573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054991906123df565b6105cc565b8073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561059457600080fd5b505afa1580156105a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cc91906123df565b93506105d9818585610d39565b955092508190506105e98161247b565b9150506103e0565b509791965090945050505050565b6000806103be8573ffffffffffffffffffffffffffffffffffffffff8616156106285785610642565b60005473ffffffffffffffffffffffffffffffffffffffff165b855b600080600061065386866116c2565b905060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d591906124b0565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071f57600080fd5b505afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075791906124b0565b905061078e6040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808a73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b1580156107d657600080fd5b505afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e91906124f7565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561087f57600080fd5b505afa158015610893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b7919061254c565b6fffffffffffffffffffffffffffffffff1681526020018a8152602001600081526020018761098a576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8e169063f30dba939060240160c06040518083038186803b15801561094957600080fd5b505afa15801561095d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109819190612567565b6020015161098c565b825b60020b8152509250505061099f81611777565b156109b457516000955093506103c392505050565b604081015115610d2b5760006109cd82608001516117f8565b73ffffffffffffffffffffffffffffffffffffffff1690506000808615610b07576000610a0585602001518587600001516000611b8b565b905080856040015111610acb5760208501518551604087015160609290921b91600091610a4891849190610a39908261261f565b610a43908661265c565b611be5565b9050808611158015610a5a5750865181105b610aa35760408701518751610a8a918491610a7590836126a3565b610a7f919061265c565b808204910615150190565b73ffffffffffffffffffffffffffffffffffffffff1690505b610ab887602001518289600001516000611c40565b908752600060408801529350610b019050565b610ae085602001518587600001516000611c40565b848652604086018051919450600193508291610afd908390612464565b9052505b50610bb9565b6000610b1e85602001518660000151866000611c40565b905080856040015111610b81576000610b4d86604001516c010000000000000000000000008860200151611c85565b8651610b59919061265c565b9050610b7086602001518760000151836000611b8b565b908652600060408701529250610bb7565b610b9685602001518660000151866000611b8b565b848652604086018051919450600193508291610bb3908390612464565b9052505b505b610bc8828762ffffff16611d56565b610bd2908a61265c565b98508015610d2357610be68c85878a611d70565b60020b608086015260208501819052610d2357610c227ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186126de565b60020b846080015160020b1480610c5f5750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b15610ce4578615610c8e578351610c8790610c7c90600190612464565b6401000276a3612267565b8452610cdc565b8351610cd990610c9f90600161265c565b610cbe600173fffd8963efd1fc6a506488495d951d5263988d2661271d565b73ffffffffffffffffffffffffffffffffffffffff1661227e565b84525b505050610d2b565b610cf184608001516117f8565b73ffffffffffffffffffffffffffffffffffffffff168452610d158c85878a611d70565b60020b608086015260208501525b5050506109b4565b519350505050935093915050565b6000806000610d4886866116c2565b905060008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca91906124b0565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1457600080fd5b505afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c91906124b0565b9050610e836040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808a73ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b158015610ecb57600080fd5b505afa158015610edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0391906124f7565b915091506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7457600080fd5b505afa158015610f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fac919061254c565b6fffffffffffffffffffffffffffffffff168152602001600081526020018a81526020018761107f576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8e169063f30dba939060240160c06040518083038186803b15801561103e57600080fd5b505afa158015611052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110769190612567565b60200151611081565b825b60020b8152509250505061109481611777565b156110a957516000955093506103c392505050565b6060810151156113fd5760006110c282608001516117f8565b73ffffffffffffffffffffffffffffffffffffffff16905060008086156111b55760006111086110fd86602001518688600001516000611c40565b8862ffffff16611d56565b90508085606001511161117957600061114561112d87606001518a62ffffff1661228d565b6c010000000000000000000000008860200151611be5565b86516111519190612464565b905061116886602001518288600001516001611b8b565b9086526000606087015292506111af565b61118e85602001518587600001516000611b8b565b84865260608601805191945082916111a7908390612464565b905250600191505b506112df565b60006111cf6110fd86602001518760000151876000611b8b565b9050808560600151116112a7576000606060ff168660200151901b9050600061122082886000015161120a8a606001518d62ffffff1661228d565b8a51611216919061261f565b610a439086612464565b90508087600001511115801561123557508581105b61127f576112668261125089606001518c62ffffff1661228d565b895161125c90866126a3565b610a7f9190612464565b73ffffffffffffffffffffffffffffffffffffffff1690505b61129487602001518860000151836001611c40565b9087526000606088015293506112dd9050565b6112bc85602001518660000151866000611c40565b84865260608601805191945082916112d5908390612464565b905250600191505b505b6112e9828a61265c565b985080156113f5576112fd8c85878a611d70565b60020b6080860152602085018190526113f5576113397ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186126de565b60020b846080015160020b14806113765750608084015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b156113b657861561139a57835161139390610c7c90600190612464565b84526113ae565b83516113ab90610c9f90600161265c565b84525b5050506113fd565b6113c384608001516117f8565b73ffffffffffffffffffffffffffffffffffffffff1684526113e78c85878a611d70565b60020b608086015260208501525b5050506110a9565b8051606082015190955015611472576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e54204f555450555400000000000000000000000000604482015260640160405180910390fd5b50505050935093915050565b600073ffffffffffffffffffffffffffffffffffffffff8216156114a257816114bc565b60005473ffffffffffffffffffffffffffffffffffffffff165b90506000805b848110156116b8578585828181106114dc576114dc612393565b90506020020160208101906114f191906123c2565b91508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561155057600080fd5b505afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158891906123df565b73ffffffffffffffffffffffffffffffffffffffff1614611626578173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e957600080fd5b505afa1580156115fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162191906123df565b6116a4565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561166c57600080fd5b505afa158015611680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a491906123df565b9250806116b08161242b565b9150506114c2565b50505b9392505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561172157600080fd5b505afa158015611735573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175991906123df565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b60208101516000901561178c57506000919050565b608082015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761814806117f257506117e57ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186126de565b60020b826080015160020b145b92915050565b60008060008360020b1261180f578260020b61181c565b8260020b61181c90612752565b90506118477ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186126de565b62ffffff16811115611885576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600182166118a6577001000000000000000000000000000000006118b8565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156118ec576ffff97272373d413259a46990580e213a0260801c5b600482161561190b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561192a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611949576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611968576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611987576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156119a6576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156119c6576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156119e6576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611a06576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611a26576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611a46576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611a66576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611a86576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611aa6576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611ac7576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611ae7576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611b06576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611b23576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611b6257807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81611b5e57611b5e612674565b0490505b640100000000810615611b76576001611b79565b60005b60ff16602082901c0192505050919050565b60008115611bba57611bb3611ba7606087901b86860386611be5565b85808204910615150190565b9050611bdd565b83611bcc606087901b82860386611c85565b81611bd957611bd9612674565b0490505b949350505050565b6000611bf2848484611c85565b90508180611c0257611c02612674565b838509156116bb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110611c3657600080fd5b6001019392505050565b60008115611c6257611bb3858585036c01000000000000000000000000611be5565b611c7c858585036c01000000000000000000000000611c85565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611cdd5760008411611cd257600080fd5b5082900490506116bb565b808411611ce957600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000611d668383620f4240611be5565b6116bb9084612464565b6000808215611fec5760028460020b866080015160020b81611d9457611d94612674565b0560020b81611da557611da5612674565b0760020b611e775760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015611e1c57600080fd5b505afa158015611e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e549190612567565b604001516fffffffffffffffffffffffffffffffff168560200151039150611f3d565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015611ee657600080fd5b505afa158015611efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1e9190612567565b604001516fffffffffffffffffffffffffffffffff1685602001510191505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015611fac57600080fd5b505afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe49190612567565b51905061225e565b60028460020b866080015160020b8161200757612007612674565b0560020b8161201857612018612674565b0760020b6120ea5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561208f57600080fd5b505afa1580156120a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c79190612567565b604001516fffffffffffffffffffffffffffffffff1685602001510191506121b0565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561215957600080fd5b505afa15801561216d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121919190612567565b604001516fffffffffffffffffffffffffffffffff1685602001510391505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561221f57600080fd5b505afa158015612233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122579190612567565b6020015190505b94509492505050565b60008183101561227757816116bb565b5090919050565b600081831061227757816116bb565b60006116bb83620f4240610a438582612464565b73ffffffffffffffffffffffffffffffffffffffff811681146122c357600080fd5b50565b600080600080606085870312156122dc57600080fd5b843567ffffffffffffffff808211156122f457600080fd5b818701915087601f83011261230857600080fd5b81358181111561231757600080fd5b8860208260051b850101111561232c57600080fd5b60209283019650945050850135612342816122a1565b9396929550929360400135925050565b60008060006060848603121561236757600080fd5b8335612372816122a1565b92506020840135612382816122a1565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156123d457600080fd5b81356116bb816122a1565b6000602082840312156123f157600080fd5b81516116bb816122a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561245d5761245d6123fc565b5060010190565b600082821015612476576124766123fc565b500390565b60008161248a5761248a6123fc565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000602082840312156124c257600080fd5b815162ffffff811681146116bb57600080fd5b80516124e0816122a1565b919050565b8051600281900b81146124e057600080fd5b6000806040838503121561250a57600080fd5b8251612515816122a1565b9150612523602084016124e5565b90509250929050565b80516fffffffffffffffffffffffffffffffff811681146124e057600080fd5b60006020828403121561255e57600080fd5b6116bb8261252c565b600060c0828403121561257957600080fd5b60405160c0810181811067ffffffffffffffff821117156125c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040526125cf836124e5565b81526125dd602084016124e5565b60208201526125ee6040840161252c565b6040820152606083015160608201526080830151608082015261261360a084016124d5565b60a08201529392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612657576126576123fc565b500290565b6000821982111561266f5761266f6123fc565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826126d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000811415612714576127146123fc565b60000392915050565b600073ffffffffffffffffffffffffffffffffffffffff8381169083168181101561274a5761274a6123fc565b039392505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821415612784576127846123fc565b506000039056fea2646970667358221220502cd937f8622156aae0a202352e9ceb8ce911582f6ea958318dffa7b142676864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10958,
        "contract": "contracts/misc/SwapHelper.sol:SwapHelper",
        "label": "wETH",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}