{
  "address": "0xEA0e2b9B7283D6dD86c093e783292B17B1D42780",
  "abi": [
    {
      "inputs": [],
      "name": "TickOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "targetPrice",
          "type": "uint160"
        }
      ],
      "name": "expectAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x204dba7dab946af969404d1c7b2de1a4b4aa72cf7c89aa0768ab96c85a4b93f1",
  "receipt": {
    "to": null,
    "from": "0x23004B8aD485cEf5C15f8D2868049aB4b2788B0b",
    "contractAddress": "0xEA0e2b9B7283D6dD86c093e783292B17B1D42780",
    "transactionIndex": 1,
    "gasUsed": "1692934",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd1c71c75a670386a7b44d33ebf1df59ab80142e3e855365f8abbd140be13e81e",
    "transactionHash": "0x204dba7dab946af969404d1c7b2de1a4b4aa72cf7c89aa0768ab96c85a4b93f1",
    "logs": [],
    "blockNumber": 99912182,
    "cumulativeGasUsed": "1724054",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ce2f266e969af56bfe859898a5fae8b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"TickOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"targetPrice\",\"type\":\"uint160\"}],\"name\":\"expectAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Calculate the Price Impact Size\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/ZapHelper.sol\":\"ZapHelper\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/interfaces/IConcentratedLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMasterDeployer.sol\\\";\\nimport \\\"../libraries/Ticks.sol\\\";\\n\\n/// @notice concentrated liquidity pool contract Structs.\\ninterface IConcentratedLiquidityPoolStruct {\\n    struct Tick {\\n        /// @dev The highest tick below the current tick, pointer to the previous node in the linked list.\\n        int24 previousTick;\\n        /// @dev the lowest tick above the current tick, pointer to the next node in the linked list.\\n        int24 nextTick;\\n        /// @dev how much liquidity changes when the pool price crosses the tick\\n        uint128 liquidity;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token0\\n        uint256 feeGrowthOutside0;\\n        /// @dev the fee growth on the other side of the tick from the current tick in token1\\n        uint256 feeGrowthOutside1;\\n        /// @dev the seconds spent per liquidity on the other side of the tick from the current tick\\n        uint160 secondsGrowthOutside;\\n    }\\n    struct Position {\\n        /// @dev the amount of liquidity in the position\\n        uint128 liquidity;\\n        /// @dev fee growth of token0 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside0Last;\\n        /// @dev fee growth of token1 inside the tick range as of the last mint/burn/collect\\n        uint256 feeGrowthInside1Last;\\n        /// @dev computed amount of token0 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed0;\\n        /// @dev computed amount of token1 owed to the position as of the last mint/burn/collect\\n        uint128 feeOwed1;\\n    }\\n\\n    struct MintParams {\\n        /// @dev lowerOld previous lower tick\\n        int24 lowerOld;\\n        /// @dev lower The lower end of the tick range for the position\\n        int24 lower;\\n        /// @dev upperOld previous upper tick\\n        int24 upperOld;\\n        /// @dev upper The upper end of the tick range for the position\\n        int24 upper;\\n        /// @dev amount0Desired The amount of token0 to mint the given amount of liquidity\\n        uint128 amount0Desired;\\n        /// @dev amount1Desired The amount of token1 to mint the given amount of liquidity\\n        uint128 amount1Desired;\\n    }\\n\\n    struct SwapCache {\\n        uint256 feeAmount;\\n        uint256 totalFeeAmount;\\n        uint256 protocolFee;\\n        uint256 swapFeeGrowthGlobalA;\\n        uint256 swapFeeGrowthGlobalB;\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        int24 nextTickToCross;\\n    }\\n}\\n\\n/// @notice Concentrated Liquidity Pool interface.\\ninterface IConcentratedLiquidityPool is IConcentratedLiquidityPoolStruct {\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be created every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @dev Reference: tickSpacing of 100 -> 1% between ticks.\\n    function tickSpacing() external view returns (uint24);\\n\\n    /// @dev 1000 corresponds to 0.1% fee. Fee is measured in pips.\\n    function swapFee() external view returns (uint24);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    function token1() external view returns (address);\\n\\n    /// @notice list of the tokens of the pool, sorted by address\\n    function getAssets() external view returns (address[] memory tokens);\\n\\n    /// @notice do not use this. it can be easily corrupted\\n    function totalTicks() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the poo\\n    // @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Sqrt of price aka. \\u221a(token1/token0), multiplied by 2^96.\\n    function price() external view returns (uint160);\\n\\n    /// @notice Tick that is just below the current price.\\n    function nearestTick() external view returns (int24);\\n\\n    /// @notice price and nearestTick\\n    function getPriceAndNearestTicks() external view returns (uint160 price, int24 nearestTick);\\n\\n    /// @notice reserve of token0 and token1\\n    function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up, the log base 1.0001 of price of the pool\\n    function ticks(int24 tick) external view returns (Tick memory);\\n\\n    /// @notice Returns the information about a position\\n    /// @param owner owner of position, position is consisted of 3 elements, (owner / lower / upper)\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function positions(\\n        address owner,\\n        int24 lower,\\n        int24 upper\\n    ) external view returns (Position memory);\\n\\n    /// @notice The fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function feeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token0 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal0() external view returns (uint256);\\n\\n    /// @notice The swap fee growth of token1 collected per unit of liquidity for the entire life of the pool\\n    function swapFeeGrowthGlobal1() external view returns (uint256);\\n\\n    /// @notice fee growth of token0 & token1 inside the given price range\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    function rangeFeeGrowth(int24 lower, int24 upper) external view returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1);\\n\\n    /// @notice the address of factory contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    /// @param data abi.encode(bool zeroForOne, address recipient)\\n    function swap(bytes memory data) external returns (uint256 amountOut);\\n\\n    /// @notice Mints LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param data MintParams(int24 lowerOld, int24 lower, int24 upperOld, int24 upper, uint128 amount0Desired, uint128 amount1Desired)\\n    function mint(MintParams memory data) external returns (uint256 liquidityMinted);\\n\\n    /// @notice Receive token0 or token1 and pay it back with fee\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns LP tokens - should be called via the Concentrated Liquidity pool manager contract.\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount\\n    ) external returns (uint256 token0Amount, uint256 token1Amount);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @param lower The lower tick of the position\\n    /// @param upper The upper tick of the position\\n    /// @param desiredToken0Fees How much token0 want be withdrawn from the fees owed\\n    /// @param desiredToken1Fees How much token1 want be withdrawn from the fees owed\\n    // @dev If desired fees exceeds the possible amount, only the possible amount will be returned.\\n    function collect(\\n        int24 lower,\\n        int24 upper,\\n        uint256 desiredToken0Fees,\\n        uint256 desiredToken1Fees\\n    ) external returns (uint256 token0Fees, uint256 token1Fees);\\n\\n    /// @notice Returns the information about a seconds global growth and the timestamp of the observation\\n    /// @return secondGrowthGlobal the seconds per in range liquidity for the life of the pool as of the observation timestamp\\n    /// @return lastObservation The timestamp of the observation\\n    function getSecondsGrowthAndLastObservation() external view returns (uint160 secondGrowthGlobal, uint32 lastObservation);\\n\\n    function collectProtocolFee() external returns (uint128, uint128);\\n\\n    function getImmutables()\\n        external\\n        view\\n        returns (\\n            uint128 MAX_TICK_LIQUIDITY,\\n            uint24 tickSpacing,\\n            uint24 swapFee,\\n            address factory,\\n            address masterDeployer,\\n            address token0,\\n            address token1\\n        );\\n}\\n\",\"keccak256\":\"0xa2f3c1062b72ff1ebbbdf9afbbd08ec9644bb19e82951385c162ff82e5c87d8a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool deployer interface.\\ninterface IMasterDeployer {\\n    // ============ EVENTS ================\\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\\n    event AddToWhitelistFactory(address indexed factory);\\n    event RemoveFromWhitelistFactory(address indexed factory);\\n    event ProtocolFeeToUpdated(address protocolFeeTo);\\n\\n    /// @notice create pool through factory\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n\\n    /// @notice Return the address receiving protocol fees from Pool\\n    function protocolFeeTo() external view returns (address);\\n\\n    /// @notice Return whether the pool was deployed via a deployer\\n    function pools(address pool) external view returns (bool);\\n\\n    /// @notice LP Airdrop Distributor address\\n    function airdropDistributor() external returns (address);\\n\\n    /// @notice Return the number of pools deployed from masterDeployer\\n    function totalPoolsCount() external view returns (uint256 total);\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool);\\n\\n    /// @notice Return the address of Factory deployed pool\\n    function getFactoryAddress(address pool) external view returns (address factory);\\n}\\n\",\"keccak256\":\"0x78e000c156708cab98e97c281e357b4e5e000174f1b914ea5acdcd11181e4203\",\"license\":\"GPL-3.0\"},\"contracts/libraries/DyDxMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n/// @notice Math library that facilitates ranged liquidity calculations.\\nlibrary DyDxMath {\\n    function getDy(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dy) {\\n        unchecked {\\n            if (roundUp) {\\n                dy = FullMath.mulDivRoundingUp(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            } else {\\n                dy = FullMath.mulDiv(liquidity, priceUpper - priceLower, FixedPoint.Q96);\\n            }\\n        }\\n    }\\n\\n    function getDx(\\n        uint256 liquidity,\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        bool roundUp\\n    ) internal pure returns (uint256 dx) {\\n        unchecked {\\n            if (roundUp) {\\n                dx = UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper),\\n                    priceLower\\n                );\\n            } else {\\n                dx = FullMath.mulDiv(liquidity << FixedPoint.Q96RES, priceUpper - priceLower, priceUpper) / priceLower;\\n            }\\n        }\\n    }\\n\\n    function getLiquidityForAmounts(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 dy,\\n        uint256 dx\\n    ) internal pure returns (uint256 liquidity) {\\n        unchecked {\\n            if (priceUpper <= currentPrice) {\\n                liquidity = FullMath.mulDiv(dy, FixedPoint.Q96, priceUpper - priceLower);\\n            } else if (currentPrice <= priceLower) {\\n                liquidity = FullMath.mulDiv(dx, FullMath.mulDiv(priceLower, priceUpper, FixedPoint.Q96), priceUpper - priceLower);\\n            } else {\\n                uint256 liquidity0 = FullMath.mulDiv(\\n                    dx,\\n                    FullMath.mulDiv(priceUpper, currentPrice, FixedPoint.Q96),\\n                    priceUpper - currentPrice\\n                );\\n                uint256 liquidity1 = FullMath.mulDiv(dy, FixedPoint.Q96, currentPrice - priceLower);\\n                liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n            }\\n        }\\n    }\\n\\n    function getAmountsForLiquidity(\\n        uint256 priceLower,\\n        uint256 priceUpper,\\n        uint256 currentPrice,\\n        uint256 liquidityAmount,\\n        bool roundUp\\n    ) internal pure returns (uint128 token0amount, uint128 token1amount) {\\n        if (priceUpper <= currentPrice) {\\n            // Only supply `token1` (`token1` is Y).\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else if (currentPrice <= priceLower) {\\n            // Only supply `token0` (`token0` is X).\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, priceLower, priceUpper, roundUp));\\n        } else {\\n            // Supply both tokens.\\n            token0amount = SafeCast.toUint128(DyDxMath.getDx(liquidityAmount, currentPrice, priceUpper, roundUp));\\n            token1amount = SafeCast.toUint128(DyDxMath.getDy(liquidityAmount, priceLower, currentPrice, roundUp));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd7e93680c237fbda55c989b3bbf3dcd14c4df5d40a0a9a997325d8a539f80cc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary FixedPoint {\\n    uint8 internal constant Q128RES = 128;\\n    uint8 internal constant Q96RES = 96;\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x591a424ebe1e10342bf873b49a85989bcbca4b575846ed3d3f3a194f122fdbbd\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\\n/// @dev Handles \\\"phantom overflow\\\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b.\\n            // Compute the product mod 2**256 and mod 2**256 - 1,\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product.\\n            uint256 prod1; // Most significant 256 bits of the product.\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n            // Make sure the result is less than 2**256 -\\n            // also prevents denominator == 0.\\n            require(denominator > prod1);\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n            // Make division exact by subtracting the remainder from [prod1 prod0] -\\n            // compute remainder using mulmod.\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number.\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n            // Factor powers of two out of denominator -\\n            // compute largest power of two divisor of denominator\\n            // (always >= 1).\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two.\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n            // Divide [prod1 prod0] by the factors of two.\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos -\\n            // if twos is zero, then it becomes one.\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256 -\\n            // now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // for four bits. That is, denominator * inv = 1 mod 2**4.\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**8.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**16.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**32.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**64.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**128.\\n            inv *= 2 - denominator * inv; // Inverse mod 2**256.\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\\n    /// @param a The multiplicand.\\n    /// @param b The multiplier.\\n    /// @param denominator The divisor.\\n    /// @return result The 256-bit result.\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        unchecked {\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8211b004be6ff6be30b81fe484544d00c7bb467a4fd2a0d6c60114353e2300cf\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nlibrary SafeCast {\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\\n        require((z = uint128(y)) == y);\\n    }\\n\\n    function toInt128(uint256 y) internal pure returns (int128 z) {\\n        require(y <= 2**127 - 1);\\n        return int128(int256(y));\\n    }\\n}\\n\",\"keccak256\":\"0x26f130f9e37749f36d7c61bb818227d0ef4e089695be0009e9b626e63c7753c3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library for computing sqrt price for ticks of size 1.0001, i.e., sqrt(1.0001^tick) as fixed point Q64.96 numbers - supports\\n/// prices between 2**-128 and 2**128 - 1.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/TickMath.sol.\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128.\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128 - 1.\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MIN_TICK).\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick - equivalent to getSqrtRatioAtTick(MAX_TICK).\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    error TickOutOfBounds();\\n    error PriceOutOfBounds();\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96.\\n    /// @dev Throws if |tick| > max tick.\\n    /// @param tick The input tick for the above formula.\\n    /// @return sqrtPriceX96 Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick.\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        if (absTick > uint256(uint24(MAX_TICK))) revert TickOutOfBounds();\\n        unchecked {\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n            // This divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // We then downcast because we know the result always fits within 160 bits due to our tick input constraint.\\n            // We round up in the division so getTickAtSqrtRatio of the output price is always consistent.\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    function validatePrice(uint160 price) internal pure {\\n        if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio.\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96.\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio.\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // Second inequality must be < because the price can never reach the price at the max tick.\\n        if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert PriceOutOfBounds();\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n        unchecked {\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number.\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d20064b2a93ccddca358064e4843ebbe8c76fb75c85ce9c95d4050ee10d4ce5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Ticks.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\n\\n/// @notice Tick management library for ranged liquidity.\\nlibrary Ticks {\\n    function getMaxLiquidity(uint24 _tickSpacing) internal pure returns (uint128) {\\n        return type(uint128).max / uint128(uint24(TickMath.MAX_TICK) / (2 * uint24(_tickSpacing)));\\n    }\\n\\n    function cross(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 nextTickToCross,\\n        uint160 secondsGrowthGlobal,\\n        uint256 currentLiquidity,\\n        uint256 feeGrowthGlobalA,\\n        uint256 feeGrowthGlobalB,\\n        bool zeroForOne,\\n        uint24 tickSpacing\\n    ) internal returns (uint256, int24) {\\n        ticks[nextTickToCross].secondsGrowthOutside = secondsGrowthGlobal - ticks[nextTickToCross].secondsGrowthOutside;\\n\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside0;\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside1;\\n            nextTickToCross = ticks[nextTickToCross].previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n            unchecked {\\n                if ((nextTickToCross / int24(tickSpacing)) % 2 == 0) {\\n                    currentLiquidity += ticks[nextTickToCross].liquidity;\\n                } else {\\n                    currentLiquidity -= ticks[nextTickToCross].liquidity;\\n                }\\n            }\\n            ticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobalB - ticks[nextTickToCross].feeGrowthOutside1;\\n            ticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobalA - ticks[nextTickToCross].feeGrowthOutside0;\\n            nextTickToCross = ticks[nextTickToCross].nextTick;\\n        }\\n        return (currentLiquidity, nextTickToCross);\\n    }\\n\\n    function insert(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        uint256 feeGrowthGlobal0,\\n        uint256 feeGrowthGlobal1,\\n        uint160 secondsGrowthGlobal,\\n        int24 lowerOld,\\n        int24 lower,\\n        int24 upperOld,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick,\\n        uint160 currentPrice\\n    ) public returns (int24, uint256 numOfInserted) {\\n        require(lower < upper, \\\"WRONG_ORDER\\\");\\n        require(TickMath.MIN_TICK <= lower, \\\"LOWER_RANGE\\\");\\n        require(upper <= TickMath.MAX_TICK, \\\"UPPER_RANGE\\\");\\n\\n        {\\n            // Stack overflow.\\n            uint128 currentLowerLiquidity = ticks[lower].liquidity;\\n            if (currentLowerLiquidity != 0 || lower == TickMath.MIN_TICK) {\\n                // We are adding liquidity to an existing tick.\\n                ticks[lower].liquidity = currentLowerLiquidity + amount;\\n            } else {\\n                // We are inserting a new tick.\\n                int24 oldNextTick;\\n                {\\n                    IConcentratedLiquidityPoolStruct.Tick storage old = ticks[lowerOld];\\n                    oldNextTick = old.nextTick;\\n                    old.nextTick = lower;\\n                    require(\\n                        (old.liquidity != 0 || lowerOld == TickMath.MIN_TICK) && lowerOld < lower && lower < oldNextTick,\\n                        \\\"LOWER_ORDER\\\"\\n                    );\\n                }\\n\\n                if (lower <= TickMath.getTickAtSqrtRatio(currentPrice)) {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(\\n                        lowerOld,\\n                        oldNextTick,\\n                        amount,\\n                        feeGrowthGlobal0,\\n                        feeGrowthGlobal1,\\n                        secondsGrowthGlobal\\n                    );\\n                } else {\\n                    ticks[lower] = IConcentratedLiquidityPoolStruct.Tick(lowerOld, oldNextTick, amount, 0, 0, 0);\\n                }\\n\\n                ticks[oldNextTick].previousTick = lower;\\n                numOfInserted += 1;\\n            }\\n        }\\n\\n        uint128 currentUpperLiquidity = ticks[upper].liquidity;\\n        if (currentUpperLiquidity != 0 || upper == TickMath.MAX_TICK) {\\n            // We are adding liquidity to an existing tick.\\n            ticks[upper].liquidity = currentUpperLiquidity + amount;\\n        } else {\\n            // Inserting a new tick.\\n            int24 oldNextTick;\\n            {\\n                IConcentratedLiquidityPoolStruct.Tick storage old = ticks[upperOld];\\n                oldNextTick = old.nextTick;\\n                old.nextTick = upper;\\n                require(old.liquidity != 0 && oldNextTick > upper && upperOld < upper, \\\"UPPER_ORDER\\\");\\n            }\\n\\n            if (upper <= TickMath.getTickAtSqrtRatio(currentPrice)) {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(\\n                    upperOld,\\n                    oldNextTick,\\n                    amount,\\n                    feeGrowthGlobal0,\\n                    feeGrowthGlobal1,\\n                    secondsGrowthGlobal\\n                );\\n            } else {\\n                ticks[upper] = IConcentratedLiquidityPoolStruct.Tick(upperOld, oldNextTick, amount, 0, 0, 0);\\n            }\\n\\n            ticks[oldNextTick].previousTick = upper;\\n            numOfInserted += 1;\\n        }\\n\\n        int24 tickAtPrice = TickMath.getTickAtSqrtRatio(currentPrice);\\n\\n        if (nearestTick < upper && upper <= tickAtPrice) {\\n            nearestTick = upper;\\n        } else if (nearestTick < lower && lower <= tickAtPrice) {\\n            nearestTick = lower;\\n        }\\n\\n        return (nearestTick, numOfInserted);\\n    }\\n\\n    function remove(\\n        mapping(int24 => IConcentratedLiquidityPoolStruct.Tick) storage ticks,\\n        int24 lower,\\n        int24 upper,\\n        uint128 amount,\\n        int24 nearestTick\\n    ) public returns (int24, uint256 numOfRemoved) {\\n        IConcentratedLiquidityPoolStruct.Tick storage current = ticks[lower];\\n\\n        if (lower != TickMath.MIN_TICK && current.liquidity == amount) {\\n            // Delete lower tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == lower) nearestTick = current.previousTick;\\n\\n            delete ticks[lower];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        current = ticks[upper];\\n\\n        if (upper != TickMath.MAX_TICK && current.liquidity == amount) {\\n            // Delete upper tick.\\n            IConcentratedLiquidityPoolStruct.Tick storage previous = ticks[current.previousTick];\\n            IConcentratedLiquidityPoolStruct.Tick storage next = ticks[current.nextTick];\\n\\n            previous.nextTick = current.nextTick;\\n            next.previousTick = current.previousTick;\\n\\n            if (nearestTick == upper) nearestTick = current.previousTick;\\n\\n            delete ticks[upper];\\n            numOfRemoved += 1;\\n        } else {\\n            unchecked {\\n                current.liquidity -= amount;\\n            }\\n        }\\n\\n        return (nearestTick, numOfRemoved);\\n    }\\n}\\n\",\"keccak256\":\"0x0669f4e0e9ae2e042e976f5fd5274fb6c9b2f12da55e4dc4bdcd762e4d45a9d5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Math library that contains methods that perform common math functions but do not do any overflow or underflow checks.\\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/UnsafeMath.sol.\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y).\\n    /// @dev Division by 0 has unspecified behavior, and must be checked externally.\\n    /// @param x The dividend.\\n    /// @param y The divisor.\\n    /// @return z The quotient, ceil(x / y).\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea315497f3b3f0dcf40535dd8a130e3615ffaaa18a735eb6ec48f990fac148a0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/misc/ZapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IConcentratedLiquidityPool.sol\\\";\\nimport \\\"../libraries/TickMath.sol\\\";\\nimport \\\"../libraries/FullMath.sol\\\";\\nimport \\\"../libraries/DyDxMath.sol\\\";\\n\\n/// @notice Calculate the Price Impact Size\\ncontract ZapHelper {\\n    struct ZapCache {\\n        uint256 currentPrice;\\n        uint256 currentLiquidity;\\n        uint256 input;\\n        uint256 output;\\n        int24 nextTickToCross;\\n    }\\n\\n    // @notice Calculate the amount of token\\n    // case1) pool.price() > targetPrice (price is decreasing)\\n    //        > trading from token0 to token1\\n    //\\n    //        zeroForOne = true,\\n    //        amount0 = input  token0 amount for trading from pool.price() to target price\\n    //        amount1 = output token1 amount for trading from pool.price() to target price\\n    //\\n    // case2) pool.price() < targetPrice (price is increasing)\\n    //        > trading from token1 to token0\\n    //\\n    //        zeroForOne = false\\n    //        amount0 = output token0 amount for trading from pool.price() to target price\\n    //        amount1 = input  token1 amount for trading from pool.price() to target price\\n    function expectAmount(address pool, uint160 targetPrice)\\n    external\\n    view\\n    returns (\\n        bool zeroForOne,\\n        uint256 amount0,\\n        uint256 amount1\\n    )\\n    {\\n        ZapCache memory cache;\\n        {\\n            (uint160 poolPrice, int24 nearestTick) = IConcentratedLiquidityPool(pool).getPriceAndNearestTicks();\\n            zeroForOne = poolPrice > targetPrice;\\n            cache = ZapCache(\\n                poolPrice,\\n                IConcentratedLiquidityPool(pool).liquidity(),\\n                0,\\n                0,\\n                zeroForOne ? nearestTick : IConcentratedLiquidityPool(pool).ticks(nearestTick).nextTick\\n            );\\n        }\\n\\n        if (zeroLiquidity(cache)) return (zeroForOne, 0, 0);\\n\\n        uint24 swapFee = IConcentratedLiquidityPool(pool).swapFee();\\n        int24 iTickSpacing = int24(IConcentratedLiquidityPool(pool).tickSpacing());\\n\\n        amount0 = 0;\\n        amount1 = 0;\\n        while (true) {\\n            uint256 nextTickPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n            bool cross = false;\\n            if (zeroForOne) {\\n                // Trading token 0 (x) for token 1 (y).\\n                // Price is decreasing.\\n                uint256 newPrice = nextTickPrice <= targetPrice ? targetPrice : nextTickPrice;\\n\\n                amount0 += DyDxMath.getDx(cache.currentLiquidity, newPrice, cache.currentPrice, true);\\n                amount1 += amountWithOutFee(DyDxMath.getDy(cache.currentLiquidity, newPrice, cache.currentPrice, false), swapFee);\\n\\n                if (nextTickPrice > targetPrice) cross = true;\\n            } else {\\n                // Trading token 1 (y) for token 1 (x).\\n                // Price is increasing.\\n                uint256 newPrice = nextTickPrice >= targetPrice ? targetPrice : nextTickPrice;\\n\\n                amount1 += DyDxMath.getDy(cache.currentLiquidity, cache.currentPrice, newPrice, false);\\n                amount0 += amountWithOutFee(DyDxMath.getDx(cache.currentLiquidity, cache.currentPrice, newPrice, false), swapFee);\\n\\n                if (nextTickPrice < targetPrice) cross = true;\\n            }\\n\\n            if (cross) {\\n                (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n\\n                if (cache.currentLiquidity == 0) {\\n                    if (cache.nextTickToCross == TickMath.MAX_TICK || cache.nextTickToCross == TickMath.MIN_TICK) {\\n                        // In the case of the last tick, there is no next tick.\\n                        // price must be crossed because of rangeFeeGrowth\\n                        if (zeroForOne) {\\n                            cache.currentPrice = Math.max(cache.currentPrice - 1, TickMath.MIN_SQRT_RATIO);\\n                        } else {\\n                            cache.currentPrice = Math.min(cache.currentPrice + 1, TickMath.MAX_SQRT_RATIO - 1);\\n                        }\\n                        break;\\n                    }\\n                    cache.currentPrice = uint256(TickMath.getSqrtRatioAtTick(cache.nextTickToCross));\\n                    (cache.currentLiquidity, cache.nextTickToCross) = crossTick(pool, cache, iTickSpacing, zeroForOne);\\n                }\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function crossTick(\\n        address pool,\\n        ZapCache memory cache,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) private view returns (uint256 currentLiquidity, int24 nextTickToCross) {\\n        if (zeroForOne) {\\n            // Moving backwards through the linked list.\\n            // Liquidity cannot overflow due to the MAX_TICK_LIQUIDITY requirement.\\n        unchecked {\\n            if ((cache.nextTickToCross / tickSpacing) % 2 == 0) {\\n                currentLiquidity = cache.currentLiquidity - IConcentratedLiquidityPool(pool).ticks(cache.nextTickToCross).liquidity;\\n            } else {\\n                currentLiquidity = cache.currentLiquidity + IConcentratedLiquidityPool(pool).ticks(cache.nextTickToCross).liquidity;\\n            }\\n        }\\n            nextTickToCross = IConcentratedLiquidityPool(pool).ticks(cache.nextTickToCross).previousTick;\\n        } else {\\n            // Moving forwards through the linked list.\\n        unchecked {\\n            if ((cache.nextTickToCross / tickSpacing) % 2 == 0) {\\n                currentLiquidity = cache.currentLiquidity + IConcentratedLiquidityPool(pool).ticks(cache.nextTickToCross).liquidity;\\n            } else {\\n                currentLiquidity = cache.currentLiquidity - IConcentratedLiquidityPool(pool).ticks(cache.nextTickToCross).liquidity;\\n            }\\n        }\\n            nextTickToCross = IConcentratedLiquidityPool(pool).ticks(cache.nextTickToCross).nextTick;\\n        }\\n    }\\n\\n    function zeroLiquidity(ZapCache memory cache) internal pure returns (bool) {\\n        if (cache.currentLiquidity > 0) {\\n            return false;\\n        }\\n        return cache.nextTickToCross == TickMath.MIN_TICK || cache.nextTickToCross == TickMath.MAX_TICK;\\n    }\\n\\n    function amountWithOutFee(uint256 amount, uint256 swapFee) private pure returns (uint256) {\\n        return amount - FullMath.mulDivRoundingUp(amount, swapFee, 1e6);\\n    }\\n}\\n\",\"keccak256\":\"0x3b6e3b69af2fa474183cb9ec95d4377a8fcf6d1468ac23c7815929ca693ab1dd\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061154c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b585299714610030575b600080fd5b61004361003e366004611234565b610064565b60408051931515845260208401929092529082015260600160405180910390f35b600080600061009e6040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808773ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b1580156100e657600080fd5b505afa1580156100fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011e919061128f565b915091508673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161195506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156101c057600080fd5b505afa1580156101d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f891906112e4565b6fffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001876102cc576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8b169063f30dba939060240160c06040518083038186803b15801561028b57600080fd5b505afa15801561029f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c391906112ff565b602001516102ce565b825b60020b815250925050506102e1816106f2565b156102f35750600091508190506106eb565b60008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561033b57600080fd5b505afa15801561034f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037391906113b7565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103bd57600080fd5b505afa1580156103d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f591906113b7565b905060009450600093505b600061040f8460800151610773565b73ffffffffffffffffffffffffffffffffffffffff169050600087156104e85760008973ffffffffffffffffffffffffffffffffffffffff16831115610455578261046d565b8973ffffffffffffffffffffffffffffffffffffffff165b905061048486602001518288600001516001610b06565b61048e908961140b565b97506104b36104a887602001518389600001516000610b60565b8662ffffff16610ba5565b6104bd908861140b565b96508973ffffffffffffffffffffffffffffffffffffffff168311156104e257600191505b50610592565b60008973ffffffffffffffffffffffffffffffffffffffff1683101561050e5782610526565b8973ffffffffffffffffffffffffffffffffffffffff165b905061053d86602001518760000151836000610b60565b610547908861140b565b96506105616104a887602001518860000151846000610b06565b61056b908961140b565b97508973ffffffffffffffffffffffffffffffffffffffff1683101561059057600191505b505b801561069a576105a48a86858b610bc6565b60020b6080870152602086018190526106e0576105e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618611423565b60020b856080015160020b148061061d5750608085015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b156106a157871561064c5784516106459061063a90600190611462565b6401000276a36110bd565b855261069a565b84516106979061065d90600161140b565b61067c600173fffd8963efd1fc6a506488495d951d5263988d26611479565b73ffffffffffffffffffffffffffffffffffffffff166110d4565b85525b50506106e7565b6106ae8560800151610773565b73ffffffffffffffffffffffffffffffffffffffff1685526106d28a86858b610bc6565b60020b608087015260208601525b5050610400565b5050505b9250925092565b60208101516000901561070757506000919050565b608082015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618148061076d57506107607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618611423565b60020b826080015160020b145b92915050565b60008060008360020b1261078a578260020b610797565b8260020b610797906114ae565b90506107c27ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618611423565b62ffffff16811115610800576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001821661082157700100000000000000000000000000000000610833565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610867576ffff97272373d413259a46990580e213a0260801c5b6004821615610886576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156108a5576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156108c4576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156108e3576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610902576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610921576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610941576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610961576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610981576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156109a1576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156109c1576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156109e1576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610a01576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610a21576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610a42576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610a62576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610a81576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610a9e576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610add57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81610ad957610ad96114e7565b0490505b640100000000810615610af1576001610af4565b60005b60ff16602082901c0192505050919050565b60008115610b3557610b2e610b22606087901b868603866110e3565b85808204910615150190565b9050610b58565b83610b47606087901b8286038661113e565b81610b5457610b546114e7565b0490505b949350505050565b60008115610b8257610b2e858585036c010000000000000000000000006110e3565b610b9c858585036c0100000000000000000000000061113e565b95945050505050565b6000610bb58383620f42406110e3565b610bbf9084611462565b9392505050565b6000808215610e425760028460020b866080015160020b81610bea57610bea6114e7565b0560020b81610bfb57610bfb6114e7565b0760020b610ccd5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015610c7257600080fd5b505afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa91906112ff565b604001516fffffffffffffffffffffffffffffffff168560200151039150610d93565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015610d3c57600080fd5b505afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7491906112ff565b604001516fffffffffffffffffffffffffffffffff1685602001510191505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015610e0257600080fd5b505afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a91906112ff565b5190506110b4565b60028460020b866080015160020b81610e5d57610e5d6114e7565b0560020b81610e6e57610e6e6114e7565b0760020b610f405760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015610ee557600080fd5b505afa158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1d91906112ff565b604001516fffffffffffffffffffffffffffffffff168560200151019150611006565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015610faf57600080fd5b505afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe791906112ff565b604001516fffffffffffffffffffffffffffffffff1685602001510391505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561107557600080fd5b505afa158015611089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ad91906112ff565b6020015190505b94509492505050565b6000818310156110cd5781610bbf565b5090919050565b60008183106110cd5781610bbf565b60006110f084848461113e565b90508180611100576111006114e7565b83850915610bbf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811061113457600080fd5b6001019392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611196576000841161118b57600080fd5b508290049050610bbf565b8084116111a257600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461123157600080fd5b50565b6000806040838503121561124757600080fd5b82356112528161120f565b915060208301356112628161120f565b809150509250929050565b80516112788161120f565b919050565b8051600281900b811461127857600080fd5b600080604083850312156112a257600080fd5b82516112ad8161120f565b91506112bb6020840161127d565b90509250929050565b80516fffffffffffffffffffffffffffffffff8116811461127857600080fd5b6000602082840312156112f657600080fd5b610bbf826112c4565b600060c0828403121561131157600080fd5b60405160c0810181811067ffffffffffffffff8211171561135b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040526113678361127d565b81526113756020840161127d565b6020820152611386604084016112c4565b604082015260608301516060820152608083015160808201526113ab60a0840161126d565b60a08201529392505050565b6000602082840312156113c957600080fd5b815162ffffff81168114610bbf57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561141e5761141e6113dc565b500190565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000811415611459576114596113dc565b60000392915050565b600082821015611474576114746113dc565b500390565b600073ffffffffffffffffffffffffffffffffffffffff838116908316818110156114a6576114a66113dc565b039392505050565b60007f80000000000000000000000000000000000000000000000000000000000000008214156114e0576114e06113dc565b5060000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220bb987996c51aeab721fcc9a6d28392f21f57835bda57e4d8231c87232526308864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b585299714610030575b600080fd5b61004361003e366004611234565b610064565b60408051931515845260208401929092529082015260600160405180910390f35b600080600061009e6040518060a0016040528060008152602001600081526020016000815260200160008152602001600060020b81525090565b6000808773ffffffffffffffffffffffffffffffffffffffff16638c347f9b6040518163ffffffff1660e01b8152600401604080518083038186803b1580156100e657600080fd5b505afa1580156100fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011e919061128f565b915091508673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161195506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156101c057600080fd5b505afa1580156101d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f891906112e4565b6fffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001876102cc576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015273ffffffffffffffffffffffffffffffffffffffff8b169063f30dba939060240160c06040518083038186803b15801561028b57600080fd5b505afa15801561029f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c391906112ff565b602001516102ce565b825b60020b815250925050506102e1816106f2565b156102f35750600091508190506106eb565b60008673ffffffffffffffffffffffffffffffffffffffff166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561033b57600080fd5b505afa15801561034f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037391906113b7565b905060008773ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103bd57600080fd5b505afa1580156103d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f591906113b7565b905060009450600093505b600061040f8460800151610773565b73ffffffffffffffffffffffffffffffffffffffff169050600087156104e85760008973ffffffffffffffffffffffffffffffffffffffff16831115610455578261046d565b8973ffffffffffffffffffffffffffffffffffffffff165b905061048486602001518288600001516001610b06565b61048e908961140b565b97506104b36104a887602001518389600001516000610b60565b8662ffffff16610ba5565b6104bd908861140b565b96508973ffffffffffffffffffffffffffffffffffffffff168311156104e257600191505b50610592565b60008973ffffffffffffffffffffffffffffffffffffffff1683101561050e5782610526565b8973ffffffffffffffffffffffffffffffffffffffff165b905061053d86602001518760000151836000610b60565b610547908861140b565b96506105616104a887602001518860000151846000610b06565b61056b908961140b565b97508973ffffffffffffffffffffffffffffffffffffffff1683101561059057600191505b505b801561069a576105a48a86858b610bc6565b60020b6080870152602086018190526106e0576105e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618611423565b60020b856080015160020b148061061d5750608085015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618145b156106a157871561064c5784516106459061063a90600190611462565b6401000276a36110bd565b855261069a565b84516106979061065d90600161140b565b61067c600173fffd8963efd1fc6a506488495d951d5263988d26611479565b73ffffffffffffffffffffffffffffffffffffffff166110d4565b85525b50506106e7565b6106ae8560800151610773565b73ffffffffffffffffffffffffffffffffffffffff1685526106d28a86858b610bc6565b60020b608087015260208601525b5050610400565b5050505b9250925092565b60208101516000901561070757506000919050565b608082015160020b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618148061076d57506107607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618611423565b60020b826080015160020b145b92915050565b60008060008360020b1261078a578260020b610797565b8260020b610797906114ae565b90506107c27ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618611423565b62ffffff16811115610800576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001821661082157700100000000000000000000000000000000610833565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610867576ffff97272373d413259a46990580e213a0260801c5b6004821615610886576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156108a5576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156108c4576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156108e3576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610902576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610921576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610941576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610961576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610981576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156109a1576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156109c1576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156109e1576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610a01576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610a21576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610a42576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610a62576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610a81576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610a9e576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610add57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81610ad957610ad96114e7565b0490505b640100000000810615610af1576001610af4565b60005b60ff16602082901c0192505050919050565b60008115610b3557610b2e610b22606087901b868603866110e3565b85808204910615150190565b9050610b58565b83610b47606087901b8286038661113e565b81610b5457610b546114e7565b0490505b949350505050565b60008115610b8257610b2e858585036c010000000000000000000000006110e3565b610b9c858585036c0100000000000000000000000061113e565b95945050505050565b6000610bb58383620f42406110e3565b610bbf9084611462565b9392505050565b6000808215610e425760028460020b866080015160020b81610bea57610bea6114e7565b0560020b81610bfb57610bfb6114e7565b0760020b610ccd5760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015610c7257600080fd5b505afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa91906112ff565b604001516fffffffffffffffffffffffffffffffff168560200151039150610d93565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015610d3c57600080fd5b505afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7491906112ff565b604001516fffffffffffffffffffffffffffffffff1685602001510191505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015610e0257600080fd5b505afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a91906112ff565b5190506110b4565b60028460020b866080015160020b81610e5d57610e5d6114e7565b0560020b81610e6e57610e6e6114e7565b0760020b610f405760808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015610ee557600080fd5b505afa158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1d91906112ff565b604001516fffffffffffffffffffffffffffffffff168560200151019150611006565b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b158015610faf57600080fd5b505afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe791906112ff565b604001516fffffffffffffffffffffffffffffffff1685602001510391505b60808501516040517ff30dba9300000000000000000000000000000000000000000000000000000000815260029190910b600482015273ffffffffffffffffffffffffffffffffffffffff87169063f30dba939060240160c06040518083038186803b15801561107557600080fd5b505afa158015611089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ad91906112ff565b6020015190505b94509492505050565b6000818310156110cd5781610bbf565b5090919050565b60008183106110cd5781610bbf565b60006110f084848461113e565b90508180611100576111006114e7565b83850915610bbf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811061113457600080fd5b6001019392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611196576000841161118b57600080fd5b508290049050610bbf565b8084116111a257600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461123157600080fd5b50565b6000806040838503121561124757600080fd5b82356112528161120f565b915060208301356112628161120f565b809150509250929050565b80516112788161120f565b919050565b8051600281900b811461127857600080fd5b600080604083850312156112a257600080fd5b82516112ad8161120f565b91506112bb6020840161127d565b90509250929050565b80516fffffffffffffffffffffffffffffffff8116811461127857600080fd5b6000602082840312156112f657600080fd5b610bbf826112c4565b600060c0828403121561131157600080fd5b60405160c0810181811067ffffffffffffffff8211171561135b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040526113678361127d565b81526113756020840161127d565b6020820152611386604084016112c4565b604082015260608301516060820152608083015160808201526113ab60a0840161126d565b60a08201529392505050565b6000602082840312156113c957600080fd5b815162ffffff81168114610bbf57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561141e5761141e6113dc565b500190565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000811415611459576114596113dc565b60000392915050565b600082821015611474576114746113dc565b500390565b600073ffffffffffffffffffffffffffffffffffffffff838116908316818110156114a6576114a66113dc565b039392505050565b60007f80000000000000000000000000000000000000000000000000000000000000008214156114e0576114e06113dc565b5060000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220bb987996c51aeab721fcc9a6d28392f21f57835bda57e4d8231c87232526308864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Calculate the Price Impact Size",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}