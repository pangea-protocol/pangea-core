{
  "address": "0xb49FE712c5B805F8d17eBD432dEd07944967586b",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowedFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "AddToWhitelistFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "deployData",
          "type": "bytes"
        }
      ],
      "name": "DeployPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocolFeeTo",
          "type": "address"
        }
      ],
      "name": "ProtocolFeeToUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "RemoveFromWhitelistFactory",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "addToWhitelistFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_deployData",
          "type": "bytes"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeTo",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "removeFromWhitelistFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_airdropDistributor",
          "type": "address"
        }
      ],
      "name": "setAirdropDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeTo",
          "type": "address"
        }
      ],
      "name": "setProtocolFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPoolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedFactories",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x83241eb130b8f08b4424d885890677119e00186bb61e0d8503ab644900ba1ad2",
  "receipt": {
    "to": null,
    "from": "0x23004B8aD485cEf5C15f8D2868049aB4b2788B0b",
    "contractAddress": "0xb49FE712c5B805F8d17eBD432dEd07944967586b",
    "transactionIndex": 0,
    "gasUsed": "1301764",
    "logsBloom": "0x
    "blockHash": "0x3825c0e3d2c7ff3fd72e12a49579baa0329c9e07c9dc6707e78f004b3007f09b",
    "transactionHash": "0x83241eb130b8f08b4424d885890677119e00186bb61e0d8503ab644900ba1ad2",
    "logs": [],
    "blockNumber": 109941962,
    "cumulativeGasUsed": "1301764",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "da181dd5bac4166c943bbbd6ad40ee3b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"AddToWhitelistFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"deployData\",\"type\":\"bytes\"}],\"name\":\"DeployPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolFeeTo\",\"type\":\"address\"}],\"name\":\"ProtocolFeeToUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"RemoveFromWhitelistFactory\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addToWhitelistFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_deployData\",\"type\":\"bytes\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeTo\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeFromWhitelistFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdropDistributor\",\"type\":\"address\"}],\"name\":\"setAirdropDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeTo\",\"type\":\"address\"}],\"name\":\"setProtocolFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedFactories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployPool(address,bytes)\":{\"details\":\"Depending on the characteristic of the tokens or protocols, a different type of pool may be required.      This structure makes it easy to create custom pools.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToWhitelistFactory(address)\":{\"notice\":\"Allows creation of pools through the pool factory, admin only\"},\"airdropDistributor()\":{\"notice\":\"LP Airdrop Distributor address\"},\"getFactoryAddress(address)\":{\"notice\":\"Return the address of Factory deployed pool\"},\"getPoolAddress(uint256)\":{\"notice\":\"Return the address of pool by index\"},\"pools(address)\":{\"notice\":\"Return whether the pool was deployed via a deployer\"},\"protocolFeeTo()\":{\"notice\":\"Return the address receiving protocol fees from Pool\"},\"removeFromWhitelistFactory(address)\":{\"notice\":\"Disallows creation of pools through the pool factory, admin only\"},\"setAirdropDistributor(address)\":{\"notice\":\"set Airdrop Distributor Contract, admin only\"},\"setProtocolFeeTo(address)\":{\"notice\":\"set address to receive protocol Fee, admin only\"},\"totalPoolsCount()\":{\"notice\":\"Return the number of pools deployed from masterDeployer\"}},\"notice\":\"Pool deployer contract with template factory whitelist\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployer/MasterDeployer.sol\":\"MasterDeployer\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/deployer/MasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n *\\n * #####    ##   #    #  ####  ######   ##      #####  #####   ####  #####  ####   ####   ####  #\\n * #    #  #  #  ##   # #    # #       #  #     #    # #    # #    #   #   #    # #    # #    # #\\n * #    # #    # # #  # #      #####  #    #    #    # #    # #    #   #   #    # #      #    # #\\n * #####  ###### #  # # #  ### #      ######    #####  #####  #    #   #   #    # #      #    # #\\n * #      #    # #   ## #    # #      #    #    #      #   #  #    #   #   #    # #    # #    # #\\n * #      #    # #    #  ####  ###### #    #    #      #    #  ####    #    ####   ####   ####  ######\\n *\\n */\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../interfaces/IPoolLogger.sol\\\";\\nimport \\\"../interfaces/IMasterDeployer.sol\\\";\\n\\n/// @notice Pool deployer contract with template factory whitelist\\ncontract MasterDeployer is OwnableUpgradeable, IMasterDeployer {\\n    address public protocolFeeTo;\\n    address public airdropDistributor;\\n\\n    mapping(address => bool) public pools;\\n    mapping(address => bool) public whitelistedFactories;\\n\\n    address[] private poolArray;\\n    mapping(address => address) private factoryOf;\\n\\n    error ZeroAddress();\\n    error NotAllowedFactory();\\n    error InvalidFee();\\n\\n    function initialize(address _protocolFeeTo) external initializer {\\n        if (_protocolFeeTo == address(0)) revert ZeroAddress();\\n        protocolFeeTo = _protocolFeeTo;\\n        __Ownable_init();\\n    }\\n\\n    /// @dev Depending on the characteristic of the tokens or protocols, a different type of pool may be required.\\n    ///      This structure makes it easy to create custom pools.\\n    function deployPool(address _factory, bytes calldata _deployData) external returns (address pool) {\\n        if (!whitelistedFactories[_factory]) revert NotAllowedFactory();\\n\\n        pool = IPoolFactory(_factory).deployPool(_deployData);\\n\\n        pools[pool] = true;\\n        poolArray.push(pool);\\n        factoryOf[pool] = _factory;\\n\\n        emit DeployPool(_factory, pool, _deployData);\\n    }\\n\\n    /// @notice Allows creation of pools through the pool factory, admin only\\n    function addToWhitelistFactory(address _factory) external onlyOwner {\\n        whitelistedFactories[_factory] = true;\\n        emit AddToWhitelistFactory(_factory);\\n    }\\n\\n    /// @notice Disallows creation of pools through the pool factory, admin only\\n    function removeFromWhitelistFactory(address _factory) external onlyOwner {\\n        whitelistedFactories[_factory] = false;\\n        emit RemoveFromWhitelistFactory(_factory);\\n    }\\n\\n    /// @notice set address to receive protocol Fee, admin only\\n    function setProtocolFeeTo(address _protocolFeeTo) external onlyOwner {\\n        if (_protocolFeeTo == address(0)) revert ZeroAddress();\\n        protocolFeeTo = _protocolFeeTo;\\n        emit ProtocolFeeToUpdated(_protocolFeeTo);\\n    }\\n\\n    /// @notice set Airdrop Distributor Contract, admin only\\n    function setAirdropDistributor(address _airdropDistributor) external onlyOwner {\\n        if (_airdropDistributor == address(0)) revert ZeroAddress();\\n        airdropDistributor = _airdropDistributor;\\n    }\\n\\n    /// @notice Return the number of pools deployed from masterDeployer\\n    function totalPoolsCount() external view returns (uint256 total) {\\n        return poolArray.length;\\n    }\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool) {\\n        return poolArray[idx];\\n    }\\n\\n    /// @notice Return the address of Factory deployed pool\\n    function getFactoryAddress(address pool) external view returns (address factory) {\\n        return factoryOf[pool];\\n    }\\n}\\n\",\"keccak256\":\"0x271f6a12ed37672dd8ae13e9bb582acacb283f3909f3a272958e0028db5f5799\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool deployer interface.\\ninterface IMasterDeployer {\\n    // ============ EVENTS ================\\n    event DeployPool(address indexed factory, address indexed pool, bytes deployData);\\n    event AddToWhitelistFactory(address indexed factory);\\n    event RemoveFromWhitelistFactory(address indexed factory);\\n    event ProtocolFeeToUpdated(address protocolFeeTo);\\n\\n    /// @notice create pool through factory\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n\\n    /// @notice Return the address receiving protocol fees from Pool\\n    function protocolFeeTo() external view returns (address);\\n\\n    /// @notice Return whether the pool was deployed via a deployer\\n    function pools(address pool) external view returns (bool);\\n\\n    /// @notice LP Airdrop Distributor address\\n    function airdropDistributor() external returns (address);\\n\\n    /// @notice Return the number of pools deployed from masterDeployer\\n    function totalPoolsCount() external view returns (uint256 total);\\n\\n    /// @notice Return the address of pool by index\\n    function getPoolAddress(uint256 idx) external view returns (address pool);\\n\\n    /// @notice Return the address of Factory deployed pool\\n    function getFactoryAddress(address pool) external view returns (address factory);\\n}\\n\",\"keccak256\":\"0x78e000c156708cab98e97c281e357b4e5e000174f1b914ea5acdcd11181e4203\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolEventStruct.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPoolEventStruct {\\n    struct CreateLoggingParams {\\n        address token0;\\n        address token1;\\n        uint24 swapFee;\\n        uint160 price;\\n        uint24 tickSpacing;\\n    }\\n\\n    struct LiquidityLoggingParams {\\n        int24 lower;\\n        int24 upper;\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 liquidity;\\n    }\\n\\n    struct CollectLoggingParams {\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    struct SwapLoggingParams {\\n        bool zeroForOne;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n    }\\n\\n    struct FlashLoggingParams {\\n        address sender;\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 paid0;\\n        uint256 paid1;\\n    }\\n}\\n\",\"keccak256\":\"0xcc0f1d24f6f48573d0433421da7615b5b6d8cc53b40d9618457b39355460c9ca\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Pool deployment interface.\\ninterface IPoolFactory {\\n    function deployPool(bytes calldata _deployData) external returns (address pool);\\n\\n    function configAddress(bytes32 data) external returns (address pool);\\n\\n    function isPool(address pool) external returns (bool ok);\\n}\\n\",\"keccak256\":\"0x2a289fce9555b2513f9dbf0b8d7f340db60693a8a50b257f7737ab7beb4c5b92\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPoolLogger.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IPoolEventStruct.sol\\\";\\n\\ninterface IPoolLogger is IPoolEventStruct {\\n    event Mint(address indexed pool, int24 lower, int24 upper, uint256 amount0, uint256 amount1, uint256 liquidity);\\n    event Burn(address indexed pool, int24 lower, int24 upper, uint256 amount0, uint256 amount1, uint256 liquidity);\\n    event Collect(address indexed pool, uint256 amount0, uint256 amount1);\\n    event Swap(address indexed pool, bool zeroForOne, uint256 amountIn, uint256 amountOut);\\n    event Flash(address indexed pool, address indexed sender, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\\n\\n    function emitMint(LiquidityLoggingParams memory params) external;\\n\\n    function emitBurn(LiquidityLoggingParams memory params) external;\\n\\n    function emitCollect(CollectLoggingParams memory params) external;\\n\\n    function emitSwap(SwapLoggingParams memory params) external;\\n\\n    function emitFlash(FlashLoggingParams memory params) external;\\n}\\n\",\"keccak256\":\"0x377f76ac6e2917652d6171e47135d51c05d65238c50ee3ac55aab7e5e5b042d0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611035806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c8063a4063dbc11610097578063d0a9317311610066578063d0a9317314610268578063e0e6799f14610288578063ef3692521461029b578063f2fde38b146102bb57600080fd5b8063a4063dbc146101e6578063a7bce75514610209578063b92da7ba14610242578063c4d66de81461025557600080fd5b8063566a89af116100d3578063566a89af1461017c5780636f50f2f41461018d578063715018a6146101c05780638da5cb5b146101c857600080fd5b8062a5ae2114610104578063250558dc14610141578063254cd1a814610154578063509e3ffb14610169575b600080fd5b610117610112366004610e82565b6102ce565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61011761014f366004610ebd565b61030b565b610167610162366004610f42565b610514565b005b610167610177366004610f42565b61062e565b606954604051908152602001610138565b6101b061019b366004610f42565b60686020526000908152604090205460ff1681565b6040519015158152602001610138565b610167610726565b60335473ffffffffffffffffffffffffffffffffffffffff16610117565b6101b06101f4366004610f42565b60676020526000908152604090205460ff1681565b610117610217366004610f42565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152606a60205260409020541690565b610167610250366004610f42565b6107b3565b610167610263366004610f42565b6108a8565b6066546101179073ffffffffffffffffffffffffffffffffffffffff1681565b610167610296366004610f42565b610a5a565b6065546101179073ffffffffffffffffffffffffffffffffffffffff1681565b6101676102c9366004610f42565b610ba1565b6000606982815481106102e3576102e3610f66565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604081205460ff1661036a576040517f124e1d7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f27c3cae100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906327c3cae1906103be9086908690600401610f95565b602060405180830381600087803b1580156103d857600080fd5b505af11580156103ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104109190610fe2565b73ffffffffffffffffffffffffffffffffffffffff818116600081815260676020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556069805491820190557f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143080180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081168617909155606a909252918290208054948a16949091168417905551929350917fe469f9471ac1d98222517eb2cdff1ef4df5f7880269173bb782bb78e499d9de3906105059087908790610f95565b60405180910390a39392505050565b60335473ffffffffffffffffffffffffffffffffffffffff16331461059a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166105e7576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60335473ffffffffffffffffffffffffffffffffffffffff1633146106af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610591565b73ffffffffffffffffffffffffffffffffffffffff811660008181526068602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f67c303fcf871bb64aded503a4fcf82870def78e2fb89ddc1c23caacb4174ac319190a250565b60335473ffffffffffffffffffffffffffffffffffffffff1633146107a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610591565b6107b16000610cd1565b565b60335473ffffffffffffffffffffffffffffffffffffffff163314610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610591565b73ffffffffffffffffffffffffffffffffffffffff811660008181526068602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f77bdc353eff221266da980861500a9ef26c0829919b4b192cfa9c687d5473a839190a250565b600054610100900460ff166108c35760005460ff16156108c7565b303b155b610953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610591565b600054610100900460ff1615801561099257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff82166109df576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055610a27610d48565b8015610a5657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b60335473ffffffffffffffffffffffffffffffffffffffff163314610adb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610591565b73ffffffffffffffffffffffffffffffffffffffff8116610b28576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5384cdf4313810fabc89429faf20f012efaa71e0a3bdebc9c0a6ecb9fe1f98e89060200160405180910390a150565b60335473ffffffffffffffffffffffffffffffffffffffff163314610c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610591565b73ffffffffffffffffffffffffffffffffffffffff8116610cc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610591565b610cce81610cd1565b50565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610ddf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610591565b6107b1600054610100900460ff16610e79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610591565b6107b133610cd1565b600060208284031215610e9457600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610cce57600080fd5b600080600060408486031215610ed257600080fd5b8335610edd81610e9b565b9250602084013567ffffffffffffffff80821115610efa57600080fd5b818601915086601f830112610f0e57600080fd5b813581811115610f1d57600080fd5b876020828501011115610f2f57600080fd5b6020830194508093505050509250925092565b600060208284031215610f5457600080fd5b8135610f5f81610e9b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b600060208284031215610ff457600080fd5b8151610f5f81610e9b56fea2646970667358221220b4be964c796fee6688bfc61332ed87501cc42da4432ede86093837e810d1bb9f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c8063a4063dbc11610097578063d0a9317311610066578063d0a9317314610268578063e0e6799f14610288578063ef3692521461029b578063f2fde38b146102bb57600080fd5b8063a4063dbc146101e6578063a7bce75514610209578063b92da7ba14610242578063c4d66de81461025557600080fd5b8063566a89af116100d3578063566a89af1461017c5780636f50f2f41461018d578063715018a6146101c05780638da5cb5b146101c857600080fd5b8062a5ae2114610104578063250558dc14610141578063254cd1a814610154578063509e3ffb14610169575b600080fd5b610117610112366004610e82565b6102ce565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61011761014f366004610ebd565b61030b565b610167610162366004610f42565b610514565b005b610167610177366004610f42565b61062e565b606954604051908152602001610138565b6101b061019b366004610f42565b60686020526000908152604090205460ff1681565b6040519015158152602001610138565b610167610726565b60335473ffffffffffffffffffffffffffffffffffffffff16610117565b6101b06101f4366004610f42565b60676020526000908152604090205460ff1681565b610117610217366004610f42565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152606a60205260409020541690565b610167610250366004610f42565b6107b3565b610167610263366004610f42565b6108a8565b6066546101179073ffffffffffffffffffffffffffffffffffffffff1681565b610167610296366004610f42565b610a5a565b6065546101179073ffffffffffffffffffffffffffffffffffffffff1681565b6101676102c9366004610f42565b610ba1565b6000606982815481106102e3576102e3610f66565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604081205460ff1661036a576040517f124e1d7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f27c3cae100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906327c3cae1906103be9086908690600401610f95565b602060405180830381600087803b1580156103d857600080fd5b505af11580156103ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104109190610fe2565b73ffffffffffffffffffffffffffffffffffffffff818116600081815260676020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556069805491820190557f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143080180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081168617909155606a909252918290208054948a16949091168417905551929350917fe469f9471ac1d98222517eb2cdff1ef4df5f7880269173bb782bb78e499d9de3906105059087908790610f95565b60405180910390a39392505050565b60335473ffffffffffffffffffffffffffffffffffffffff16331461059a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166105e7576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60335473ffffffffffffffffffffffffffffffffffffffff1633146106af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610591565b73ffffffffffffffffffffffffffffffffffffffff811660008181526068602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f67c303fcf871bb64aded503a4fcf82870def78e2fb89ddc1c23caacb4174ac319190a250565b60335473ffffffffffffffffffffffffffffffffffffffff1633146107a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610591565b6107b16000610cd1565b565b60335473ffffffffffffffffffffffffffffffffffffffff163314610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610591565b73ffffffffffffffffffffffffffffffffffffffff811660008181526068602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f77bdc353eff221266da980861500a9ef26c0829919b4b192cfa9c687d5473a839190a250565b600054610100900460ff166108c35760005460ff16156108c7565b303b155b610953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610591565b600054610100900460ff1615801561099257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff82166109df576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055610a27610d48565b8015610a5657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b60335473ffffffffffffffffffffffffffffffffffffffff163314610adb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610591565b73ffffffffffffffffffffffffffffffffffffffff8116610b28576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5384cdf4313810fabc89429faf20f012efaa71e0a3bdebc9c0a6ecb9fe1f98e89060200160405180910390a150565b60335473ffffffffffffffffffffffffffffffffffffffff163314610c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610591565b73ffffffffffffffffffffffffffffffffffffffff8116610cc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610591565b610cce81610cd1565b50565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610ddf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610591565b6107b1600054610100900460ff16610e79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610591565b6107b133610cd1565b600060208284031215610e9457600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610cce57600080fd5b600080600060408486031215610ed257600080fd5b8335610edd81610e9b565b9250602084013567ffffffffffffffff80821115610efa57600080fd5b818601915086601f830112610f0e57600080fd5b813581811115610f1d57600080fd5b876020828501011115610f2f57600080fd5b6020830194508093505050509250925092565b600060208284031215610f5457600080fd5b8135610f5f81610e9b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b600060208284031215610ff457600080fd5b8151610f5f81610e9b56fea2646970667358221220b4be964c796fee6688bfc61332ed87501cc42da4432ede86093837e810d1bb9f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployPool(address,bytes)": {
        "details": "Depending on the characteristic of the tokens or protocols, a different type of pool may be required.      This structure makes it easy to create custom pools."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToWhitelistFactory(address)": {
        "notice": "Allows creation of pools through the pool factory, admin only"
      },
      "airdropDistributor()": {
        "notice": "LP Airdrop Distributor address"
      },
      "getFactoryAddress(address)": {
        "notice": "Return the address of Factory deployed pool"
      },
      "getPoolAddress(uint256)": {
        "notice": "Return the address of pool by index"
      },
      "pools(address)": {
        "notice": "Return whether the pool was deployed via a deployer"
      },
      "protocolFeeTo()": {
        "notice": "Return the address receiving protocol fees from Pool"
      },
      "removeFromWhitelistFactory(address)": {
        "notice": "Disallows creation of pools through the pool factory, admin only"
      },
      "setAirdropDistributor(address)": {
        "notice": "set Airdrop Distributor Contract, admin only"
      },
      "setProtocolFeeTo(address)": {
        "notice": "set address to receive protocol Fee, admin only"
      },
      "totalPoolsCount()": {
        "notice": "Return the number of pools deployed from masterDeployer"
      }
    },
    "notice": "Pool deployer contract with template factory whitelist",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1981,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8293,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "protocolFeeTo",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 8295,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "airdropDistributor",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 8299,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "pools",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8303,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "whitelistedFactories",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8306,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "poolArray",
        "offset": 0,
        "slot": "105",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8310,
        "contract": "contracts/deployer/MasterDeployer.sol:MasterDeployer",
        "label": "factoryOf",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}